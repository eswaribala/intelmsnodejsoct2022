"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deploymentDetector = exports.deploymentSyncDetector = void 0;
const semantic_conventions_1 = require("@opentelemetry/semantic-conventions");
const resources_1 = require("@opentelemetry/resources");
const opentelemetry_resource_detector_sync_api_1 = require("opentelemetry-resource-detector-sync-api");
class DeploymentSyncDetector {
    detect() {
        if (process.env.NODE_ENV) {
            return new resources_1.Resource({
                [semantic_conventions_1.SemanticResourceAttributes.DEPLOYMENT_ENVIRONMENT]: process.env.NODE_ENV,
            });
        }
        else {
            return resources_1.Resource.empty();
        }
    }
}
exports.deploymentSyncDetector = new DeploymentSyncDetector();
exports.deploymentDetector = opentelemetry_resource_detector_sync_api_1.syncDetectorToDetector(exports.deploymentSyncDetector);
//# sourceMappingURL=deployment.js.map