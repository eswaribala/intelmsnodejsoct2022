{"version":3,"file":"deployment.js","sourceRoot":"","sources":["../../src/deployment.ts"],"names":[],"mappings":";;;AAAA,8EAAiF;AACjF,wDAAoD;AACpD,uGAAgG;AAEhG,MAAM,sBAAsB;IACxB,MAAM;QACF,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE;YACtB,OAAO,IAAI,oBAAQ,CAAC;gBAChB,CAAC,iDAA0B,CAAC,sBAAsB,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ;aAC5E,CAAC,CAAC;SACN;aAAM;YACH,OAAO,oBAAQ,CAAC,KAAK,EAAE,CAAC;SAC3B;IACL,CAAC;CACJ;AAEY,QAAA,sBAAsB,GAAG,IAAI,sBAAsB,EAAE,CAAC;AACtD,QAAA,kBAAkB,GAAG,iEAAsB,CAAC,8BAAsB,CAAC,CAAC","sourcesContent":["import { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { Resource } from '@opentelemetry/resources';\nimport { SyncDetector, syncDetectorToDetector } from 'opentelemetry-resource-detector-sync-api';\n\nclass DeploymentSyncDetector implements SyncDetector {\n    detect(): Resource {\n        if (process.env.NODE_ENV) {\n            return new Resource({\n                [SemanticResourceAttributes.DEPLOYMENT_ENVIRONMENT]: process.env.NODE_ENV,\n            });\n        } else {\n            return Resource.empty();\n        }\n    }\n}\n\nexport const deploymentSyncDetector = new DeploymentSyncDetector();\nexport const deploymentDetector = syncDetectorToDetector(deploymentSyncDetector);\n"]}