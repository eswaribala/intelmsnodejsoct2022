{"version":3,"file":"git-branch.js","sourceRoot":"","sources":["../../src/git-branch.ts"],"names":[],"mappings":";;;AAAA,qDAAyE;AAEzE,MAAM,wBAAwB,GAAG,CAAC,GAAW,EAAsB,EAAE;IACjE,iDAAiD;IACjD,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,aAAa,CAAC,EAAE;QAChC,OAAO;KACV;IACD,OAAO,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;AAC7B,CAAC,CAAC;AAEF,MAAM,iBAAiB,GAAG,GAAW,EAAE;IACnC,MAAM,eAAe,GAAG;QACpB,iBAAiB;QACjB,iBAAiB;QACjB,iBAAiB;QACjB,eAAe;KAClB,CAAC;IAEF,KAAK,MAAM,MAAM,IAAI,eAAe,EAAE;QAClC,IAAI,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;YACrB,OAAO,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;SAC9B;KACJ;IAED,oEAAoE;IACpE,MAAM,KAAK,GAAG;QACV,YAAY,EAAE,qBAAqB;KACtC,CAAC;IAEF,KAAK,MAAM,MAAM,IAAI,KAAK,EAAE;QACxB,IAAI,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;YACrB,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAChC,MAAM,UAAU,GAAG,wBAAwB,CAAC,GAAG,CAAC,CAAC;YACjD,IAAI,UAAU,EAAE;gBACZ,OAAO,UAAU,CAAC;aACrB;SACJ;KACJ;AACL,CAAC,CAAC;AAEF,MAAM,uBAAuB,GAAG,GAAW,EAAE;IACzC,MAAM,gBAAgB,GAAG,2BAA2B,CAAC;IACrD,IAAI;QACA,OAAO,kCAAiB,CAAC,gBAAgB,CAAC,CAAC;KAC9C;IAAC,WAAM,GAAE;AACd,CAAC,CAAC;AAEF;;;;GAIG;AACH,MAAM,oBAAoB,GAAG,GAAW,EAAE;IACtC,IAAI;QACA,MAAM,GAAG,GAAG,mCAAkB,CAAC,MAAM,CAAC,CAAC;QACvC,IAAI,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;YACzB,iEAAiE;YACjE,MAAM,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YAC/C,OAAO,wBAAwB,CAAC,GAAG,CAAC,CAAC;SACxC;KACJ;IAAC,WAAM;QACJ,6CAA6C;KAChD;AACL,CAAC,CAAC;AAEK,MAAM,gBAAgB,GAAG,GAAuB,EAAE;IACrD,MAAM,YAAY,GAAG,iBAAiB,EAAE,CAAC;IACzC,IAAI,YAAY,EAAE;QACd,OAAO,YAAY,CAAC;KACvB;IAED,MAAM,YAAY,GAAG,uBAAuB,EAAE,CAAC;IAC/C,IAAI,YAAY,EAAE;QACd,OAAO,YAAY,CAAC;KACvB;IAED,MAAM,eAAe,GAAG,oBAAoB,EAAE,CAAC;IAC/C,IAAI,eAAe,EAAE;QACjB,OAAO,eAAe,CAAC;KAC1B;AACL,CAAC,CAAC;AAfW,QAAA,gBAAgB,oBAe3B","sourcesContent":["import { executeGitCommand, readFileFromGitDir } from './fecth-git-data';\n\nconst extractBranchNameFromRef = (ref: string): string | undefined => {\n    // git stores the ref with '/' in windows as well\n    if (!ref.startsWith('refs/heads/')) {\n        return;\n    }\n    return ref.split('/')[2];\n};\n\nconst branchNameFromEnv = (): string => {\n    const possibleEnvVars = [\n        'GIT_BRANCH_NAME',\n        'VCS_BRANCH_NAME', // attribute name syntax\n        'GITHUB_HEAD_REF', // CI: GitHub Actions. the name is misleading, this is actually branch name and not the ref\n        'CIRCLE_BRANCH',\n    ];\n\n    for (const envVar of possibleEnvVars) {\n        if (process.env[envVar]) {\n            return process.env[envVar];\n        }\n    }\n\n    // following env variables are supplying the ref and not branch name\n    const asRef = [\n        'GITHUB_REF', // CI: Github Actions\n    ];\n\n    for (const envVar of asRef) {\n        if (process.env[envVar]) {\n            const ref = process.env[envVar];\n            const branchName = extractBranchNameFromRef(ref);\n            if (branchName) {\n                return branchName;\n            }\n        }\n    }\n};\n\nconst getBranchNameFromGitCli = (): string => {\n    const gitGetShaCommand = 'git branch --show-current';\n    try {\n        return executeGitCommand(gitGetShaCommand);\n    } catch {}\n};\n\n/**\n * Try to read git branch name directly from git dir.\n * This can be useful if git cli is not installed (like if codebase was copied / mounted into a docker container).\n * This method assumes that git directory is called '.git' and that cwd of the process is the repo root.\n */\nconst branchNameFromGitDir = (): string => {\n    try {\n        const rev = readFileFromGitDir('HEAD');\n        if (rev.startsWith('ref: ')) {\n            // can return something like 'ref: refs/heads/resource-detectors'\n            const ref = rev.substring(5).replace('\\n', '');\n            return extractBranchNameFromRef(ref);\n        }\n    } catch {\n        // file is missing or content not as expected\n    }\n};\n\nexport const getGitBranchName = (): string | undefined => {\n    const valueFromEnv = branchNameFromEnv();\n    if (valueFromEnv) {\n        return valueFromEnv;\n    }\n\n    const valueFromCli = getBranchNameFromGitCli();\n    if (valueFromCli) {\n        return valueFromCli;\n    }\n\n    const valueFromGitDir = branchNameFromGitDir();\n    if (valueFromGitDir) {\n        return valueFromGitDir;\n    }\n};\n"]}