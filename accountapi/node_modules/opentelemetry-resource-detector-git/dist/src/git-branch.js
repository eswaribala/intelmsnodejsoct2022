"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGitBranchName = void 0;
const fecth_git_data_1 = require("./fecth-git-data");
const extractBranchNameFromRef = (ref) => {
    // git stores the ref with '/' in windows as well
    if (!ref.startsWith('refs/heads/')) {
        return;
    }
    return ref.split('/')[2];
};
const branchNameFromEnv = () => {
    const possibleEnvVars = [
        'GIT_BRANCH_NAME',
        'VCS_BRANCH_NAME',
        'GITHUB_HEAD_REF',
        'CIRCLE_BRANCH',
    ];
    for (const envVar of possibleEnvVars) {
        if (process.env[envVar]) {
            return process.env[envVar];
        }
    }
    // following env variables are supplying the ref and not branch name
    const asRef = [
        'GITHUB_REF', // CI: Github Actions
    ];
    for (const envVar of asRef) {
        if (process.env[envVar]) {
            const ref = process.env[envVar];
            const branchName = extractBranchNameFromRef(ref);
            if (branchName) {
                return branchName;
            }
        }
    }
};
const getBranchNameFromGitCli = () => {
    const gitGetShaCommand = 'git branch --show-current';
    try {
        return fecth_git_data_1.executeGitCommand(gitGetShaCommand);
    }
    catch (_a) { }
};
/**
 * Try to read git branch name directly from git dir.
 * This can be useful if git cli is not installed (like if codebase was copied / mounted into a docker container).
 * This method assumes that git directory is called '.git' and that cwd of the process is the repo root.
 */
const branchNameFromGitDir = () => {
    try {
        const rev = fecth_git_data_1.readFileFromGitDir('HEAD');
        if (rev.startsWith('ref: ')) {
            // can return something like 'ref: refs/heads/resource-detectors'
            const ref = rev.substring(5).replace('\n', '');
            return extractBranchNameFromRef(ref);
        }
    }
    catch (_a) {
        // file is missing or content not as expected
    }
};
const getGitBranchName = () => {
    const valueFromEnv = branchNameFromEnv();
    if (valueFromEnv) {
        return valueFromEnv;
    }
    const valueFromCli = getBranchNameFromGitCli();
    if (valueFromCli) {
        return valueFromCli;
    }
    const valueFromGitDir = branchNameFromGitDir();
    if (valueFromGitDir) {
        return valueFromGitDir;
    }
};
exports.getGitBranchName = getGitBranchName;
//# sourceMappingURL=git-branch.js.map