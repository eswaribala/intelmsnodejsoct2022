{"version":3,"file":"git.js","sourceRoot":"","sources":["../../src/git.ts"],"names":[],"mappings":";;;AAAA,wDAAwE;AACxE,uGAAgG;AAChG,mCAAqE;AACrE,uCAAuC;AACvC,iDAA4C;AAC5C,6CAAgD;AAEhD,MAAM,eAAe;IACjB,MAAM;QACF,MAAM,SAAS,GAAG,IAAI,CAAC,0BAA0B,EAAE,CAAC;QACpD,MAAM,oBAAoB,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;QAE5D,yFAAyF;QACzF,OAAO,oBAAoB,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;IACjD,CAAC;IAED,+FAA+F;IAC/F,0BAA0B;QACtB,MAAM,MAAM,GAAG,oBAAU,EAAE,CAAC;QAC5B,IAAI,CAAC,MAAM,EAAE;YACT,OAAO,oBAAQ,CAAC,KAAK,EAAE,CAAC;SAC3B;QAED,MAAM,UAAU,GAAuB;YACnC,CAAC,6BAAqB,CAAC,UAAU,CAAC,EAAE,KAAK;YACzC,CAAC,6BAAqB,CAAC,aAAa,CAAC,EAAE,MAAM;SAChD,CAAC;QAEF,MAAM,OAAO,GAAG,yBAAU,EAAE,CAAC;QAC7B,IAAI,OAAO,EAAE;YACT,UAAU,CAAC,6BAAqB,CAAC,YAAY,CAAC,GAAG,OAAO,CAAC;SAC5D;QAED,MAAM,UAAU,GAAG,6BAAgB,EAAE,CAAC;QACtC,IAAI,UAAU,EAAE;YACZ,UAAU,CAAC,6BAAqB,CAAC,eAAe,CAAC,GAAG,UAAU,CAAC;SAClE;QAED,OAAO,IAAI,oBAAQ,CAAC,UAAU,CAAC,CAAC;IACpC,CAAC;IAED,uBAAuB;QACnB,IAAI;YACA,4DAA4D;YAC5D,MAAM,UAAU,GAAG,OAAO,CAAC,SAAS,2BAAmB,EAAE,CAAC,CAAC;YAC3D,OAAO,IAAI,oBAAQ,CAAC,UAAU,CAAC,CAAC;SACnC;QAAC,WAAM;YACJ,OAAO,oBAAQ,CAAC,KAAK,EAAE,CAAC;SAC3B;IACL,CAAC;CACJ;AAEY,QAAA,eAAe,GAAG,IAAI,eAAe,EAAE,CAAC;AACxC,QAAA,WAAW,GAAG,iEAAsB,CAAC,uBAAe,CAAC,CAAC","sourcesContent":["import { Resource, ResourceAttributes } from '@opentelemetry/resources';\nimport { SyncDetector, syncDetectorToDetector } from 'opentelemetry-resource-detector-sync-api';\nimport { GitResourceAttributes, postInstallFileName } from './types';\nimport { getHeadSha } from './git-sha';\nimport { getCloneId } from './git-clone-id';\nimport { getGitBranchName } from './git-branch';\n\nclass GitSyncDetector implements SyncDetector {\n    detect(): Resource {\n        const fromGitDb = this.createGitResourceFromGitDb();\n        const fromPostInstallStamp = this.readPostInstallResource();\n\n        // prefer to take current value from db, and fallback to post install values if available\n        return fromPostInstallStamp.merge(fromGitDb);\n    }\n\n    /** Attempt to create the git resource based only on git db (not from post install stamping) */\n    createGitResourceFromGitDb(): Resource {\n        const gitSha = getHeadSha();\n        if (!gitSha) {\n            return Resource.empty();\n        }\n\n        const attributes: ResourceAttributes = {\n            [GitResourceAttributes.VCS_SYSTEM]: 'git',\n            [GitResourceAttributes.VCS_COMMIT_ID]: gitSha,\n        };\n\n        const cloneId = getCloneId();\n        if (cloneId) {\n            attributes[GitResourceAttributes.VCS_CLONE_ID] = cloneId;\n        }\n\n        const branchName = getGitBranchName();\n        if (branchName) {\n            attributes[GitResourceAttributes.VCS_BRANCH_NAME] = branchName;\n        }\n\n        return new Resource(attributes);\n    }\n\n    readPostInstallResource(): Resource {\n        try {\n            // from dist/src/ to package root (where the file is stored)\n            const attributes = require(`../../${postInstallFileName}`);\n            return new Resource(attributes);\n        } catch {\n            return Resource.empty();\n        }\n    }\n}\n\nexport const gitSyncDetector = new GitSyncDetector();\nexport const gitDetector = syncDetectorToDetector(gitSyncDetector);\n"]}