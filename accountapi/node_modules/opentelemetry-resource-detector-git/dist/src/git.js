"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.gitDetector = exports.gitSyncDetector = void 0;
const resources_1 = require("@opentelemetry/resources");
const opentelemetry_resource_detector_sync_api_1 = require("opentelemetry-resource-detector-sync-api");
const types_1 = require("./types");
const git_sha_1 = require("./git-sha");
const git_clone_id_1 = require("./git-clone-id");
const git_branch_1 = require("./git-branch");
class GitSyncDetector {
    detect() {
        const fromGitDb = this.createGitResourceFromGitDb();
        const fromPostInstallStamp = this.readPostInstallResource();
        // prefer to take current value from db, and fallback to post install values if available
        return fromPostInstallStamp.merge(fromGitDb);
    }
    /** Attempt to create the git resource based only on git db (not from post install stamping) */
    createGitResourceFromGitDb() {
        const gitSha = git_sha_1.getHeadSha();
        if (!gitSha) {
            return resources_1.Resource.empty();
        }
        const attributes = {
            [types_1.GitResourceAttributes.VCS_SYSTEM]: 'git',
            [types_1.GitResourceAttributes.VCS_COMMIT_ID]: gitSha,
        };
        const cloneId = git_clone_id_1.getCloneId();
        if (cloneId) {
            attributes[types_1.GitResourceAttributes.VCS_CLONE_ID] = cloneId;
        }
        const branchName = git_branch_1.getGitBranchName();
        if (branchName) {
            attributes[types_1.GitResourceAttributes.VCS_BRANCH_NAME] = branchName;
        }
        return new resources_1.Resource(attributes);
    }
    readPostInstallResource() {
        try {
            // from dist/src/ to package root (where the file is stored)
            const attributes = require(`../../${types_1.postInstallFileName}`);
            return new resources_1.Resource(attributes);
        }
        catch (_a) {
            return resources_1.Resource.empty();
        }
    }
}
exports.gitSyncDetector = new GitSyncDetector();
exports.gitDetector = opentelemetry_resource_detector_sync_api_1.syncDetectorToDetector(exports.gitSyncDetector);
//# sourceMappingURL=git.js.map