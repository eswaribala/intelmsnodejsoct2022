{"version":3,"file":"git-sha.js","sourceRoot":"","sources":["../../src/git-sha.ts"],"names":[],"mappings":";;;AAAA,qDAAyE;AACzE,mCAAuC;AAEvC,MAAM,WAAW,GAAG,CAAC,CAAS,EAAW,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,oBAAY,CAAC,KAAK,IAAI,CAAC;AAE3E;;;;GAIG;AACH,MAAM,iBAAiB,GAAG,GAAkB,EAAE;IAC1C,MAAM,gBAAgB,GAAG,oBAAoB,CAAC;IAC9C,IAAI;QACA,OAAO,kCAAiB,CAAC,gBAAgB,CAAC,CAAC;KAC9C;IAAC,WAAM;QACJ,iFAAiF;QACjF,OAAO,IAAI,CAAC;KACf;AACL,CAAC,CAAC;AAEF;;;;GAIG;AACH,MAAM,iBAAiB,GAAG,GAAuB,EAAE;IAC/C,IAAI;QACA,MAAM,GAAG,GAAG,mCAAkB,CAAC,MAAM,CAAC,CAAC;QACvC,IAAI,WAAW,CAAC,GAAG,CAAC,EAAE;YAClB,OAAO,GAAG,CAAC;SACd;aAAM,IAAI,GAAG,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;YAChC,iEAAiE;YACjE,MAAM,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YAC/C,MAAM,cAAc,GAAG,mCAAkB,CAAC,GAAG,CAAC,CAAC;YAC/C,IAAI,WAAW,CAAC,cAAc,CAAC,EAAE;gBAC7B,OAAO,cAAc,CAAC;aACzB;SACJ;KACJ;IAAC,WAAM;QACJ,6CAA6C;KAChD;AACL,CAAC,CAAC;AAEF,MAAM,kBAAkB,GAAG,GAAW,EAAE;IACpC,MAAM,eAAe,GAAG;QACpB,gBAAgB;QAChB,eAAe;QACf,YAAY;QACZ,aAAa;QACb,yBAAyB;QACzB,eAAe,EAAE,mBAAmB;KACvC,CAAC;IAEF,KAAK,MAAM,MAAM,IAAI,eAAe,EAAE;QAClC,IAAI,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;YACrB,OAAO,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;SAC9B;KACJ;AACL,CAAC,CAAC;AAEK,MAAM,UAAU,GAAG,GAAkB,EAAE;IAC1C,gFAAgF;IAChF,MAAM,MAAM,GAAG,kBAAkB,EAAE,CAAC;IACpC,IAAI,MAAM,EAAE;QACR,OAAO,MAAM,CAAC;KACjB;IAED,6EAA6E;IAC7E,MAAM,QAAQ,GAAG,iBAAiB,EAAE,CAAC;IACrC,IAAI,QAAQ,EAAE;QACV,OAAO,QAAQ,CAAC;KACnB;IAED,2FAA2F;IAC3F,MAAM,QAAQ,GAAG,iBAAiB,EAAE,CAAC;IACrC,IAAI,QAAQ,EAAE;QACV,OAAO,QAAQ,CAAC;KACnB;IAED,mDAAmD;IACnD,IAAI;QACA,MAAM,eAAe,GAAG,OAAO,CAAC,4CAA4C,CAAC,CAAC;QAC9E,IAAI,eAAe,CAAC,OAAO;YAAE,OAAO,eAAe,CAAC,OAAO,CAAC;KAC/D;IAAC,WAAM,GAAE;IAEV,OAAO,IAAI,CAAC;AAChB,CAAC,CAAC;AA1BW,QAAA,UAAU,cA0BrB","sourcesContent":["import { executeGitCommand, readFileFromGitDir } from './fecth-git-data';\nimport { gitSha1Regex } from './types';\n\nconst isStringSha = (s: string): boolean => s.match(gitSha1Regex) !== null;\n\n/**\n * Try to run git cli to find the git sha of the current HEAD\n *\n * @returns {(string | null)} - returns the extended SHA-1 of the HEAD, or null if not successful\n */\nconst headShaFromGitCli = (): string | null => {\n    const gitGetShaCommand = 'git rev-parse HEAD';\n    try {\n        return executeGitCommand(gitGetShaCommand);\n    } catch {\n        // throws if git not installed, or if this is not a git repo, or if command fails\n        return null;\n    }\n};\n\n/**\n * Try to read git sha of HEAD directly from git dir.\n * This can be useful if git cli is not installed (like if codebase was copied / mounted into a docker container).\n * This method assumes that git directory is called '.git' and that cwd of the process is the repo root.\n */\nconst headShaFromGitDir = (): string | undefined => {\n    try {\n        const rev = readFileFromGitDir('HEAD');\n        if (isStringSha(rev)) {\n            return rev;\n        } else if (rev.startsWith('ref: ')) {\n            // can return something like 'ref: refs/heads/resource-detectors'\n            const ref = rev.substring(5).replace('\\n', '');\n            const refFileContent = readFileFromGitDir(ref);\n            if (isStringSha(refFileContent)) {\n                return refFileContent;\n            }\n        }\n    } catch {\n        // file is missing or content not as expected\n    }\n};\n\nconst shaFromEnvVariable = (): string => {\n    const possibleEnvVars = [\n        'GIT_COMMIT_SHA',\n        'VCS_COMMIT_ID', // alias which follows the attribute name convention\n        'GITHUB_SHA', // CI: GitHub Actions\n        'CIRCLE_SHA1', // CI: CircleCI\n        'TRAVIS_PULL_REQUEST_SHA', // CI: TravisCI\n        'CI_COMMIT_SHA', // CI: GitLab CI/CD\n    ];\n\n    for (const envVar of possibleEnvVars) {\n        if (process.env[envVar]) {\n            return process.env[envVar];\n        }\n    }\n};\n\nexport const getHeadSha = (): string | null => {\n    // if running in CI context, try to get git sha from environment variables first\n    const envSha = shaFromEnvVariable();\n    if (envSha) {\n        return envSha;\n    }\n\n    // try to use git cli, which may not work if cli not installed on the machine\n    const cliValue = headShaFromGitCli();\n    if (cliValue) {\n        return cliValue;\n    }\n\n    // if git cli did not work, but we do have the .git directory, try to read from it directly\n    const dirValue = headShaFromGitDir();\n    if (dirValue) {\n        return dirValue;\n    }\n\n    // try to get githash capture by postinstall script\n    try {\n        const postInstallJson = require('../../../aspecto-post-install-githash.json');\n        if (postInstallJson.githash) return postInstallJson.githash;\n    } catch {}\n\n    return null;\n};\n"]}