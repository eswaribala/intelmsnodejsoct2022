{"version":3,"file":"stream-chunks.js","sourceRoot":"","sources":["../../src/stream-chunks.ts"],"names":[],"mappings":";;;AAAA,iEAAiE;AACjE,8DAA8D;AAC9D,qEAAqE;AACxD,QAAA,yBAAyB,GAAG,MAAM,CAAC;AAEhD,MAAa,YAAY;IAIrB;QACI,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;IACpB,CAAC;IAED,QAAQ,CAAC,KAAU;QACf,IAAI,IAAI,CAAC,MAAM,IAAI,iCAAyB;YAAE,OAAO;QAErD,MAAM,WAAW,GAAG,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,MAAM,CAAC;QAClC,IAAI,CAAC,WAAW;YAAE,OAAO;QAEzB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACxB,IAAI,CAAC,MAAM,IAAI,WAAW,CAAC;IAC/B,CAAC;IAED,OAAO;QACH,OAAO,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAChC,CAAC;CACJ;AAtBD,oCAsBC","sourcesContent":["// for body with at most this length, full body will be captured.\n// for large body with more than this amount of bytes, we will\n// collect at least this amount of bytes, but might truncate after it\nexport const MIN_COLLECTED_BODY_LENGTH = 524288;\n\nexport class StreamChunks {\n    chunks: String[] | Buffer[];\n    length: number;\n\n    constructor() {\n        this.chunks = [];\n        this.length = 0;\n    }\n\n    addChunk(chunk: any) {\n        if (this.length >= MIN_COLLECTED_BODY_LENGTH) return;\n\n        const chunkLength = chunk?.length;\n        if (!chunkLength) return;\n\n        this.chunks.push(chunk);\n        this.length += chunkLength;\n    }\n\n    getBody(): string {\n        return this.chunks.join('');\n    }\n}\n"]}