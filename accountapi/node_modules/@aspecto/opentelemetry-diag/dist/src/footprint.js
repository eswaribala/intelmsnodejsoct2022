"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFooprintForGitHook = exports.getHostFootprint = exports.getDockerFootprint = exports.getFootprint = void 0;
const is_docker_1 = __importDefault(require("is-docker"));
const types_1 = require("./types");
const sys_info_1 = require("./sys-info");
async function getFootprint(baseFpDetails) {
    let fp;
    const ts = new Date().getTime();
    const baseFp = Object.assign(Object.assign({}, baseFpDetails), { ts });
    if (is_docker_1.default()) {
        fp = await getDockerFootprint(baseFp);
    }
    else {
        fp = await getHostFootprint(baseFp);
    }
    return fp;
}
exports.getFootprint = getFootprint;
async function getDockerFootprint(baseFp) {
    const containerId = await sys_info_1.getContainerId();
    const cpuHash = sys_info_1.getCpuHash();
    const sysStartTime = sys_info_1.getSysStartTime();
    const totalMem = sys_info_1.getTotalMem();
    // const deviceHashes = getDeviceHashes();
    const footprint = Object.assign(Object.assign({}, baseFp), { hostType: types_1.HostType.Docker, containerId,
        cpuHash,
        totalMem, deviceHashes: [], sysStartTime });
    return footprint;
}
exports.getDockerFootprint = getDockerFootprint;
async function getHostFootprint(baseFp) {
    const machineId = await sys_info_1.getMachineId();
    const hasDocker = await sys_info_1.checkHasDocker();
    let containers = [];
    if (hasDocker) {
        containers = await sys_info_1.getContainerIds({ all: false });
    }
    const footprint = Object.assign(Object.assign({}, baseFp), { hostType: types_1.HostType.Host, hasDocker,
        containers,
        machineId });
    return footprint;
}
exports.getHostFootprint = getHostFootprint;
async function getFooprintForGitHook() {
    const machineId = await sys_info_1.getMachineId();
    const hasDocker = await sys_info_1.checkHasDocker();
    let containers = [];
    if (hasDocker) {
        containers = await sys_info_1.getContainerIds({ all: true });
    }
    const footprint = {
        hostType: types_1.HostType.Host,
        hasDocker,
        containers,
        machineId,
    };
    return footprint;
}
exports.getFooprintForGitHook = getFooprintForGitHook;
//# sourceMappingURL=footprint.js.map