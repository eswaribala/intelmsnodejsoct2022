"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OtelDiag = void 0;
const lodash_1 = __importDefault(require("lodash"));
const api = __importStar(require("@opentelemetry/api"));
const core_1 = require("@opentelemetry/core");
const socket_io_client_1 = require("socket.io-client");
const config_1 = require("./config");
const footprint_1 = require("./footprint");
const types_1 = require("./types");
const FOOTPRINT_UPDATE_INTERVAL = 15000;
var SocketEvents;
(function (SocketEvents) {
    SocketEvents["SdkEvent"] = "sdk-event";
    SocketEvents["FootprintUpdate"] = "footprint-update";
    SocketEvents["Error"] = "producer-error";
})(SocketEvents || (SocketEvents = {}));
class OtelDiag {
    constructor(config) {
        this.sdkEvents = [];
        this.config = lodash_1.default.clone(config);
        this.instanceId = config.instanceId;
    }
    async init() {
        // TODO: useful in dev mode, what to do in prod?
        // process.on('uncaughtException', (ex) => console.log(ex));
        return await api.context.with(core_1.suppressTracing(api.context.active()), () => this._initConnectedMode());
    }
    addSdkEvent(event) {
        this.sdkEvents.push(event);
        this.sockClient.emit(SocketEvents.SdkEvent, event);
    }
    async _initConnectedMode() {
        this.footprint = await footprint_1.getFootprint({ instanceId: this.instanceId, token: this.config.aspectoAuth });
        const liveFlowsUrl = process.env.ASPECTO_LIVE_FLOWS_URL || config_1.LIVE_FLOWS_URL;
        this.sockClient = socket_io_client_1.io(`${liveFlowsUrl}/span-producer`, {
            query: { footprint: JSON.stringify(this.footprint) },
            reconnection: true,
            transports: ['websocket'],
            autoUnref: true,
        });
        this.sockClient.on(SocketEvents.SdkEvent, () => {
            this.sdkEvents.forEach((event) => {
                this.sockClient.emit(SocketEvents.SdkEvent, event);
            });
        });
        if (this.footprint.hostType === types_1.HostType.Host) {
            const timerHandler = setInterval(async () => {
                try {
                    const updatedFp = (await footprint_1.getFootprint({
                        instanceId: this.instanceId,
                        token: this.config.aspectoAuth,
                    }));
                    if (this._areContainersUpdated(this.footprint.containers, updatedFp.containers)) {
                        this.sockClient.emit(SocketEvents.FootprintUpdate, updatedFp);
                    }
                    this.footprint = updatedFp;
                }
                catch (err) {
                    this.sockClient.emit(SocketEvents.Error, { message: err.message, stack: err.stack });
                }
            }, FOOTPRINT_UPDATE_INTERVAL);
            timerHandler.unref();
        }
        return {
            instanceId: this.instanceId,
        };
    }
    _areContainersUpdated(currContainers, updContainers) {
        const currSet = new Set(currContainers);
        const updSet = new Set(updContainers);
        if (currSet.size !== updSet.size)
            return true;
        for (let cont of currSet.values()) {
            if (!updSet.has(cont))
                return true;
        }
        return false;
    }
}
exports.OtelDiag = OtelDiag;
//# sourceMappingURL=diag.js.map