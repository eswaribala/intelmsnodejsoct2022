"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDockerClient = exports.getMachineId = exports.getContainerIds = exports.checkHasDocker = exports.getSysStartTime = exports.getTotalMem = exports.getCpuHash = exports.getContainerId = void 0;
const docker_container_id_1 = __importDefault(require("docker-container-id"));
const os_1 = __importDefault(require("os"));
const hash_1 = require("./hash");
const dockerode_1 = __importDefault(require("dockerode"));
const node_machine_id_1 = require("node-machine-id");
// It's important to be able to do the same in other languages
// So, we shouldn't use anything node-specific
async function getContainerId() {
    return await docker_container_id_1.default();
}
exports.getContainerId = getContainerId;
function getCpuHash() {
    const cpuCount = os_1.default.cpus().length;
    const cpuModel = os_1.default.cpus()[0].model;
    const cpuHash = hash_1.hash({ cpuCount, cpuModel });
    return cpuHash;
}
exports.getCpuHash = getCpuHash;
function getTotalMem() {
    return os_1.default.totalmem();
}
exports.getTotalMem = getTotalMem;
function getSysStartTime() {
    const now = new Date();
    const startTime = now.getTime() / 1000 - os_1.default.uptime();
    return startTime;
}
exports.getSysStartTime = getSysStartTime;
async function checkHasDocker() {
    try {
        const client = getDockerClient();
        await client.ping();
        return true;
    }
    catch (err) {
        return false;
    }
}
exports.checkHasDocker = checkHasDocker;
async function getContainerIds({ all = false } = {}) {
    const client = getDockerClient();
    const containers = await client.listContainers({ all: all });
    const ids = containers.map((c) => c.Id);
    return ids;
}
exports.getContainerIds = getContainerIds;
async function getMachineId() {
    const mid = await node_machine_id_1.machineId();
    return mid;
}
exports.getMachineId = getMachineId;
function getDockerClient() {
    const platform = os_1.default.platform();
    if (platform == 'darwin' || platform == 'linux') {
        return new dockerode_1.default({ socketPath: '/var/run/docker.sock' });
    }
    else if (platform == 'win32') {
        return new dockerode_1.default({ socketPath: '//./pipe/docker_engine' });
    }
    return null;
}
exports.getDockerClient = getDockerClient;
//# sourceMappingURL=sys-info.js.map