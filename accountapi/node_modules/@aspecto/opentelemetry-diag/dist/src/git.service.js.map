{"version":3,"file":"git.service.js","sourceRoot":"","sources":["../../src/git.service.ts"],"names":[],"mappings":"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","sourcesContent":["import cp = require('child_process');\nimport slash from 'slash';\n\nexport type GitRevParseResult = {\n    prefix: string;\n    gitCommonDir: string;\n};\n\nexport function gitRevParse(cwd = process.cwd()): GitRevParseResult {\n    const { status, stderr, stdout } = cp.spawnSync('git', ['rev-parse', '--show-prefix', '--git-common-dir'], { cwd });\n\n    if (status !== 0) {\n        throw new Error(stderr.toString());\n    }\n\n    const [prefix, gitCommonDir] = stdout\n        .toString()\n        .split('\\n')\n        .map((s) => s.trim())\n        // Normalize for Windows\n        .map(slash);\n\n    return { prefix, gitCommonDir };\n}\n\nexport function getGitConfig(cwd = process.cwd()) {\n    const { status, stderr, stdout } = cp.spawnSync('git', ['config', '--list'], { cwd });\n\n    if (status !== 0) {\n        throw new Error(stderr.toString());\n    }\n\n    const gitConfig = stdout\n        .toString()\n        .split('\\n')\n        .reduce((res, line) => {\n            const [key, ...val] = line.trim().split('=');\n            if (!key) return res;\n            res[key] = val.join('');\n            return res;\n        }, {});\n\n    return gitConfig;\n}\n\nexport function getGitHead(cwd = process.cwd()) {\n    const { status, stderr, stdout } = cp.spawnSync('git', ['rev-parse', 'HEAD'], { cwd });\n\n    if (status !== 0) {\n        throw new Error(stderr.toString());\n    }\n\n    const headSha = stdout.toString().trim();\n    return headSha;\n}\n\nexport function getPushCommits(headSha: string, cwd = process.cwd()) {\n    const { status, stderr, stdout } = cp.spawnSync('git', ['rev-list', headSha, '--not', '--remotes=origin'], { cwd });\n\n    if (status !== 0) {\n        throw new Error(stderr.toString());\n    }\n\n    const commits = stdout\n        .toString()\n        .split('\\n')\n        .filter(Boolean)\n        .map((s) => s.trim());\n    return commits;\n}\n\nexport function getGitBranch(cwd = process.cwd()) {\n    const { status, stderr, stdout } = cp.spawnSync('git', ['rev-parse', '--abbrev-ref', 'HEAD'], { cwd });\n\n    if (status !== 0) {\n        throw new Error(stderr.toString());\n    }\n\n    const branch = stdout.toString().trim();\n    return branch;\n}\n\nexport function isGitRepo() {\n    const output = cp\n        .execSync('inside_git_repo=\"$(git rev-parse --is-inside-work-tree 2>/dev/null)\"; echo $inside_git_repo;')\n        .toString();\n    return typeof output === 'string' && output.includes('true');\n}\n"]}