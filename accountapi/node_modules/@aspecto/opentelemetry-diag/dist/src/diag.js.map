{"version":3,"file":"diag.js","sourceRoot":"","sources":["../../src/diag.ts"],"names":[],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport * as api from '@opentelemetry/api';\nimport { suppressTracing } from '@opentelemetry/core';\nimport { Socket as ClientSocket, io as createClientSocket } from 'socket.io-client';\nimport { LIVE_FLOWS_URL } from './config';\nimport { getFootprint } from './footprint';\nimport { Footprint, HostType, HostFootprint, OtelDiagInfo, ExporterConfig, SdkEvent } from './types';\n\nconst FOOTPRINT_UPDATE_INTERVAL = 15_000;\n\nenum SocketEvents {\n    SdkEvent = 'sdk-event',\n    FootprintUpdate = 'footprint-update',\n    Error = 'producer-error',\n}\n\nexport class OtelDiag {\n    private config: ExporterConfig;\n    private sockClient: ClientSocket;\n    private instanceId: string;\n    private footprint: Footprint;\n    private sdkEvents: SdkEvent[] = [];\n\n    constructor(config: ExporterConfig) {\n        this.config = _.clone(config);\n        this.instanceId = config.instanceId;\n    }\n\n    public async init(): Promise<OtelDiagInfo> {\n        // TODO: useful in dev mode, what to do in prod?\n        // process.on('uncaughtException', (ex) => console.log(ex));\n        return await api.context.with(suppressTracing(api.context.active()), () => this._initConnectedMode());\n    }\n\n    public addSdkEvent(event: SdkEvent) {\n        this.sdkEvents.push(event);\n        this.sockClient.emit(SocketEvents.SdkEvent, event);\n    }\n\n    private async _initConnectedMode(): Promise<OtelDiagInfo> {\n        this.footprint = await getFootprint({ instanceId: this.instanceId, token: this.config.aspectoAuth });\n\n        const liveFlowsUrl = process.env.ASPECTO_LIVE_FLOWS_URL || LIVE_FLOWS_URL;\n        this.sockClient = createClientSocket(`${liveFlowsUrl}/span-producer`, {\n            query: { footprint: JSON.stringify(this.footprint) },\n            reconnection: true,\n            transports: ['websocket'],\n            autoUnref: true,\n        });\n\n        this.sockClient.on(SocketEvents.SdkEvent, () => {\n            this.sdkEvents.forEach((event) => {\n                this.sockClient.emit(SocketEvents.SdkEvent, event);\n            });\n        });\n\n        if (this.footprint.hostType === HostType.Host) {\n            const timerHandler = setInterval(async () => {\n                try {\n                    const updatedFp = (await getFootprint({\n                        instanceId: this.instanceId,\n                        token: this.config.aspectoAuth,\n                    })) as HostFootprint;\n                    if (\n                        this._areContainersUpdated((this.footprint as HostFootprint).containers, updatedFp.containers)\n                    ) {\n                        this.sockClient.emit(SocketEvents.FootprintUpdate, updatedFp);\n                    }\n                    this.footprint = updatedFp;\n                } catch (err) {\n                    this.sockClient.emit(SocketEvents.Error, { message: err.message, stack: err.stack });\n                }\n            }, FOOTPRINT_UPDATE_INTERVAL);\n            timerHandler.unref();\n        }\n\n        return {\n            instanceId: this.instanceId,\n        };\n    }\n\n    private _areContainersUpdated(currContainers: string[], updContainers: string[]) {\n        const currSet = new Set(currContainers);\n        const updSet = new Set(updContainers);\n        if (currSet.size !== updSet.size) return true;\n        for (let cont of currSet.values()) {\n            if (!updSet.has(cont)) return true;\n        }\n        return false;\n    }\n}\n"]}