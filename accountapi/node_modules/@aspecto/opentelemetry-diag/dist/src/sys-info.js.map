{"version":3,"file":"sys-info.js","sourceRoot":"","sources":["../../src/sys-info.ts"],"names":[],"mappings":";;;;;;AAAA,8EAAyC;AACzC,4CAAoB;AACpB,iCAA8B;AAC9B,0DAA+B;AAC/B,qDAA4C;AAE5C,8DAA8D;AAC9D,8CAA8C;AAEvC,KAAK,UAAU,cAAc;IAChC,OAAO,MAAM,6BAAM,EAAE,CAAC;AAC1B,CAAC;AAFD,wCAEC;AAED,SAAgB,UAAU;IACtB,MAAM,QAAQ,GAAG,YAAE,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC;IAClC,MAAM,QAAQ,GAAG,YAAE,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;IACpC,MAAM,OAAO,GAAG,WAAI,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC;IAC7C,OAAO,OAAO,CAAC;AACnB,CAAC;AALD,gCAKC;AAED,SAAgB,WAAW;IACvB,OAAO,YAAE,CAAC,QAAQ,EAAE,CAAC;AACzB,CAAC;AAFD,kCAEC;AAED,SAAgB,eAAe;IAC3B,MAAM,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC;IACvB,MAAM,SAAS,GAAG,GAAG,CAAC,OAAO,EAAE,GAAG,IAAI,GAAG,YAAE,CAAC,MAAM,EAAE,CAAC;IACrD,OAAO,SAAS,CAAC;AACrB,CAAC;AAJD,0CAIC;AAEM,KAAK,UAAU,cAAc;IAChC,IAAI;QACA,MAAM,MAAM,GAAG,eAAe,EAAE,CAAC;QACjC,MAAM,MAAM,CAAC,IAAI,EAAE,CAAC;QACpB,OAAO,IAAI,CAAC;KACf;IAAC,OAAO,GAAG,EAAE;QACV,OAAO,KAAK,CAAC;KAChB;AACL,CAAC;AARD,wCAQC;AAEM,KAAK,UAAU,eAAe,CAAC,EAAE,GAAG,GAAG,KAAK,EAAE,GAAG,EAAE;IACtD,MAAM,MAAM,GAAG,eAAe,EAAE,CAAC;IACjC,MAAM,UAAU,GAAG,MAAM,MAAM,CAAC,cAAc,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;IAC7D,MAAM,GAAG,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IACxC,OAAO,GAAG,CAAC;AACf,CAAC;AALD,0CAKC;AAEM,KAAK,UAAU,YAAY;IAC9B,MAAM,GAAG,GAAG,MAAM,2BAAS,EAAE,CAAC;IAC9B,OAAO,GAAG,CAAC;AACf,CAAC;AAHD,oCAGC;AAED,SAAgB,eAAe;IAC3B,MAAM,QAAQ,GAAG,YAAE,CAAC,QAAQ,EAAE,CAAC;IAC/B,IAAI,QAAQ,IAAI,QAAQ,IAAI,QAAQ,IAAI,OAAO,EAAE;QAC7C,OAAO,IAAI,mBAAM,CAAC,EAAE,UAAU,EAAE,sBAAsB,EAAE,CAAC,CAAC;KAC7D;SAAM,IAAI,QAAQ,IAAI,OAAO,EAAE;QAC5B,OAAO,IAAI,mBAAM,CAAC,EAAE,UAAU,EAAE,wBAAwB,EAAE,CAAC,CAAC;KAC/D;IACD,OAAO,IAAI,CAAC;AAChB,CAAC;AARD,0CAQC","sourcesContent":["import getCid from 'docker-container-id';\nimport os from 'os';\nimport { hash } from './hash';\nimport Docker from 'dockerode';\nimport { machineId } from 'node-machine-id';\n\n// It's important to be able to do the same in other languages\n// So, we shouldn't use anything node-specific\n\nexport async function getContainerId(): Promise<string> {\n    return await getCid();\n}\n\nexport function getCpuHash(): string {\n    const cpuCount = os.cpus().length;\n    const cpuModel = os.cpus()[0].model;\n    const cpuHash = hash({ cpuCount, cpuModel });\n    return cpuHash;\n}\n\nexport function getTotalMem(): number {\n    return os.totalmem();\n}\n\nexport function getSysStartTime(): number {\n    const now = new Date();\n    const startTime = now.getTime() / 1000 - os.uptime();\n    return startTime;\n}\n\nexport async function checkHasDocker(): Promise<boolean> {\n    try {\n        const client = getDockerClient();\n        await client.ping();\n        return true;\n    } catch (err) {\n        return false;\n    }\n}\n\nexport async function getContainerIds({ all = false } = {}): Promise<string[]> {\n    const client = getDockerClient();\n    const containers = await client.listContainers({ all: all });\n    const ids = containers.map((c) => c.Id);\n    return ids;\n}\n\nexport async function getMachineId(): Promise<string> {\n    const mid = await machineId();\n    return mid;\n}\n\nexport function getDockerClient() {\n    const platform = os.platform();\n    if (platform == 'darwin' || platform == 'linux') {\n        return new Docker({ socketPath: '/var/run/docker.sock' });\n    } else if (platform == 'win32') {\n        return new Docker({ socketPath: '//./pipe/docker_engine' });\n    }\n    return null;\n}\n"]}