"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.nanosToHrTime = exports.millisToHrTime = exports.addDelta = exports.getTimeDeltaInMillis = void 0;
const perf_hooks_1 = require("perf_hooks");
// we can't just convert hrtime to nanos because number (which is float64) only has 53 bits for mantissa
// time delta is a number of millis, but it has a fractional part which represents micros
function getTimeDeltaInMillis() {
    const pnow = perf_hooks_1.performance.now() + perf_hooks_1.performance.timeOrigin;
    const now = new Date();
    const delta = now.getTime() - pnow;
    return delta;
}
exports.getTimeDeltaInMillis = getTimeDeltaInMillis;
function addDelta(hrTime, deltaMillis) {
    const hrDelta = millisToHrTime(deltaMillis);
    const seconds = hrTime[0] + hrDelta[0];
    const totalNanos = hrTime[1] + hrDelta[1];
    const [secondsFromNanos, nanos] = millisToHrTime(totalNanos * 1e-6);
    return [seconds + secondsFromNanos, nanos];
}
exports.addDelta = addDelta;
// only usable for small time deltas
// because of float64 limitations it loses precision for big numbers
function millisToHrTime(millis) {
    const nanos = millis * 1e6;
    return nanosToHrTime(nanos);
}
exports.millisToHrTime = millisToHrTime;
function nanosToHrTime(nanos) {
    const seconds = Math.floor(nanos * 1e-9);
    const ns = Math.floor(nanos - seconds * 1e9);
    return [seconds, ns];
}
exports.nanosToHrTime = nanosToHrTime;
//# sourceMappingURL=time.js.map