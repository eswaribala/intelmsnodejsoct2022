export declare type InstanceId = string;
export declare type ExporterConfig = {
    serviceName: string;
    aspectoAuth: string;
    instanceId: string;
};
export interface SdkEvent {
    type: string;
    payload: any;
}
export declare type OtelDiagInfo = {
    instanceId: string;
};
export declare enum HostType {
    Docker = "docker",
    Host = "host"
}
export declare type BaseFootprintDetails = {
    token: string;
    instanceId: InstanceId;
};
export declare type BaseFootprint = BaseFootprintDetails & {
    ts: number;
};
export declare type DockerFootprint = BaseFootprint & {
    hostType: HostType.Docker;
    sysStartTime: number;
    containerId: string;
    cpuHash: string;
    totalMem: number;
    deviceHashes: string[];
};
export interface LogEvent {
    id: string;
    timestamp: number;
    spanId: string;
    traceId: string;
    level: string;
    message: string;
    packageName: string;
    args: string;
}
export declare type HostFootprint = BaseFootprint & {
    hostType: HostType.Host;
    machineId: string;
    hasDocker: boolean;
    containers: string[];
};
export declare type GitHostFootprint = {
    hostType: HostType.Host;
    machineId: string;
    hasDocker: boolean;
    containers: string[];
};
export declare type Footprint = DockerFootprint | HostFootprint;
export interface IFootprintService {
    getId(footprint: Footprint): InstanceId;
}
export interface IFootprintMatchingService {
    getServiceGroup(iid: InstanceId): InstanceId[];
}
//# sourceMappingURL=types.d.ts.map