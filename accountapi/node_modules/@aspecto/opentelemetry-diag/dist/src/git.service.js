"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isGitRepo = exports.getGitBranch = exports.getPushCommits = exports.getGitHead = exports.getGitConfig = exports.gitRevParse = void 0;
const cp = require("child_process");
const slash_1 = __importDefault(require("slash"));
function gitRevParse(cwd = process.cwd()) {
    const { status, stderr, stdout } = cp.spawnSync('git', ['rev-parse', '--show-prefix', '--git-common-dir'], { cwd });
    if (status !== 0) {
        throw new Error(stderr.toString());
    }
    const [prefix, gitCommonDir] = stdout
        .toString()
        .split('\n')
        .map((s) => s.trim())
        // Normalize for Windows
        .map(slash_1.default);
    return { prefix, gitCommonDir };
}
exports.gitRevParse = gitRevParse;
function getGitConfig(cwd = process.cwd()) {
    const { status, stderr, stdout } = cp.spawnSync('git', ['config', '--list'], { cwd });
    if (status !== 0) {
        throw new Error(stderr.toString());
    }
    const gitConfig = stdout
        .toString()
        .split('\n')
        .reduce((res, line) => {
        const [key, ...val] = line.trim().split('=');
        if (!key)
            return res;
        res[key] = val.join('');
        return res;
    }, {});
    return gitConfig;
}
exports.getGitConfig = getGitConfig;
function getGitHead(cwd = process.cwd()) {
    const { status, stderr, stdout } = cp.spawnSync('git', ['rev-parse', 'HEAD'], { cwd });
    if (status !== 0) {
        throw new Error(stderr.toString());
    }
    const headSha = stdout.toString().trim();
    return headSha;
}
exports.getGitHead = getGitHead;
function getPushCommits(headSha, cwd = process.cwd()) {
    const { status, stderr, stdout } = cp.spawnSync('git', ['rev-list', headSha, '--not', '--remotes=origin'], { cwd });
    if (status !== 0) {
        throw new Error(stderr.toString());
    }
    const commits = stdout
        .toString()
        .split('\n')
        .filter(Boolean)
        .map((s) => s.trim());
    return commits;
}
exports.getPushCommits = getPushCommits;
function getGitBranch(cwd = process.cwd()) {
    const { status, stderr, stdout } = cp.spawnSync('git', ['rev-parse', '--abbrev-ref', 'HEAD'], { cwd });
    if (status !== 0) {
        throw new Error(stderr.toString());
    }
    const branch = stdout.toString().trim();
    return branch;
}
exports.getGitBranch = getGitBranch;
function isGitRepo() {
    const output = cp
        .execSync('inside_git_repo="$(git rev-parse --is-inside-work-tree 2>/dev/null)"; echo $inside_git_repo;')
        .toString();
    return typeof output === 'string' && output.includes('true');
}
exports.isGitRepo = isGitRepo;
//# sourceMappingURL=git.service.js.map