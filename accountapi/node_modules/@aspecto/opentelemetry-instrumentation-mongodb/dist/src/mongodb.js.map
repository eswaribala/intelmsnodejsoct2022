{"version":3,"file":"mongodb.js","sourceRoot":"","sources":["../../src/mongodb.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { trace, SpanStatusCode, Span, context, diag, SpanKind } from '@opentelemetry/api';\nimport type * as mongodb from 'mongodb';\nimport {\n    MongodbCommandType,\n    MongoInternalCommand,\n    MongoInternalTopology,\n    WireProtocolInternal,\n    MongoDbInstrumentationConfig,\n    CursorState,\n    MongoDbResponseCustomAttributesFunction,\n    MongoCommandOptions,\n    MongoDbGetMoreResponseAggregateFunction,\n} from './types';\nimport { VERSION } from './version';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions';\nimport {\n    InstrumentationBase,\n    InstrumentationNodeModuleDefinition,\n    InstrumentationNodeModuleFile,\n    isWrapped,\n    safeExecuteInTheMiddle,\n} from '@opentelemetry/instrumentation';\n\nconst supportedVersions = ['>=3.3 <4'];\n\nconst DEFAULT_CONFIG: MongoDbInstrumentationConfig = {\n    requireParentSpan: true,\n};\n\nconst AGGREGATE_CURSOR_SPAN: unique symbol = Symbol('opentelemetry.mongodb.aggregate-cursor-span');\n\n/** mongodb instrumentation plugin for OpenTelemetry */\nexport class MongoDBInstrumentation extends InstrumentationBase<typeof mongodb> {\n    protected _config: MongoDbInstrumentationConfig;\n    private moduleVersion: string;\n\n    constructor(_config: MongoDbInstrumentationConfig = {}) {\n        super('@aspecto/opentelemetry-instrumentation-mongodb', VERSION, Object.assign({}, DEFAULT_CONFIG, _config));\n    }\n\n    init() {\n        const { patch, unpatch } = this._getModulePatches();\n        const { patch: patchProtocol, unpatch: unpatchProtocol } = this._getWireProtocolPatches();\n        return [\n            new InstrumentationNodeModuleDefinition<typeof mongodb>('mongodb', supportedVersions, patch, unpatch, [\n                new InstrumentationNodeModuleFile<WireProtocolInternal>(\n                    'mongodb/lib/core/wireprotocol/index.js',\n                    supportedVersions,\n                    patchProtocol,\n                    unpatchProtocol\n                ),\n            ]),\n        ];\n    }\n\n    private _getModulePatches<T extends typeof mongodb>() {\n        return {\n            patch: (moduleExports: T, moduleVersion?: string) => {\n                this.moduleVersion = moduleVersion;\n                if (moduleExports?.Cursor?.prototype == undefined) return moduleExports;\n                diag.debug(`Applying patch for mongodb@${moduleVersion}`);\n\n                // patch close operation\n                if (isWrapped(moduleExports.Cursor.prototype.close)) {\n                    this._unwrap(moduleExports.Cursor.prototype, 'close');\n                }\n                this._wrap(moduleExports.Cursor.prototype, 'close', this._getPatchCursorClose());\n                return moduleExports;\n            },\n            unpatch: (moduleExports?: T, moduleVersion?: string) => {\n                if (moduleExports?.Cursor?.prototype == undefined) return;\n                diag.debug(`Removing internal patch for mongodb@${moduleVersion}`);\n                this._unwrap(moduleExports.Cursor.prototype, 'close');\n            },\n        };\n    }\n\n    private _getWireProtocolPatches<T extends WireProtocolInternal>() {\n        return {\n            patch: (moduleExports: T, moduleVersion?: string) => {\n                diag.debug(`Applying patch for wire protocol mongodb@${moduleVersion}`);\n                this.moduleVersion = moduleVersion;\n\n                // patch insert operation\n                if (isWrapped(moduleExports.insert)) {\n                    this._unwrap(moduleExports, 'insert');\n                }\n                this._wrap(moduleExports, 'insert', this._getPatchOperation('insert'));\n                // patch remove operation\n                if (isWrapped(moduleExports.remove)) {\n                    this._unwrap(moduleExports, 'remove');\n                }\n                this._wrap(moduleExports, 'remove', this._getPatchOperation('remove'));\n                // patch update operation\n                if (isWrapped(moduleExports.update)) {\n                    this._unwrap(moduleExports, 'update');\n                }\n                this._wrap(moduleExports, 'update', this._getPatchOperation('update'));\n                // patch other command\n                if (isWrapped(moduleExports.command)) {\n                    this._unwrap(moduleExports, 'command');\n                }\n                this._wrap(moduleExports, 'command', this._getPatchCommand());\n                // patch query\n                if (isWrapped(moduleExports.query)) {\n                    this._unwrap(moduleExports, 'query');\n                }\n                this._wrap(moduleExports, 'query', this._getPatchFind());\n                // patch get more operation on cursor\n                if (isWrapped(moduleExports.getMore)) {\n                    this._unwrap(moduleExports, 'getMore');\n                }\n                this._wrap(moduleExports, 'getMore', this._getPatchCursor());\n                return moduleExports;\n            },\n            unpatch: (moduleExports?: T, moduleVersion?: string) => {\n                if (moduleExports === undefined) return;\n                diag.debug(`Removing internal patch for wire protocol mongodb@${moduleVersion}`);\n                this._unwrap(moduleExports, 'insert');\n                this._unwrap(moduleExports, 'remove');\n                this._unwrap(moduleExports, 'update');\n                this._unwrap(moduleExports, 'command');\n                this._unwrap(moduleExports, 'query');\n                this._unwrap(moduleExports, 'getMore');\n            },\n        };\n    }\n\n    /** Ends a created span. */\n    private _getPatchCursorClose() {\n        const instrumentation = this;\n        return (original: Function) => {\n            return function patchedCursorClose(this: { cursorState: CursorState }, ...args: unknown[]) {\n                const span = (this.cursorState as any)[AGGREGATE_CURSOR_SPAN] as Span;\n\n                if (span) {\n                    instrumentation._applyGetMoreResponseHook(\n                        span,\n                        null,\n                        this.cursorState,\n                        instrumentation._config?.aggregateGetMoreResponseHook\n                    );\n\n                    span.end();\n                }\n                return original.apply(this, args);\n            };\n        };\n    }\n\n    /** Creates spans for common operations */\n    private _getPatchOperation(operationName: 'insert' | 'update' | 'remove') {\n        const instrumentation = this;\n        return (original: WireProtocolInternal[typeof operationName]) => {\n            return function patchedServerCommand(\n                this: unknown,\n                server: MongoInternalTopology,\n                ns: string,\n                ops: unknown[],\n                options: unknown | Function,\n                callback?: Function\n            ) {\n                const currentSpan = trace.getSpan(context.active());\n                const resultHandler = typeof options === 'function' ? options : callback;\n                if (\n                    (instrumentation._config?.requireParentSpan === true && !currentSpan) ||\n                    typeof resultHandler !== 'function' ||\n                    typeof ops !== 'object'\n                ) {\n                    return original.apply(this, arguments);\n                }\n                const span = instrumentation.tracer.startSpan(`mongodb.${operationName}`, {\n                    kind: SpanKind.CLIENT,\n                });\n                instrumentation._populateAttributes(span, ns, operationName, server, ops as any);\n                const patchedCallback = instrumentation._patchEnd(span, resultHandler);\n                // handle when options is the callback to send the correct number of args\n                if (typeof options === 'function') {\n                    return original.call(this, server, ns, ops, patchedCallback);\n                } else {\n                    return original.call(this, server, ns, ops, options, patchedCallback);\n                }\n            };\n        };\n    }\n\n    /** Creates spans for command operation */\n    private _getPatchCommand() {\n        const instrumentation = this;\n        return (original: WireProtocolInternal['command']) => {\n            return function patchedServerCommand(\n                this: unknown,\n                server: MongoInternalTopology,\n                ns: string,\n                cmd: MongoInternalCommand,\n                options: unknown | Function | MongoCommandOptions,\n                callback?: Function\n            ) {\n                const currentSpan = trace.getSpan(context.active());\n                const resultHandler = typeof options === 'function' ? options : callback;\n                const commandType = instrumentation._getCommandType(cmd);\n                const shouldBeIgnored =\n                    commandType === MongodbCommandType.IS_MASTER && instrumentation._config?.ignoreIsMasterCommand;\n\n                if (\n                    (instrumentation._config?.requireParentSpan === true && !currentSpan) ||\n                    typeof resultHandler !== 'function' ||\n                    typeof cmd !== 'object' ||\n                    shouldBeIgnored\n                ) {\n                    return original.apply(this, arguments);\n                }\n\n                const type = commandType === MongodbCommandType.UNKNOWN ? 'command' : commandType;\n                const span = instrumentation.tracer.startSpan(`mongodb.${type}`, {\n                    kind: SpanKind.CLIENT,\n                });\n                instrumentation._populateAttributes(span, ns, type, server, cmd);\n\n                const isUsedCursor =\n                    commandType === MongodbCommandType.AGGREGATE || commandType === MongodbCommandType.LIST_INDEXES;\n                const cursorState = (options as MongoCommandOptions)?.session?.owner?.cursorState;\n\n                let patchedCallback;\n                if (isUsedCursor && instrumentation._config?.aggregateGetMoreOperations === true && cursorState) {\n                    (cursorState as any)[AGGREGATE_CURSOR_SPAN] = span;\n                    patchedCallback = instrumentation._patchEndAggregated(span, resultHandler, cursorState);\n                } else {\n                    patchedCallback = instrumentation._patchEnd(span, resultHandler);\n                }\n\n                // handle when options is the callback to send the correct number of args\n                if (typeof options === 'function') {\n                    return original.call(this, server, ns, cmd, patchedCallback);\n                } else {\n                    return original.call(this, server, ns, cmd, options, patchedCallback);\n                }\n            };\n        };\n    }\n\n    /** Creates spans for find operation */\n    private _getPatchFind() {\n        const instrumentation = this;\n        return (original: WireProtocolInternal['query']) => {\n            return function patchedServerCommand(\n                this: unknown,\n                server: MongoInternalTopology,\n                ns: string,\n                cmd: MongoInternalCommand,\n                cursorState: CursorState,\n                options: unknown | Function,\n                callback?: Function\n            ) {\n                const currentSpan = trace.getSpan(context.active());\n                const resultHandler = typeof options === 'function' ? options : callback;\n                if (\n                    (instrumentation._config?.requireParentSpan === true && !currentSpan) ||\n                    typeof resultHandler !== 'function' ||\n                    typeof cmd !== 'object'\n                ) {\n                    return original.apply(this, arguments);\n                }\n                const operationName = 'find';\n                const span = instrumentation.tracer.startSpan(`mongodb.${operationName}`, {\n                    kind: SpanKind.CLIENT,\n                });\n                instrumentation._populateAttributes(span, ns, operationName, server, cmd);\n\n                let patchedCallback;\n                // no need to aggregate in case when cursorState.batchSize less then one.\n                if (instrumentation._config?.aggregateGetMoreOperations === true && cursorState.batchSize > 1) {\n                    (cursorState as any)[AGGREGATE_CURSOR_SPAN] = span;\n                    patchedCallback = instrumentation._patchEndAggregated(span, resultHandler, cursorState);\n                } else {\n                    patchedCallback = instrumentation._patchEnd(span, resultHandler);\n                }\n\n                // handle when options is the callback to send the correct number of args\n                if (typeof options === 'function') {\n                    return original.call(this, server, ns, cmd, cursorState, patchedCallback);\n                } else {\n                    return original.call(this, server, ns, cmd, cursorState, options, patchedCallback);\n                }\n            };\n        };\n    }\n\n    /** Creates spans for getMore operation */\n    private _getPatchCursor() {\n        const instrumentation = this;\n        return (original: WireProtocolInternal['getMore']) => {\n            return function patchedServerCommand(\n                this: unknown,\n                server: MongoInternalTopology,\n                ns: string,\n                cursorState: CursorState,\n                batchSize: number,\n                options: unknown | Function,\n                callback?: Function\n            ) {\n                const currentSpan = trace.getSpan(context.active());\n                const resultHandler = typeof options === 'function' ? options : callback;\n                if (\n                    (instrumentation._config?.requireParentSpan === true && !currentSpan) ||\n                    typeof resultHandler !== 'function'\n                ) {\n                    return original.apply(this, arguments);\n                }\n\n                const underlyingCursorSpan =\n                    instrumentation._config?.aggregateGetMoreOperations === true\n                        ? (cursorState as any)[AGGREGATE_CURSOR_SPAN]\n                        : undefined;\n\n                let patchedCallback;\n                if (underlyingCursorSpan) {\n                    patchedCallback = instrumentation._patchEndAggregated(\n                        underlyingCursorSpan,\n                        resultHandler,\n                        cursorState\n                    );\n                } else {\n                    const operationName = 'getMore';\n                    const span = instrumentation.tracer.startSpan(`mongodb.${operationName}`, {\n                        kind: SpanKind.CLIENT,\n                    });\n                    instrumentation._populateAttributes(span, ns, operationName, server, cursorState.cmd);\n                    patchedCallback = instrumentation._patchEnd(span, resultHandler);\n                }\n\n                // handle when options is the callback to send the correct number of args\n                if (typeof options === 'function') {\n                    return original.call(this, server, ns, cursorState, batchSize, patchedCallback);\n                } else {\n                    return original.call(this, server, ns, cursorState, batchSize, options, patchedCallback);\n                }\n            };\n        };\n    }\n\n    /**\n     * Get the mongodb command type from the object.\n     * @param command Internal mongodb command object\n     */\n    private _getCommandType(command: MongoInternalCommand): MongodbCommandType {\n        if (command.createIndexes !== undefined) {\n            return MongodbCommandType.CREATE_INDEXES;\n        } else if (command.findAndModify !== undefined) {\n            return MongodbCommandType.FIND_AND_MODIFY;\n        } else if (command.ismaster !== undefined) {\n            return MongodbCommandType.IS_MASTER;\n        } else if (command.count !== undefined) {\n            return MongodbCommandType.COUNT;\n        } else if (command.listIndexes !== undefined) {\n            return MongodbCommandType.LIST_INDEXES;\n        } else if (command.aggregate !== undefined) {\n            return MongodbCommandType.AGGREGATE;\n        } else {\n            return MongodbCommandType.UNKNOWN;\n        }\n    }\n\n    /**\n     * Populate span's attributes by fetching related metadata from the context\n     * @param span span to add attributes to\n     * @param ns mongodb namespace\n     * @param command mongodb internal representation of a command\n     * @param topology mongodb internal representation of the network topology\n     */\n    private _populateAttributes(\n        span: Span,\n        ns: string,\n        operation: string,\n        topology: MongoInternalTopology,\n        command?: MongoInternalCommand\n    ) {\n        // add network attributes to determine the remote server\n        if (topology.description?.address) {\n            const [host, port] = topology.description.address.split(':') ?? [];\n            span.setAttributes({\n                [SemanticAttributes.NET_PEER_NAME]: host,\n                [SemanticAttributes.NET_PEER_PORT]: parseInt(port, 10),\n            });\n        } else if (topology && topology.s) {\n            span.setAttributes({\n                [SemanticAttributes.NET_PEER_NAME]: topology.s.options?.host ?? topology.s.host,\n                [SemanticAttributes.NET_PEER_PORT]: topology.s.options?.port ?? topology.s.port,\n            });\n        }\n\n        // The namespace is a combination of the database name and the name of the\n        // collection or index, like so: [database-name].[collection-or-index-name].\n        // It could be a string or an instance of MongoDBNamespace, as such we\n        // always coerce to a string to extract db and collection.\n        const [dbName, dbCollection] = ns.toString().split('.');\n        const collection = this._getCollectionNameByCommand(command) ?? dbCollection;\n\n        // add database related attributes\n        span.setAttributes({\n            [SemanticAttributes.DB_OPERATION]: operation,\n            [SemanticAttributes.DB_SYSTEM]: 'mongodb',\n            [SemanticAttributes.DB_NAME]: dbName,\n            [SemanticAttributes.DB_MONGODB_COLLECTION]: collection,\n        });\n\n        if (this._config.moduleVersionAttributeName) {\n            span.setAttribute(this._config.moduleVersionAttributeName, this.moduleVersion);\n        }\n\n        if (command === undefined) return;\n\n        const dbStatementSerializer =\n            this._config?.dbStatementSerializer || this._defaultDbStatementSerializer.bind(this);\n        span.setAttribute(SemanticAttributes.DB_STATEMENT, dbStatementSerializer(operation, command));\n    }\n\n    /**\n     * Ends a created span.\n     * @param span The created span to end.\n     * @param resultHandler A callback function.\n     */\n    private _patchEnd(span: Span, resultHandler: Function): Function {\n        const instrumentation = this;\n        // mongodb is using \"tick\" when calling a callback, this way the context\n        // in final callback (resultHandler) is lost\n        const activeContext = context.active();\n        return function patchedEnd(this: {}, ...args: unknown[]) {\n            const error = args[0];\n            if (error instanceof Error) {\n                span.recordException(error);\n                span.setStatus({\n                    code: SpanStatusCode.ERROR,\n                    message: error.message,\n                });\n            }\n            if (!error) {\n                instrumentation._applyResponseHook(span, args[1], instrumentation._config?.responseHook);\n            }\n            span.end();\n\n            return context.with(activeContext, () => {\n                return resultHandler.apply(this, args);\n            });\n        };\n    }\n\n    /**\n     * Ends a created span.\n     * @param span The created span to end.\n     * @param resultHandler A callback function.\n     * @param payload An aggregated payload.\n     */\n    private _patchEndAggregated(span: Span, resultHandler: Function, cursorState: CursorState): Function {\n        const instrumentation = this;\n        // mongodb is using \"tick\" when calling a callback, this way the context\n        // in final callback (resultHandler) is lost\n        const activeContext = context.active();\n        return function patchedEnd(this: {}, ...args: unknown[]) {\n            const [error, payload] = args;\n            if (error instanceof Error) {\n                span.recordException(error);\n                span.setStatus({\n                    code: SpanStatusCode.ERROR,\n                    message: error.message,\n                });\n\n                span.end();\n            } else if (instrumentation._config?.aggregateGetMoreResponseHook && payload) {\n                instrumentation._applyGetMoreResponseHook(\n                    span,\n                    payload,\n                    cursorState,\n                    instrumentation._config.aggregateGetMoreResponseHook\n                );\n            }\n\n            return context.with(activeContext, () => {\n                return resultHandler.apply(this, args);\n            });\n        };\n    }\n\n    private _defaultDbStatementSerializer(operation: string, command: any) {\n        let statement = this._getStatement(operation, command);\n        if (Array.isArray(statement)) {\n            statement = statement.map((obj) => this._defaultObjectSerializer(obj));\n        } else {\n            statement = this._defaultObjectSerializer(statement);\n        }\n        try {\n            return JSON.stringify(statement);\n        } catch (e) {\n            diag.error('mongodb instrumentation: defaultDbStatementSerializer error', e);\n            return undefined;\n        }\n    }\n\n    private _defaultObjectSerializer(obj: object) {\n        return Object.keys(obj).reduce((obj, key) => {\n            obj[key] = '?';\n            return obj;\n        }, {} as { [key: string]: unknown });\n    }\n\n    private _getStatement(operation: string, payload: any) {\n        if (operation === 'insert') {\n            // for insert, insertMany operations the payload contains inserted documents\n            return Array.isArray(payload) && payload.length === 1 ? payload[0] : payload;\n        }\n        if ((operation === 'update' || operation === 'remove') && Array.isArray(payload)) {\n            // for update and remove operations the payload is an array with one element (query + update + opts)\n            payload = payload[0];\n        }\n        // parse query (aka filter) and update statements from the payload\n        return payload.query ?? payload.q ?? payload;\n    }\n\n    private _applyResponseHook(span: Span, response: any, responseHook?: MongoDbResponseCustomAttributesFunction) {\n        if (responseHook) {\n            safeExecuteInTheMiddle(\n                () => responseHook(span, response),\n                (e) => {\n                    if (e) {\n                        diag.error('mongodb instrumentation: responseHook error', e);\n                    }\n                },\n                true\n            );\n        }\n    }\n\n    private _applyGetMoreResponseHook(\n        span: Span,\n        payload: any,\n        cursorState: CursorState,\n        getMoreResponseHook?: MongoDbGetMoreResponseAggregateFunction\n    ) {\n        if (getMoreResponseHook) {\n            safeExecuteInTheMiddle(\n                () => getMoreResponseHook(span, { payload, cursorState }),\n                (e) => {\n                    if (e) {\n                        diag.error('mongodb instrumentation: getMoreResponseHook error', e);\n                    }\n                },\n                true\n            );\n        }\n    }\n\n    private _getCollectionNameByCommand(command: MongoInternalCommand): string {\n        if (!command) return undefined;\n        const commandType = this._getCommandType(command);\n        if (commandType === MongodbCommandType.AGGREGATE) return command.aggregate;\n        if (commandType === MongodbCommandType.LIST_INDEXES) return command.listIndexes;\n        if (commandType === MongodbCommandType.CREATE_INDEXES) return command.createIndexes;\n        if (commandType === MongodbCommandType.FIND_AND_MODIFY) return command.findAndModify;\n    }\n}\n"]}