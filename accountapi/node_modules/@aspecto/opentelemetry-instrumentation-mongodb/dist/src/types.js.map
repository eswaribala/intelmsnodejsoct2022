{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/types.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AA2IH,IAAY,kBAQX;AARD,WAAY,kBAAkB;IAC1B,sDAAgC,CAAA;IAChC,uDAAiC,CAAA;IACjC,kDAA4B,CAAA;IAC5B,6CAAuB,CAAA;IACvB,4CAAsB,CAAA;IACtB,qCAAe,CAAA;IACf,yCAAmB,CAAA;AACvB,CAAC,EARW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAQ7B","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Span } from '@opentelemetry/api';\nimport { InstrumentationConfig } from '@opentelemetry/instrumentation';\n\nexport type DbStatementSerializer = (operation: string, payload: any) => string;\n\nexport type MongoDbResponseCustomAttributesFunction = (span: Span, response: any) => void;\n\nexport type MongoDbGetMoreResponseHookInformation = {\n    payload?: any;\n    cursorState?: CursorState;\n};\n\nexport type MongoDbGetMoreResponseAggregateFunction = (\n    span: Span,\n    responseInfo: MongoDbGetMoreResponseHookInformation\n) => void;\n\nexport interface MongoDbInstrumentationConfig extends InstrumentationConfig {\n    /** Custom serializer function for the db.statement tag */\n    dbStatementSerializer?: DbStatementSerializer;\n\n    /** hook for adding custom attributes using the response payload */\n    responseHook?: MongoDbResponseCustomAttributesFunction;\n\n    /**\n     * If passed, a span attribute will be added to all spans with key of the provided \"moduleVersionAttributeName\"\n     * and value of the module version.\n     */\n    moduleVersionAttributeName?: string;\n\n    /** Require parent to create mongodb span, default when unset is true */\n    requireParentSpan?: boolean;\n\n    /** If true, a span for periodical isMaster command will not be generated, default when unset is false */\n    ignoreIsMasterCommand?: boolean;\n\n    /** If true, a span for a `getMore` command will not be generated, default when unset is false */\n    aggregateGetMoreOperations?: boolean;\n\n    /** hook for aggregate a response payload of a GetMore operation, applicable only when `aggregateGetMoreOperations` config option is true */\n    aggregateGetMoreResponseHook?: MongoDbGetMoreResponseAggregateFunction;\n}\n\nexport type Func<T> = (...args: unknown[]) => T;\nexport type MongoInternalCommand = {\n    aggregate: string;\n    findAndModify: string;\n    createIndexes: string;\n    listIndexes: string;\n    count: boolean;\n    ismaster: boolean;\n    indexes?: unknown[];\n    query?: Record<string, unknown>;\n    limit?: number;\n    q?: Record<string, unknown>;\n    u?: Record<string, unknown>;\n};\n\nexport type MongoCommandOptions = {\n    session?: {\n        owner?: {\n            cursorState: CursorState;\n        };\n    };\n};\n\nexport type CursorState = { cmd: MongoInternalCommand; batchSize: number } & Record<string, unknown>;\n\n// https://github.com/mongodb/node-mongodb-native/blob/3.6/lib/core/wireprotocol/index.js\nexport type WireProtocolInternal = {\n    insert: (\n        server: MongoInternalTopology,\n        ns: string,\n        ops: unknown[],\n        options: unknown | Function,\n        callback?: Function\n    ) => unknown;\n    update: (\n        server: MongoInternalTopology,\n        ns: string,\n        ops: unknown[],\n        options: unknown | Function,\n        callback?: Function\n    ) => unknown;\n    remove: (\n        server: MongoInternalTopology,\n        ns: string,\n        ops: unknown[],\n        options: unknown | Function,\n        callback?: Function\n    ) => unknown;\n    killCursors: (server: MongoInternalTopology, ns: string, cursorState: CursorState, callback: Function) => unknown;\n    getMore: (\n        server: MongoInternalTopology,\n        ns: string,\n        cursorState: CursorState,\n        batchSize: number,\n        options: unknown | Function,\n        callback?: Function\n    ) => unknown;\n    query: (\n        server: MongoInternalTopology,\n        ns: string,\n        cmd: MongoInternalCommand,\n        cursorState: CursorState,\n        options: unknown | Function,\n        callback?: Function\n    ) => unknown;\n    command: (\n        server: MongoInternalTopology,\n        ns: string,\n        cmd: MongoInternalCommand,\n        options: unknown | Function,\n        callback?: Function\n    ) => unknown;\n};\n\n// https://github.com/mongodb/node-mongodb-native/blob/3.6/lib/topologies/server.js#L172\n// https://github.com/mongodb/node-mongodb-native/blob/2.2/lib/server.js#L174\nexport type MongoInternalTopology = {\n    s?: {\n        // those are for mongodb@3\n        options?: {\n            host?: string;\n            port?: number;\n            servername?: string;\n        };\n        // those are for mongodb@2\n        host?: string;\n        port?: number;\n    };\n    // those are for native topology\n    description?: {\n        address?: string;\n    };\n};\n\nexport enum MongodbCommandType {\n    CREATE_INDEXES = 'createIndexes',\n    FIND_AND_MODIFY = 'findAndModify',\n    LIST_INDEXES = 'listIndexes',\n    AGGREGATE = 'aggregate',\n    IS_MASTER = 'isMaster',\n    COUNT = 'count',\n    UNKNOWN = 'unknown',\n}\n"]}