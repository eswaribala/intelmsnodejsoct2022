{"version":3,"file":"MessageProcessSampler.js","sourceRoot":"","sources":["../../../src/sampling/MessageProcessSampler.ts"],"names":[],"mappings":";;;AAAA,4CAU4B;AAC5B,8EAAmG;AAEnG,4DAA2D;AAC3D,oEAAoE;AAEpE,MAAa,uBAAuB;IAChC,YAAoB,YAA0B,EAAU,cAAuB;QAA3D,iBAAY,GAAZ,YAAY,CAAc;QAAU,mBAAc,GAAd,cAAc,CAAS;IAAG,CAAC;IAEnF,YAAY,CACR,QAAiB,EACjB,QAAgB,EAChB,SAAiB,EACjB,SAAmB,EACnB,UAA0B,EAC1B,KAAa;QAEb,MAAM,kBAAkB,GAAG,UAAU,CAAC,yCAAkB,CAAC,mBAAmB,CAAC,CAAC;QAC9E,IAAI,kBAAkB,KAAK,+CAAwB,CAAC,OAAO,EAAE;YACzD,IAAI;gBACA,MAAM,YAAY,GAAG,IAAI,CAAC,sBAAsB,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;gBACpE,IAAI,YAAY;oBAAE,OAAO,YAAY,CAAC;aACzC;YAAC,OAAO,CAAM,EAAE;gBACb,UAAI,CAAC,IAAI,CACL,gGAAgG,EAChG,CAAC,CACJ,CAAC;aACL;SACJ;QACD,OAAO,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;IAClF,CAAC;IAEO,sBAAsB,CAAC,UAA0B,EAAE,KAAa;QACpE,2CAA2C;QAC3C,EAAE;QACF,6GAA6G;QAC7G,8DAA8D;QAC9D,gEAAgE;QAChE,oEAAoE;QACpE,EAAE;QACF,wGAAwG;QACxG,mDAAmD;QACnD,gGAAgG;QAChG,6EAA6E;;QAE7E,oFAAoF;QACpF,0EAA0E;QAC1E,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC;YAAE,OAAO;QAE/B,sEAAsE;QACtE,8EAA8E;QAC9E,4FAA4F;QAC5F,kEAAkE;QAClE,yDAAyD;QACzD,oHAAoH;QACpH,MAAM,oBAAoB,GAAG,UAAU,CAAC,yCAAkB,CAAC,qBAAqB,CAAC,CAAC;QAClF,MAAM,iBAAiB,GAAG;YACtB,CAAC,yCAAkB,CAAC,mBAAmB,CAAC,EAAE,+CAAwB,CAAC,OAAO;YAC1E,CAAC,yCAAkB,CAAC,qBAAqB,CAAC,EAAE,oBAAoB;SACnE,CAAC;QACF,MAAM,kBAAkB,GAAG,IAAI,CAAC,YAAY,CAAC,eAAe,CACxD,GAAG,oBAAoB,IAAI,+CAAwB,CAAC,OAAO,EAAE,EAC7D,iBAAiB,CACpB,CAAC;QAEF,MAAM,cAAc,SAChB,kBAAkB,aAAlB,kBAAkB,uBAAlB,kBAAkB,CAAE,OAAO,0CAAG,iCAAgB,CAAC,yCAAyC,CAAC,CAAC;QAC9F,IAAI,CAAC,cAAc;YAAE,OAAO;QAE5B,MAAM,gBAAgB,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;QAC1C,MAAM,OAAO,GAAG,gBAAgB,CAAC,UAAU,GAAG,gBAAU,CAAC,OAAO,CAAC;QACjE,OAAO;YACH,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC,sBAAgB,CAAC,kBAAkB,CAAC,CAAC,CAAC,sBAAgB,CAAC,UAAU;YACrF,UAAU,EAAE;gBACR,CAAC,0CAAqB,CAAC,yCAAyC,CAAC,EAAE,kBAAkB,CAAC,GAAG;aAC5F;SACJ,CAAC;IACN,CAAC;IAED,QAAQ;QACJ,OAAO,yBAAyB,CAAC;IACrC,CAAC;CACJ;AA5ED,0DA4EC","sourcesContent":["import {\n    Context,\n    diag,\n    Link,\n    Sampler,\n    SamplingDecision,\n    SamplingResult,\n    SpanAttributes,\n    SpanKind,\n    TraceFlags,\n} from '@opentelemetry/api';\nimport { MessagingOperationValues, SemanticAttributes } from '@opentelemetry/semantic-conventions';\nimport { RulesSampler } from './RulesSampler';\nimport { RulesContextKeys } from '@aspecto/sampling-rules';\nimport { AspectoAttributeNames } from '@aspecto/opentelemetry-base';\n\nexport class MessagingProcessSampler implements Sampler {\n    constructor(private rulesSampler: RulesSampler, private serviceSampler: Sampler) {}\n\n    shouldSample(\n        _context: Context,\n        _traceId: string,\n        _spanName: string,\n        _spanKind: SpanKind,\n        attributes: SpanAttributes,\n        links: Link[]\n    ): SamplingResult {\n        const messagingOperation = attributes[SemanticAttributes.MESSAGING_OPERATION];\n        if (messagingOperation === MessagingOperationValues.PROCESS) {\n            try {\n                const sampleResult = this.shouldSampleProcessing(attributes, links);\n                if (sampleResult) return sampleResult;\n            } catch (e: any) {\n                diag.warn(\n                    'got exception when applying sampling decision for process span. falling back to global sampler',\n                    e\n                );\n            }\n        }\n        return this.serviceSampler.shouldSample.apply(this.serviceSampler, arguments);\n    }\n\n    private shouldSampleProcessing(attributes: SpanAttributes, links: Link[]): SamplingResult | undefined {\n        // Here we differentiate between 2 options:\n        //\n        // 1. Sample process spans based on the *remote sampling decision* received from the publisher via otel link.\n        // This is the preferred option as it provides E2E visibility:\n        // if the sender is sampled, we have the trace that consumed it,\n        // and if we consumed a message we have the trace that published it.\n        //\n        // 2. Process spans apply the decision from the general sampling configuration of the otel installation.\n        // The downside is that we lose the E2E visibility.\n        // The benefit is that sampling is easier to understand and argue about, and it works regardless\n        // of the publisher being instrumented and context being properly propagated.\n\n        // If we don't have link, then even in option (1) we cannot implement sampling based\n        // on publisher decision, thus we fallback to general service decision (2)\n        if (links.length === 0) return;\n\n        // The following code should differentiate between option (1) and (2).\n        // The decision is taken on the rule that matched the entry span of the trace.\n        // Best way to propagate the decision is via the otel context, but due to technical problem:\n        // https://github.com/open-telemetry/opentelemetry-js-api/pull/123\n        // we currently apply a hack to re-evaluate the decision.\n        // in the future we should change to use context.attach and read the decision here from context.active.getValue(...)\n        const messagingDestination = attributes[SemanticAttributes.MESSAGING_DESTINATION];\n        const receiveAttributes = {\n            [SemanticAttributes.MESSAGING_OPERATION]: MessagingOperationValues.RECEIVE,\n            [SemanticAttributes.MESSAGING_DESTINATION]: messagingDestination,\n        };\n        const receiveMatchedRule = this.rulesSampler.getMatchingRule(\n            `${messagingDestination} ${MessagingOperationValues.RECEIVE}`,\n            receiveAttributes\n        );\n\n        const inheritContext =\n            receiveMatchedRule?.context?.[RulesContextKeys.MESSAGING_SAMPLING_INHERIT_FROM_PUBLISHER];\n        if (!inheritContext) return;\n\n        const publisherContext = links[0].context;\n        const sampled = publisherContext.traceFlags & TraceFlags.SAMPLED;\n        return {\n            decision: sampled ? SamplingDecision.RECORD_AND_SAMPLED : SamplingDecision.NOT_RECORD,\n            attributes: {\n                [AspectoAttributeNames.ASPECTO_SAMPLING_MESSAGING_REMOTE_RULE_ID]: receiveMatchedRule._id,\n            },\n        };\n    }\n\n    toString(): string {\n        return 'MessagingProcessSampler';\n    }\n}\n"]}