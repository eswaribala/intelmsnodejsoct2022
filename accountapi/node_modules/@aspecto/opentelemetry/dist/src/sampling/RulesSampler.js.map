{"version":3,"file":"RulesSampler.js","sourceRoot":"","sources":["../../../src/sampling/RulesSampler.ts"],"names":[],"mappings":"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","sourcesContent":["import { AspectoAttributeNames } from '@aspecto/opentelemetry-base';\nimport { LeanSamplingRule, filterRulesByPackageNameAndEnv, meetsOperator, Condition } from '@aspecto/sampling-rules';\nimport { Context, Sampler, SamplingResult, SpanKind, SpanAttributes, Link } from '@opentelemetry/api';\nimport { AlwaysOffSampler, TraceIdRatioBasedSampler } from '@opentelemetry/core';\n\nconst stringifyDefined = (val: any): string => {\n    if (val === null || val === undefined || typeof val === 'string') return val;\n    return String(val);\n};\n\nconst allConditionsSatisfied = (conditions: Condition[], spanName: string, attributes: SpanAttributes) =>\n    conditions.every((con) => {\n        switch (con.from) {\n            case 'attribute':\n                return meetsOperator(con.comparison, con.value, stringifyDefined(attributes[con.key]));\n            case 'operation':\n                return meetsOperator(con.comparison, con.value, spanName);\n            // Other \"from\" are not implemented for now.\n            default:\n                return false;\n        }\n    });\n\nexport interface SamplingRuleWithSampler extends LeanSamplingRule {\n    sampler: TraceIdRatioBasedSampler;\n}\n\nexport class RulesSampler implements Sampler {\n    private localSampler: Sampler;\n    private rules: SamplingRuleWithSampler[];\n\n    constructor(\n        private ratio: number,\n        private packageName: string,\n        private env: string,\n        requireConfigForTraces: boolean\n    ) {\n        this.localSampler = requireConfigForTraces ? new AlwaysOffSampler() : new TraceIdRatioBasedSampler(this.ratio);\n    }\n\n    public setRules(rules: LeanSamplingRule[]) {\n        if (!this.gotRules()) {\n            this.onFirstRulesConfig();\n        }\n\n        this.rules = filterRulesByPackageNameAndEnv(rules, this.packageName, this.env).map((rule) => ({\n            ...rule,\n            sampler: new TraceIdRatioBasedSampler(rule.samplingRate),\n        }));\n    }\n\n    public getMatchingRule(spanName: string, attributes: SpanAttributes): SamplingRuleWithSampler | undefined {\n        return this.rules?.find((rule) => allConditionsSatisfied(rule.conditions, spanName, attributes));\n    }\n\n    private onFirstRulesConfig() {\n        this.localSampler = new TraceIdRatioBasedSampler(this.ratio);\n    }\n\n    private gotRules() {\n        return this.rules !== undefined;\n    }\n\n    shouldSample(\n        context: Context,\n        traceId: string,\n        spanName: string,\n        spanKind: SpanKind,\n        attributes: SpanAttributes,\n        links?: Link[]\n    ): SamplingResult {\n        const rule = this.getMatchingRule(spanName, attributes);\n        if (rule) {\n            const decision = rule.sampler.shouldSample(context, traceId).decision;\n            const attributes = {\n                [AspectoAttributeNames.ASPECTO_SAMPLING_RULE_ID]: rule._id,\n            };\n            return { decision, attributes };\n        } else {\n            const { decision } = this.localSampler.shouldSample(\n                context,\n                traceId,\n                spanName,\n                spanKind,\n                attributes,\n                links\n            );\n            const samplingAttributes = {\n                [AspectoAttributeNames.ASPECTO_SAMPLING_LOCAL_SAMPLER_NAME]: this.localSampler.toString(),\n            };\n            if (!this.gotRules()) {\n                samplingAttributes[AspectoAttributeNames.ASPECTO_SAMPLING_UNINITIALIZED] = true;\n            }\n            return { decision, attributes: samplingAttributes };\n        }\n    }\n\n    toString(): string {\n        return `RulesSampler{${this.rules?.length ?? 'uninitialized'} rules}`;\n    }\n}\n"]}