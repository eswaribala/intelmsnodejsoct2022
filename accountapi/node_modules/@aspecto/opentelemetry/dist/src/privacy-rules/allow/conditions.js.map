{"version":3,"file":"conditions.js","sourceRoot":"","sources":["../../../../src/privacy-rules/allow/conditions.ts"],"names":[],"mappings":";;;AACA,oCAAsC;AAEtC,8EAAiF;AAEpE,QAAA,cAAc,GAAG,CAAC,SAAiC,EAAE,GAAiB,EAAE,EAAE;;IACnF,QAAQ,SAAS,CAAC,aAAa,EAAE;QAC7B,KAAK,QAAQ;YACT,OAAO,IAAI,CAAC;QAChB,KAAK,SAAS,CAAC,CAAC;YACZ,MAAM,kBAAkB,SAAQ,GAAG,CAAC,QAAQ,0CAAE,UAAU,CAAC;YACzD,IAAI,CAAC,kBAAkB;gBAAE,OAAO,KAAK,CAAC;YACtC,MAAM,WAAW,GAAG,kBAAkB,CAAC,iDAA0B,CAAC,YAAY,CAAW,CAAC;YAC1F,OAAO,kBAAU,CAAC,SAAS,CAAC,aAAa,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;SACvE;QACD;YACI,MAAM,IAAI,KAAK,CAAC,sBAAsB,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;KAC1E;AACL,CAAC,CAAC","sourcesContent":["import { BasicFilteredCondition } from '../types/PrivacyRule';\nimport { compareStr } from '../utils';\nimport { ReadableSpan } from '@opentelemetry/sdk-trace-base';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\n\nexport const checkCondition = (condition: BasicFilteredCondition, msg: ReadableSpan) => {\n    switch (condition.conditionType) {\n        case 'always':\n            return true;\n        case 'service': {\n            const resourceAttributes: any = msg.resource?.attributes;\n            if (!resourceAttributes) return false;\n            const serviceName = resourceAttributes[SemanticResourceAttributes.SERVICE_NAME] as string;\n            return compareStr(condition.conditionData.filterValue, serviceName);\n        }\n        default:\n            throw new Error(`Unknown condition: ${JSON.stringify(condition)}`);\n    }\n};\n"]}