{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/privacy-rules/allow/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { checkCondition } from './conditions';\nimport { DataCollectionAction } from '../types/DataCollection';\nimport { ReadableSpan } from '@opentelemetry/sdk-trace-base';\nimport { BasicFilteredCondition, CollectFieldAction } from '../types/PrivacyRule';\nimport { ActionResult } from '../ActionResult';\nimport { payloadAttributeName } from '../types/DataCollection';\nimport { has, get, set } from 'lodash';\nimport { normalizeHeader } from '../../plugins-customizations/http-headers';\n\nconst pick = (obj: any, props: string[]): any => {\n    return props.reduce((result, key) => {\n        if (has(obj, key)) {\n            set(result, key, get(obj, key));\n        }\n        return result;\n    }, {});\n};\n\nconst isAttributeHttpHeader = (attrName: string): boolean => {\n    return attrName.startsWith('http.request.header.') || attrName.startsWith('http.response.header.');\n};\n\nconst deleteHttpHeaderAttributes = (span: ReadableSpan, fieldsToCollect: Record<string, any>) => {\n    const normalizedToHeaderNames = Object.keys(fieldsToCollect).map(normalizeHeader);\n    Object.keys(span.attributes).forEach((attrName) => {\n        if (\n            isAttributeHttpHeader(attrName) &&\n            normalizedToHeaderNames.find((f) => attrName.endsWith(f)) === undefined\n        ) {\n            delete span.attributes[attrName];\n        }\n    });\n};\n\nexport class AllowList implements DataCollectionAction {\n    removeAttributes(obj: any, fieldsToCollect: Record<string, any>): any {\n        if (obj instanceof Array) {\n            return obj.map((e) => this.removeAttributes(e, fieldsToCollect));\n        }\n        return pick(obj, Object.keys(fieldsToCollect));\n    }\n\n    updateSpan(span: ReadableSpan, fieldsToCollect?: Record<string, any>): void {\n        const payloadKeys = Object.values(payloadAttributeName);\n        for (const payloadKey of payloadKeys) {\n            if (span.attributes[payloadKey] === undefined) {\n                continue;\n            }\n            try {\n                const originalPayload = JSON.parse(span.attributes[payloadKey].toString());\n                const payload = this.removeAttributes(originalPayload, fieldsToCollect);\n                span.attributes[payloadKey] = JSON.stringify(payload);\n            } catch {}\n        }\n        deleteHttpHeaderAttributes(span, fieldsToCollect);\n    }\n\n    executeAction(actions: CollectFieldAction[], _span: ReadableSpan, properties?: Record<string, any>): ActionResult {\n        for (const action of actions) {\n            properties[action.actionData.filter.filterValue] = true;\n        }\n        return ActionResult.None;\n    }\n\n    checkCondition(condition: BasicFilteredCondition, span: ReadableSpan): boolean {\n        return checkCondition(condition, span);\n    }\n}\n"]}