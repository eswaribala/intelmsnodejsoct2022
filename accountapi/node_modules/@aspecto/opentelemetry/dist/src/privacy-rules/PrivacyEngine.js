"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrivacyEngine = void 0;
const ActionResult_1 = require("./ActionResult");
const DataCollection_1 = require("./types/DataCollection");
const allow_1 = require("./allow");
const block_1 = require("./block");
const dataCollectionFactory = (mode) => {
    switch (mode) {
        case DataCollection_1.DataCollectionMode.ALLOW_LIST:
            return new allow_1.AllowList();
        case DataCollection_1.DataCollectionMode.BLOCK_LIST:
            return new block_1.BlockList();
        default:
            return new block_1.BlockList();
    }
};
class PrivacyEngine {
    setRules(rules, mode) {
        this.rules = rules;
        this.action = dataCollectionFactory(mode);
    }
    executeRules(span) {
        if (span) {
            const properties = {};
            for (let rule of this.rules) {
                const result = this.executeRule(rule, span, properties);
                if (result === ActionResult_1.ActionResult.BlockRequest) {
                    // one blocking rule is enough, no need to execute other rules
                    return result;
                }
            }
            this.action.updateSpan(span, properties);
        }
        return ActionResult_1.ActionResult.None;
    }
    executeRule(rule, span, parsedAttributesCache) {
        if (this.conditionsMet(rule.conditions, span)) {
            return this.action.executeAction(rule.actions, span, parsedAttributesCache);
        }
    }
    conditionsMet(conditions, span) {
        if (!conditions || conditions.length === 0) {
            return true;
        }
        return conditions.every((condition) => this.action.checkCondition(condition, span));
    }
}
exports.PrivacyEngine = PrivacyEngine;
//# sourceMappingURL=PrivacyEngine.js.map