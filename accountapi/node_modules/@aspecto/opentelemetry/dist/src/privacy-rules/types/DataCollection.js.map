{"version":3,"file":"DataCollection.js","sourceRoot":"","sources":["../../../../src/privacy-rules/types/DataCollection.ts"],"names":[],"mappings":";;;AAcA,IAAY,kBAGX;AAHD,WAAY,kBAAkB;IAC1B,+CAAyB,CAAA;IACzB,+CAAyB,CAAA;AAC7B,CAAC,EAHW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAG7B;AAEY,QAAA,oBAAoB,GAAG;IAChC,iBAAiB,EAAE,mBAAmB;IACtC,eAAe,EAAE,iBAAiB;IAClC,iBAAiB,EAAE,mBAAmB;IACtC,kBAAkB,EAAE,oBAAoB;IACxC,WAAW,EAAE,aAAa;CAC7B,CAAC","sourcesContent":["import { ReadableSpan } from '@opentelemetry/sdk-trace-base';\nimport { ActionResult } from '../ActionResult';\nimport { CollectFieldAction, RuleAction, RuleCondition } from './PrivacyRule';\n\nexport interface DataCollectionAction {\n    checkCondition(condition: RuleCondition, span: ReadableSpan): boolean;\n    executeAction(\n        actions: RuleAction[] | CollectFieldAction[],\n        span: ReadableSpan,\n        properties?: Record<string, any>\n    ): ActionResult;\n    updateSpan(span: ReadableSpan, properties?: Record<string, any>): void;\n}\n\nexport enum DataCollectionMode {\n    BLOCK_LIST = 'BLOCK_LIST',\n    ALLOW_LIST = 'ALLOW_LIST',\n}\n\nexport const payloadAttributeName = {\n    MESSAGING_PAYLOAD: 'messaging.payload',\n    LAMBDA_RESPONSE: 'lambda.response',\n    HTTP_REQUEST_BODY: 'http.request.body',\n    HTTP_RESPONSE_BODY: 'http.response.body',\n    DB_RESPONSE: 'db.response',\n};\n"]}