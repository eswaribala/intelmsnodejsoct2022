{"version":3,"file":"conditions.js","sourceRoot":"","sources":["../../../../src/privacy-rules/block/conditions.ts"],"names":[],"mappings":";;;AACA,oCAAsC;AAEtC,8DAA6E;AAC7E,8EAAiF;AAEjF,MAAM,oBAAoB,GAAG,CAAC,MAAuB,EAAE,YAAiB,EAAE,EAAE;IACxE,QAAQ,MAAM,CAAC,UAAU,EAAE;QACvB,KAAK,UAAU;YACX,OAAO,kBAAU,CAAC,YAAY,EAAE,MAAM,CAAC,WAAW,CAAC,CAAC;QACxD;YACI,MAAM,IAAI,KAAK,CAAC,6BAA6B,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;KAC9E;AACL,CAAC,CAAC;AAEW,QAAA,cAAc,GAAG,CAAC,SAAwB,EAAE,GAAiB,EAAE,EAAE;;IAC1E,QAAQ,SAAS,CAAC,aAAa,EAAE;QAC7B,KAAK,QAAQ;YACT,OAAO,IAAI,CAAC;QAChB,KAAK,SAAS,CAAC,CAAC;YACZ,MAAM,kBAAkB,SAAQ,GAAG,CAAC,QAAQ,0CAAE,UAAU,CAAC;YACzD,IAAI,CAAC,kBAAkB;gBAAE,OAAO,KAAK,CAAC;YACtC,MAAM,WAAW,GAAG,kBAAkB,CAAC,iDAA0B,CAAC,YAAY,CAAW,CAAC;YAC1F,OAAO,oBAAoB,CAAC,SAAS,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;SACrE;QACD,KAAK,OAAO,CAAC,CAAC;YACV,MAAM,QAAQ,GAAG,GAAG,CAAC,UAAU,CAAC,2BAAqB,CAAC,SAAS,CAAW,CAAC;YAC3E,IAAI,CAAC,QAAQ,IAAI,OAAO,QAAQ,KAAK,QAAQ;gBAAE,OAAO,KAAK,CAAC;YAC5D,OAAO,oBAAoB,CAAC,SAAS,CAAC,aAAa,EAAE,QAAkB,CAAC,CAAC;SAC5E;QAED;YACI,MAAM,IAAI,KAAK,CAAC,sBAAsB,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;KAC1E;AACL,CAAC,CAAC","sourcesContent":["import { RuleCondition, ConditionFilter } from '../types/PrivacyRule';\nimport { compareStr } from '../utils';\nimport { ReadableSpan } from '@opentelemetry/sdk-trace-base';\nimport { AspectoAttributeNames } from '@aspecto/opentelemetry-base/dist/src';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\n\nconst checkConditionFilter = (filter: ConditionFilter, valueToCheck: any) => {\n    switch (filter.filterType) {\n        case 'by-value':\n            return compareStr(valueToCheck, filter.filterValue);\n        default:\n            throw new Error(`Unknown condition filter: ${JSON.stringify(filter)}`);\n    }\n};\n\nexport const checkCondition = (condition: RuleCondition, msg: ReadableSpan) => {\n    switch (condition.conditionType) {\n        case 'always':\n            return true;\n        case 'service': {\n            const resourceAttributes: any = msg.resource?.attributes;\n            if (!resourceAttributes) return false;\n            const serviceName = resourceAttributes[SemanticResourceAttributes.SERVICE_NAME] as string;\n            return checkConditionFilter(condition.conditionData, serviceName);\n        }\n        case 'route': {\n            const httpPath = msg.attributes[AspectoAttributeNames.HTTP_PATH] as string;\n            if (!httpPath || typeof httpPath !== 'string') return false;\n            return checkConditionFilter(condition.conditionData, httpPath as string);\n        }\n\n        default:\n            throw new Error(`Unknown condition: ${JSON.stringify(condition)}`);\n    }\n};\n"]}