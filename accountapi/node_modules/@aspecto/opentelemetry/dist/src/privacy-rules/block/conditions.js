"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkCondition = void 0;
const utils_1 = require("../utils");
const src_1 = require("@aspecto/opentelemetry-base/dist/src");
const semantic_conventions_1 = require("@opentelemetry/semantic-conventions");
const checkConditionFilter = (filter, valueToCheck) => {
    switch (filter.filterType) {
        case 'by-value':
            return utils_1.compareStr(valueToCheck, filter.filterValue);
        default:
            throw new Error(`Unknown condition filter: ${JSON.stringify(filter)}`);
    }
};
exports.checkCondition = (condition, msg) => {
    var _a;
    switch (condition.conditionType) {
        case 'always':
            return true;
        case 'service': {
            const resourceAttributes = (_a = msg.resource) === null || _a === void 0 ? void 0 : _a.attributes;
            if (!resourceAttributes)
                return false;
            const serviceName = resourceAttributes[semantic_conventions_1.SemanticResourceAttributes.SERVICE_NAME];
            return checkConditionFilter(condition.conditionData, serviceName);
        }
        case 'route': {
            const httpPath = msg.attributes[src_1.AspectoAttributeNames.HTTP_PATH];
            if (!httpPath || typeof httpPath !== 'string')
                return false;
            return checkConditionFilter(condition.conditionData, httpPath);
        }
        default:
            throw new Error(`Unknown condition: ${JSON.stringify(condition)}`);
    }
};
//# sourceMappingURL=conditions.js.map