{"version":3,"file":"PrivacyEngine.js","sourceRoot":"","sources":["../../../src/privacy-rules/PrivacyEngine.ts"],"names":[],"mappings":";;;AACA,iDAA8C;AAE9C,2DAAkF;AAClF,mCAAoC;AACpC,mCAAoC;AAEpC,MAAM,qBAAqB,GAAG,CAAC,IAAwB,EAAwB,EAAE;IAC7E,QAAQ,IAAI,EAAE;QACV,KAAK,mCAAkB,CAAC,UAAU;YAC9B,OAAO,IAAI,iBAAS,EAAE,CAAC;QAC3B,KAAK,mCAAkB,CAAC,UAAU;YAC9B,OAAO,IAAI,iBAAS,EAAE,CAAC;QAC3B;YACI,OAAO,IAAI,iBAAS,EAAE,CAAC;KAC9B;AACL,CAAC,CAAC;AAEF,MAAa,aAAa;IAItB,QAAQ,CAAC,KAAoB,EAAE,IAAyB;QACpD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,qBAAqB,CAAC,IAAI,CAAC,CAAC;IAC9C,CAAC;IAED,YAAY,CAAC,IAAkB;QAC3B,IAAI,IAAI,EAAE;YACN,MAAM,UAAU,GAAwB,EAAE,CAAC;YAC3C,KAAK,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,EAAE;gBACzB,MAAM,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC;gBACxD,IAAI,MAAM,KAAK,2BAAY,CAAC,YAAY,EAAE;oBACtC,8DAA8D;oBAC9D,OAAO,MAAM,CAAC;iBACjB;aACJ;YACD,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;SAC5C;QACD,OAAO,2BAAY,CAAC,IAAI,CAAC;IAC7B,CAAC;IACO,WAAW,CACf,IAAiB,EACjB,IAAkB,EAClB,qBAA0C;QAE1C,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,EAAE;YAC3C,OAAO,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,EAAE,qBAAqB,CAAC,CAAC;SAC/E;IACL,CAAC;IAEO,aAAa,CAAC,UAA2B,EAAE,IAAkB;QACjE,IAAI,CAAC,UAAU,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;YACxC,OAAO,IAAI,CAAC;SACf;QACD,OAAO,UAAU,CAAC,KAAK,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC;IACxF,CAAC;CACJ;AAvCD,sCAuCC","sourcesContent":["import { PrivacyRule, RuleCondition } from './types/PrivacyRule';\nimport { ActionResult } from './ActionResult';\nimport { ReadableSpan } from '@opentelemetry/sdk-trace-base';\nimport { DataCollectionAction, DataCollectionMode } from './types/DataCollection';\nimport { AllowList } from './allow';\nimport { BlockList } from './block';\n\nconst dataCollectionFactory = (mode: DataCollectionMode): DataCollectionAction => {\n    switch (mode) {\n        case DataCollectionMode.ALLOW_LIST:\n            return new AllowList();\n        case DataCollectionMode.BLOCK_LIST:\n            return new BlockList();\n        default:\n            return new BlockList();\n    }\n};\n\nexport class PrivacyEngine {\n    rules: PrivacyRule[];\n    action: DataCollectionAction;\n\n    setRules(rules: PrivacyRule[], mode?: DataCollectionMode) {\n        this.rules = rules;\n        this.action = dataCollectionFactory(mode);\n    }\n\n    executeRules(span: ReadableSpan): ActionResult {\n        if (span) {\n            const properties: Record<string, any> = {};\n            for (let rule of this.rules) {\n                const result = this.executeRule(rule, span, properties);\n                if (result === ActionResult.BlockRequest) {\n                    // one blocking rule is enough, no need to execute other rules\n                    return result;\n                }\n            }\n            this.action.updateSpan(span, properties);\n        }\n        return ActionResult.None;\n    }\n    private executeRule(\n        rule: PrivacyRule,\n        span: ReadableSpan,\n        parsedAttributesCache: Record<string, any>\n    ): ActionResult {\n        if (this.conditionsMet(rule.conditions, span)) {\n            return this.action.executeAction(rule.actions, span, parsedAttributesCache);\n        }\n    }\n\n    private conditionsMet(conditions: RuleCondition[], span: ReadableSpan) {\n        if (!conditions || conditions.length === 0) {\n            return true;\n        }\n        return conditions.every((condition) => this.action.checkCondition(condition, span));\n    }\n}\n"]}