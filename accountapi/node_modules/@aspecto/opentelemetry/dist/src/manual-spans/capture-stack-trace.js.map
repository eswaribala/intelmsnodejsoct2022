{"version":3,"file":"capture-stack-trace.js","sourceRoot":"","sources":["../../../src/manual-spans/capture-stack-trace.ts"],"names":[],"mappings":";;;AACA,oEAAoE;AASpE,MAAM,6BAA6B,GAAG,CAAC,YAA+B,EAAE,EAAE,CACtE,YAAY,CAAC,MAAM,CAAC,CAAC,QAAyB,EAAE,EAAE;IAC9C,MAAM,QAAQ,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC;IACxC,IAAI,CAAC,QAAQ;QAAE,OAAO,IAAI,CAAC;IAE3B,OAAO;QACH,8BAA8B;QAC9B,6CAA6C;QAC7C,qCAAqC;KACxC,CAAC,KAAK,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;AAChD,CAAC,CAAC,CAAC;AAEM,QAAA,qBAAqB,GAAG,CAAC,IAAU,EAAE,EAAE;IAChD,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE;QACrB,OAAO,IAAI,CAAC;KACf;IAED,MAAM,mBAAmB,GAAG,KAAK,CAAC,eAAe,CAAC;IAClD,KAAK,CAAC,eAAe,GAAG,QAAQ,CAAC;IAEjC,MAAM,qBAAqB,GAAG,KAAK,CAAC,iBAAiB,CAAC;IACtD,KAAK,CAAC,iBAAiB,GAAG,CAAC,CAAC,EAAE,YAA+B,EAAE,EAAE,CAAC,6BAA6B,CAAC,YAAY,CAAC,CAAC;IAE9G,MAAM,kBAAkB,GAAiC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;IACvE,KAAK,CAAC,iBAAiB,CAAC,kBAAkB,EAAE,6BAAqB,CAAC,CAAC;IACnE,MAAM,EAAE,KAAK,EAAE,GAAG,kBAAkB,CAAC;IAErC,KAAK,CAAC,iBAAiB,GAAG,qBAAqB,CAAC;IAChD,KAAK,CAAC,eAAe,GAAG,mBAAmB,CAAC;IAE5C,MAAM,SAAS,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,QAAyB,EAAE,EAAE;QACtD,MAAM,SAAS,GAAmB,EAAE,CAAC;QACrC,IAAI,QAAQ,CAAC,WAAW,EAAE,KAAK,IAAI;YAAE,SAAS,CAAC,QAAQ,GAAG,QAAQ,CAAC,WAAW,EAAE,CAAC;QACjF,IAAI,QAAQ,CAAC,aAAa,EAAE,KAAK,IAAI;YAAE,SAAS,CAAC,UAAU,GAAG,QAAQ,CAAC,aAAa,EAAE,CAAC;QACvF,IAAI,QAAQ,CAAC,eAAe,EAAE,KAAK,IAAI;YAAE,SAAS,CAAC,YAAY,GAAG,QAAQ,CAAC,eAAe,EAAE,CAAC;QAC7F,IAAI,QAAQ,CAAC,eAAe,EAAE,KAAK,IAAI;YAAE,SAAS,CAAC,YAAY,GAAG,QAAQ,CAAC,eAAe,EAAE,CAAC;QAC7F,OAAO,SAAS,CAAC;IACrB,CAAC,CAAC,CAAC;IACH,IAAI,CAAC,YAAY,CAAC,0CAAqB,CAAC,iBAAiB,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC;IAC1F,OAAO,IAAI,CAAC;AAChB,CAAC,CAAC","sourcesContent":["import { Span } from '@opentelemetry/api';\nimport { AspectoAttributeNames } from '@aspecto/opentelemetry-base';\n\ninterface callStackFrame {\n    fileName?: string;\n    lineNumber?: number;\n    columnNumber?: number;\n    functionName?: string;\n}\n\nconst filterInstrumentationPackages = (v8StackTrace: NodeJS.CallSite[]) =>\n    v8StackTrace.filter((callSite: NodeJS.CallSite) => {\n        const fileName = callSite.getFileName();\n        if (!fileName) return true;\n\n        return [\n            'node_modules/@opentelemetry/',\n            'node_modules/opentelemetry-instrumentation-',\n            'node_modules/@aspecto/opentelemetry',\n        ].every((path) => !fileName.includes(path));\n    });\n\nexport const captureCallStackTrace = (span: Span) => {\n    if (!span.isRecording()) {\n        return span;\n    }\n\n    const origStackTraceLimit = Error.stackTraceLimit;\n    Error.stackTraceLimit = Infinity;\n\n    const origPrepareStackTrace = Error.prepareStackTrace;\n    Error.prepareStackTrace = (_, v8StackTrace: NodeJS.CallSite[]) => filterInstrumentationPackages(v8StackTrace);\n\n    const objectToStoreStack: { stack: NodeJS.CallSite[] } = { stack: [] };\n    Error.captureStackTrace(objectToStoreStack, captureCallStackTrace);\n    const { stack } = objectToStoreStack;\n\n    Error.prepareStackTrace = origPrepareStackTrace;\n    Error.stackTraceLimit = origStackTraceLimit;\n\n    const callStack = stack.map((callSite: NodeJS.CallSite) => {\n        const frameData: callStackFrame = {};\n        if (callSite.getFileName() !== null) frameData.fileName = callSite.getFileName();\n        if (callSite.getLineNumber() !== null) frameData.lineNumber = callSite.getLineNumber();\n        if (callSite.getColumnNumber() !== null) frameData.columnNumber = callSite.getColumnNumber();\n        if (callSite.getFunctionName() !== null) frameData.functionName = callSite.getFunctionName();\n        return frameData;\n    });\n    span.setAttribute(AspectoAttributeNames.ASPECTO_CALLSTACK, JSON.stringify({ callStack }));\n    return span;\n};\n"]}