{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/manual-spans/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as opentelemetry from '@opentelemetry/api';\nimport { SpanAttributes, SpanAttributeValue, SpanStatusCode } from '@opentelemetry/api';\nimport { AspectoAttributeNames, ManualSpansAttributePrefix } from '@aspecto/opentelemetry-base';\nimport { VERSION } from '../version';\nimport { ManualSpan, TracedFunction, TRACER_NAME } from './types';\nimport isPromise from 'is-promise';\nimport { captureCallStackTrace } from './capture-stack-trace';\n\nexport * from './types';\n\nconst metadataNameToAttributeName = (metadataName: string): string => {\n    const normalizedMetadataName = metadataName.trim().replace(/\\s+/g, '.');\n    return `${ManualSpansAttributePrefix}.${normalizedMetadataName}`;\n};\n\nconst metadataToAttributes = (metadata: SpanAttributes): SpanAttributes => {\n    return Object.fromEntries(Object.entries(metadata).map(([k, v]) => [metadataNameToAttributeName(k), v]));\n};\n\nconst spanToManualSpan = (span: opentelemetry.Span): ManualSpan => {\n    return {\n        addMetadata: (metadataName: string, metadataValue: any) => addMetadata(span, metadataName, metadataValue),\n    };\n};\n\nconst endSpanCallback = (fn: TracedFunction, span: opentelemetry.Span, manualSpan: ManualSpan): any => {\n    const doneCallback = (err?: Error | string) => {\n        if (err) {\n            if (typeof err === 'string') {\n                span.setStatus({ code: SpanStatusCode.ERROR, message: err });\n            } else {\n                span.recordException(err);\n                span.setStatus({ code: SpanStatusCode.ERROR, message: err?.message });\n            }\n        }\n        span.end();\n    };\n    try {\n        return fn(manualSpan, doneCallback);\n    } catch (err) {\n        span.recordException(err);\n        span.setStatus({ code: SpanStatusCode.ERROR, message: err?.message });\n        span.end();\n        throw err;\n    }\n};\n\nconst endSpanOnSyncOrPromise = (fn: TracedFunction, span: opentelemetry.Span, manualSpan: ManualSpan): any => {\n    try {\n        const fnResult = fn(manualSpan);\n        if (isPromise(fnResult)) {\n            return Promise.resolve(fnResult)\n                .catch((err) => {\n                    if (err) {\n                        if (typeof err === 'string') {\n                            span.setStatus({ code: SpanStatusCode.ERROR, message: err });\n                        } else {\n                            span.recordException(err);\n                            span.setStatus({ code: SpanStatusCode.ERROR, message: err?.message });\n                        }\n                    }\n                    throw err;\n                })\n                .finally(() => {\n                    span.end();\n                });\n        } else {\n            span.end();\n            return fnResult;\n        }\n    } catch (err) {\n        span.recordException(err);\n        span.setStatus({ code: SpanStatusCode.ERROR, message: err?.message });\n        span.end();\n        throw err;\n    }\n};\n\nexport interface TraceOptions {\n    name?: string;\n    type?: string;\n    metadata?: SpanAttributes;\n}\n\nexport type OptionsOrTracedFunction = TraceOptions | TracedFunction;\n\n// export function trace(fn: TracedFunction);\nexport const trace = (optionsOrTracedFunction: OptionsOrTracedFunction, fn?: TracedFunction) => {\n    let options: TraceOptions;\n    if (typeof optionsOrTracedFunction === 'function') {\n        fn = optionsOrTracedFunction;\n        options = {};\n    } else {\n        options = optionsOrTracedFunction;\n    }\n\n    const tracer = opentelemetry.trace.getTracer(TRACER_NAME, VERSION);\n    const attributes = metadataToAttributes(options.metadata ?? {});\n    if (options.type) {\n        attributes[AspectoAttributeNames.ASPECTO_MANUAL_TYPE] = options.type;\n    }\n\n    const span = tracer.startSpan(options.name ?? '', { attributes });\n    captureCallStackTrace(span);\n    const manualSpan = spanToManualSpan(span);\n    return opentelemetry.context.with(opentelemetry.trace.setSpan(opentelemetry.context.active(), span), () => {\n        // first parameter is always the span\n        if (fn.length > 1) {\n            return endSpanCallback(fn, span, manualSpan);\n        } else {\n            return endSpanOnSyncOrPromise(fn, span, manualSpan);\n        }\n    });\n};\n\nconst addMetadata = (span: opentelemetry.Span, metadataName: string, metadataValue: any) => {\n    let attributeValue: SpanAttributeValue;\n    if (typeof metadataValue === 'object') {\n        try {\n            attributeValue = JSON.stringify(attributeValue);\n        } catch {\n            opentelemetry.diag.warn('aspecto manual instrumentation: could not JSON.stringify object metadata');\n            return;\n        }\n    }\n    span.setAttribute(metadataNameToAttributeName(metadataName), metadataValue);\n};\n"]}