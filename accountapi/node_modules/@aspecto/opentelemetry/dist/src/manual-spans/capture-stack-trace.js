"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.captureCallStackTrace = void 0;
const opentelemetry_base_1 = require("@aspecto/opentelemetry-base");
const filterInstrumentationPackages = (v8StackTrace) => v8StackTrace.filter((callSite) => {
    const fileName = callSite.getFileName();
    if (!fileName)
        return true;
    return [
        'node_modules/@opentelemetry/',
        'node_modules/opentelemetry-instrumentation-',
        'node_modules/@aspecto/opentelemetry',
    ].every((path) => !fileName.includes(path));
});
exports.captureCallStackTrace = (span) => {
    if (!span.isRecording()) {
        return span;
    }
    const origStackTraceLimit = Error.stackTraceLimit;
    Error.stackTraceLimit = Infinity;
    const origPrepareStackTrace = Error.prepareStackTrace;
    Error.prepareStackTrace = (_, v8StackTrace) => filterInstrumentationPackages(v8StackTrace);
    const objectToStoreStack = { stack: [] };
    Error.captureStackTrace(objectToStoreStack, exports.captureCallStackTrace);
    const { stack } = objectToStoreStack;
    Error.prepareStackTrace = origPrepareStackTrace;
    Error.stackTraceLimit = origStackTraceLimit;
    const callStack = stack.map((callSite) => {
        const frameData = {};
        if (callSite.getFileName() !== null)
            frameData.fileName = callSite.getFileName();
        if (callSite.getLineNumber() !== null)
            frameData.lineNumber = callSite.getLineNumber();
        if (callSite.getColumnNumber() !== null)
            frameData.columnNumber = callSite.getColumnNumber();
        if (callSite.getFunctionName() !== null)
            frameData.functionName = callSite.getFunctionName();
        return frameData;
    });
    span.setAttribute(opentelemetry_base_1.AspectoAttributeNames.ASPECTO_CALLSTACK, JSON.stringify({ callStack }));
    return span;
};
//# sourceMappingURL=capture-stack-trace.js.map