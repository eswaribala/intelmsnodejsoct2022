{"version":3,"file":"http-trigger.js","sourceRoot":"","sources":["../../../../src/faas/gcf/http-trigger.ts"],"names":[],"mappings":";;;AACA,4CAAyG;AACzG,oEAAoE;AACpE,8EAAqG;AACrG,4DAAuD;AACvD,2CAAwC;AACxC,4EAAwF;AAExF,MAAM,SAAS,GAAG,CAAC,IAAS,EAAE,EAAE;IAC5B,IAAI,OAAO,IAAI,KAAK,QAAQ;QAAE,OAAO,IAAI,CAAC;IAC1C,IAAI;QACA,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;KAC/B;IAAC,WAAM;QACJ,OAAO,SAAS,CAAC;KACpB;AACL,CAAC,CAAC;AAEW,QAAA,qBAAqB,GAAG,CAAC,OAAiB,EAAE,kBAAuC,EAAE,EAAE,CAAC,KAAK,EACtG,GAAY,EACZ,GAAa,EACf,EAAE;;IACA,MAAM,WAAW,GAAG,iBAAW,CAAC,OAAO,CAAC,kBAAY,QAAE,GAAG,CAAC,OAAO,mCAAI,EAAE,CAAC,CAAC;IACzE,MAAM,MAAM,GAAG,WAAK,CAAC,SAAS,CAAC,KAAK,EAAE,iBAAO,CAAC,CAAC;IAC/C,MAAM,QAAQ,SAAG,OAAO,CAAC,GAAG,CAAC,SAAS,mCAAI,cAAc,CAAC;IACzD,MAAM,IAAI,eAAG,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,mCAAI,GAAG,CAAC,QAAQ,mCAAI,WAAW,CAAC;IAE5D,MAAM,OAAO,GAAG,MAAM,CAAC,SAAS,CAC5B,OAAO,QAAQ,MAAM,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,EAClD;QACI,UAAU,kBACN,CAAC,iDAA0B,CAAC,cAAc,CAAC,EAAE,KAAK,EAClD,CAAC,iDAA0B,CAAC,SAAS,CAAC,EAAE,QAAQ,EAChD,CAAC,iDAA0B,CAAC,OAAO,CAAC,EAAE,GAAG,IAAI,IAAI,QAAQ,EAAE,EAC3D,CAAC,yCAAkB,CAAC,YAAY,CAAC,EAAE,MAAM,EACzC,CAAC,yCAAkB,CAAC,cAAc,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,uBAAuB,CAAC,EACrE,CAAC,iDAA0B,CAAC,YAAY,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU,EAEjE,CAAC,yCAAkB,CAAC,UAAU,CAAC,EAAE,GAAG,CAAC,KAAK,EAC1C,CAAC,yCAAkB,CAAC,WAAW,CAAC,EAAE,OAAO,EACzC,CAAC,yCAAkB,CAAC,WAAW,CAAC,EAAE,GAAG,CAAC,WAAW,EACjD,CAAC,yCAAkB,CAAC,eAAe,CAAC,EAAE,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,EAC3D,CAAC,yCAAkB,CAAC,WAAW,CAAC,QAAE,GAAG,CAAC,MAAM,0CAAE,WAAW,IACzD,CAAC,yCAAkB,CAAC,WAAW,CAAC,EAAE,IAAI,QAAQ,GAAG,GAAG,CAAC,WAAW,EAAE,EAClE,CAAC,yCAAkB,CAAC,SAAS,CAAC,EAAE,IAAI,EAEpC,CAAC,yCAAkB,CAAC,WAAW,CAAC,EAAE,GAAG,CAAC,EAAE,EACxC,CAAC,0CAAqB,CAAC,SAAS,CAAC,EAAE,GAAG,CAAC,IAAI,EAC3C,CAAC,0CAAqB,CAAC,iBAAiB,CAAC,EAAE,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,IAC3D,0CAA2B,CAAC,SAAS,EAAE,GAAG,CAAC,OAAO,CAAC,CACzD;QACD,IAAI,EAAE,cAAQ,CAAC,MAAM;KACxB,EACD,WAAW,CACd,CAAC;IAEF,MAAM,OAAO,GAAG,GAAG,CAAC,IAAI,CAAC;IACzB,IAAI,KAAK,GAAG,KAAK,CAAC;IAClB,GAAG,CAAC,IAAI,GAAG,CAAC,IAAS,EAAE,EAAE;QACrB,IAAI,CAAC,KAAK,EAAE;YACR,OAAO,CAAC,aAAa,iBACjB,CAAC,yCAAkB,CAAC,gBAAgB,CAAC,EAAE,GAAG,CAAC,UAAU,EACrD,CAAC,0CAAqB,CAAC,kBAAkB,CAAC,EAAE,SAAS,CAAC,IAAI,CAAC,IACxD,0CAA2B,CAAC,UAAU,EAAE,GAAG,CAAC,UAAU,EAAE,CAAC,EAC9D,CAAC;YACH,OAAO,CAAC,GAAG,EAAE,CAAC;YACd,KAAK,GAAG,IAAI,CAAC;SAChB;QACD,OAAO,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IACnC,CAAC,CAAC;IAEF,IAAI;QACA,MAAM,aAAO,CAAC,IAAI,CAAC,WAAK,CAAC,OAAO,CAAC,aAAO,CAAC,MAAM,EAAE,EAAE,OAAO,CAAC,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;KACzF;IAAC,OAAO,GAAG,EAAE;QACV,mCAAe,CAAC,GAAG,CAAC,CAAC;QACrB,IAAI,CAAC,KAAK,EAAE;YACR,OAAO,CAAC,SAAS,CAAC;gBACd,IAAI,EAAE,oBAAc,CAAC,KAAK;gBAC1B,OAAO,EAAE,GAAG,CAAC,OAAO;aACvB,CAAC,CAAC;YACH,OAAO,CAAC,GAAG,EAAE,CAAC;YACd,KAAK,GAAG,IAAI,CAAC;SAChB;QACD,MAAM,GAAG,CAAC;KACb;YAAS;QACN,MAAM,kBAAkB,EAAE,CAAC;KAC9B;AACL,CAAC,CAAC","sourcesContent":["import { Request, Response } from 'express';\nimport { context, propagation, ROOT_CONTEXT, SpanKind, SpanStatusCode, trace } from '@opentelemetry/api';\nimport { AspectoAttributeNames } from '@aspecto/opentelemetry-base';\nimport { SemanticAttributes, SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { cleanStackTrace } from '../clean-stack-trace';\nimport { VERSION } from '../../version';\nimport { httpHeadersToSpanAttributes } from '../../plugins-customizations/http-headers';\n\nconst parseBody = (body: any) => {\n    if (typeof body !== 'object') return body;\n    try {\n        return JSON.stringify(body);\n    } catch {\n        return undefined;\n    }\n};\n\nexport const instrumentHttpTrigger = (handler: Function, waitForSpansExport: () => Promise<void>) => async (\n    req: Request,\n    res: Response\n) => {\n    const otelContext = propagation.extract(ROOT_CONTEXT, req.headers ?? {});\n    const tracer = trace.getTracer('gcf', VERSION);\n    const funcName = process.env.K_SERVICE ?? 'unknown-name';\n    const host = req.get('host') ?? req.hostname ?? 'localhost';\n\n    const newSpan = tracer.startSpan(\n        `GCF ${funcName} - ${process.env.FUNCTION_TARGET}`,\n        {\n            attributes: {\n                [SemanticResourceAttributes.CLOUD_PROVIDER]: 'gcp',\n                [SemanticResourceAttributes.FAAS_NAME]: funcName,\n                [SemanticResourceAttributes.FAAS_ID]: `${host}/${funcName}`,\n                [SemanticAttributes.FAAS_TRIGGER]: 'http',\n                [SemanticAttributes.FAAS_EXECUTION]: req.get('function-execution-id'),\n                [SemanticResourceAttributes.FAAS_VERSION]: process.env.K_REVISION,\n\n                [SemanticAttributes.HTTP_ROUTE]: req.route,\n                [SemanticAttributes.HTTP_SCHEME]: 'https',\n                [SemanticAttributes.HTTP_FLAVOR]: req.httpVersion,\n                [SemanticAttributes.HTTP_USER_AGENT]: req.get('user-agent'),\n                [SemanticAttributes.HTTP_METHOD]: req.method?.toUpperCase(),\n                [SemanticAttributes.HTTP_TARGET]: `/${funcName}${req.originalUrl}`,\n                [SemanticAttributes.HTTP_HOST]: host,\n\n                [SemanticAttributes.NET_PEER_IP]: req.ip,\n                [AspectoAttributeNames.HTTP_PATH]: req.path,\n                [AspectoAttributeNames.HTTP_REQUEST_BODY]: parseBody(req.body),\n                ...httpHeadersToSpanAttributes('request', req.headers),\n            },\n            kind: SpanKind.SERVER,\n        },\n        otelContext\n    );\n\n    const oldSend = res.send;\n    let ended = false;\n    res.send = (body: any) => {\n        if (!ended) {\n            newSpan.setAttributes({\n                [SemanticAttributes.HTTP_STATUS_CODE]: res.statusCode,\n                [AspectoAttributeNames.HTTP_RESPONSE_BODY]: parseBody(body),\n                ...httpHeadersToSpanAttributes('response', res.getHeaders()),\n            });\n            newSpan.end();\n            ended = true;\n        }\n        return oldSend.call(res, body);\n    };\n\n    try {\n        await context.with(trace.setSpan(context.active(), newSpan), () => handler(req, res));\n    } catch (err) {\n        cleanStackTrace(err);\n        if (!ended) {\n            newSpan.setStatus({\n                code: SpanStatusCode.ERROR,\n                message: err.message,\n            });\n            newSpan.end();\n            ended = true;\n        }\n        throw err;\n    } finally {\n        await waitForSpansExport();\n    }\n};\n"]}