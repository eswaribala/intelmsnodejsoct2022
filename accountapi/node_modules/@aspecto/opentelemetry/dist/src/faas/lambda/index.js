"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLambdaTracer = exports.getInstanceFromContext = void 0;
const api_1 = __importStar(require("@opentelemetry/api"));
const semantic_conventions_1 = require("@opentelemetry/semantic-conventions");
const opentelemetry_base_1 = require("@aspecto/opentelemetry-base");
const lambda_promisify_1 = require("./lambda-promisify");
const trigger_attributes_1 = require("./trigger-attributes");
const pubsub_patcher_1 = require("./pubsub-patcher");
const clean_stack_trace_1 = require("../clean-stack-trace");
const version_1 = require("../../version");
const http_headers_1 = require("../../plugins-customizations/http-headers");
exports.getInstanceFromContext = (context) => {
    if (typeof context.logStreamName !== 'string')
        return undefined;
    return context.logStreamName.split(']').pop();
};
exports.getLambdaTracer = (waitForSpansExport) => (handler) => (async (event, context, callback) => {
    var _a, _b;
    const otelContext = api_1.propagation.extract(api_1.ROOT_CONTEXT, (_a = event === null || event === void 0 ? void 0 : event.headers) !== null && _a !== void 0 ? _a : {});
    const triggerSpecificAttributes = trigger_attributes_1.getTriggerSpecificAttributes(event);
    const tracer = api_1.trace.getTracer('lambda', version_1.VERSION);
    const newSpan = tracer.startSpan(`Lambda ${context.functionName}`, {
        attributes: Object.assign({ [semantic_conventions_1.SemanticResourceAttributes.CLOUD_PROVIDER]: 'aws', [semantic_conventions_1.SemanticResourceAttributes.CLOUD_REGION]: process.env.AWS_REGION, [semantic_conventions_1.SemanticAttributes.FAAS_EXECUTION]: context.awsRequestId, [semantic_conventions_1.SemanticResourceAttributes.FAAS_NAME]: context.functionName, [semantic_conventions_1.SemanticResourceAttributes.FAAS_ID]: context.invokedFunctionArn, [semantic_conventions_1.SemanticResourceAttributes.FAAS_VERSION]: context.functionVersion, [semantic_conventions_1.SemanticResourceAttributes.FAAS_INSTANCE]: exports.getInstanceFromContext(context) }, triggerSpecificAttributes),
        kind: api_1.SpanKind.SERVER,
    }, otelContext);
    if (trigger_attributes_1.isSqs(event)) {
        pubsub_patcher_1.patchSqsRecords({
            messages: event.Records,
            faasRootContext: api_1.trace.setSpan(api_1.default.context.active(), newSpan),
            queueName: triggerSpecificAttributes[semantic_conventions_1.SemanticAttributes.MESSAGING_DESTINATION],
            queueUrl: triggerSpecificAttributes[semantic_conventions_1.SemanticAttributes.MESSAGING_URL],
        });
    }
    else if (trigger_attributes_1.isSns(event)) {
        pubsub_patcher_1.patchSnsRecords({
            messages: event.Records,
            faasRootContext: api_1.trace.setSpan(api_1.default.context.active(), newSpan),
            topicName: triggerSpecificAttributes[semantic_conventions_1.SemanticAttributes.MESSAGING_DESTINATION],
        });
    }
    const { err, data, type } = await api_1.default.context.with(api_1.trace.setSpan(api_1.default.context.active(), newSpan), () => lambda_promisify_1.promisifyHandler(handler, event, context));
    if (err) {
        clean_stack_trace_1.cleanStackTrace(err);
        newSpan.setStatus({
            code: api_1.SpanStatusCode.ERROR,
            message: err.message,
        });
    }
    else {
        try {
            if (trigger_attributes_1.isHttp(event)) {
                newSpan.setAttributes(Object.assign({ [semantic_conventions_1.SemanticAttributes.HTTP_STATUS_CODE]: data === null || data === void 0 ? void 0 : data.statusCode, [opentelemetry_base_1.AspectoAttributeNames.HTTP_RESPONSE_BODY]: (_b = data === null || data === void 0 ? void 0 : data.body) !== null && _b !== void 0 ? _b : '' }, http_headers_1.httpHeadersToSpanAttributes('response', data === null || data === void 0 ? void 0 : data.headers)));
            }
            else {
                newSpan.setAttribute(opentelemetry_base_1.LambdaAttributes.RESPONSE, JSON.stringify(data));
            }
        }
        catch (err) {
            newSpan.setAttribute(opentelemetry_base_1.LambdaAttributes.RESPONSE, null);
        }
    }
    newSpan.end();
    await waitForSpansExport();
    if (type === lambda_promisify_1.ResponseType.Callback)
        return callback(err, data);
    if (type === lambda_promisify_1.ResponseType.AsyncResolved)
        return data;
    throw err;
});
//# sourceMappingURL=index.js.map