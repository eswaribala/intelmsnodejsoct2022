"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTriggerSpecificAttributes = exports.isHttp = exports.isTimer = exports.isSns = exports.isSqs = void 0;
const semantic_conventions_1 = require("@opentelemetry/semantic-conventions");
const opentelemetry_base_1 = require("@aspecto/opentelemetry-base");
const http_headers_1 = require("../../plugins-customizations/http-headers");
const getScheduledEventAttributes = (event) => {
    return {
        [semantic_conventions_1.SemanticAttributes.FAAS_TRIGGER]: 'timer',
        [semantic_conventions_1.SemanticAttributes.FAAS_TIME]: event.time,
    };
};
const queryStringObjectToString = (qso) => typeof qso === 'object' && Object.keys(qso).length > 0
    ? '?' +
        Object.entries(qso)
            .map(([k, v]) => `${k}=${v}`)
            .join('&')
    : '';
const getHttpV1Attributes = (event) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;
    const queryString = queryStringObjectToString(event.queryStringParameters);
    const lowerCaseHeaders = new Map(Object.entries((_a = event.headers) !== null && _a !== void 0 ? _a : {}).map(([k, v]) => [k.toLowerCase(), v]));
    const agent = (_d = (_c = (_b = event.requestContext) === null || _b === void 0 ? void 0 : _b.identity) === null || _c === void 0 ? void 0 : _c.userAgent) !== null && _d !== void 0 ? _d : lowerCaseHeaders.get('user-agent');
    const scheme = (_e = lowerCaseHeaders.get('x-forwarded-proto')) !== null && _e !== void 0 ? _e : 'https';
    const host = (_f = lowerCaseHeaders.get('host')) !== null && _f !== void 0 ? _f : (_g = event.requestContext) === null || _g === void 0 ? void 0 : _g.domainName;
    const path = (_j = (_h = event.requestContext) === null || _h === void 0 ? void 0 : _h.path) !== null && _j !== void 0 ? _j : event.path;
    const route = ((_k = event.requestContext) === null || _k === void 0 ? void 0 : _k.stage) && event.resource
        ? `/${(_l = event.requestContext) === null || _l === void 0 ? void 0 : _l.stage}${event.resource}`
        : event.resource;
    return Object.assign({ [semantic_conventions_1.SemanticAttributes.FAAS_TRIGGER]: 'http', [semantic_conventions_1.SemanticAttributes.HTTP_METHOD]: event.httpMethod, [semantic_conventions_1.SemanticAttributes.HTTP_SCHEME]: scheme, [semantic_conventions_1.SemanticAttributes.HTTP_HOST]: host, [semantic_conventions_1.SemanticAttributes.HTTP_TARGET]: path ? `${path}${queryString}` : undefined, [semantic_conventions_1.SemanticAttributes.HTTP_FLAVOR]: (_o = (_m = event.requestContext) === null || _m === void 0 ? void 0 : _m.protocol) === null || _o === void 0 ? void 0 : _o.split('/').pop(), [semantic_conventions_1.SemanticAttributes.HTTP_USER_AGENT]: agent, [semantic_conventions_1.SemanticAttributes.HTTP_ROUTE]: route !== null && route !== void 0 ? route : path, [opentelemetry_base_1.AspectoAttributeNames.HTTP_REQUEST_BODY]: event.body ? event.body : '', [opentelemetry_base_1.AspectoAttributeNames.HTTP_PATH]: path, ['http.route.params']: event.pathParameters ? JSON.stringify(event.pathParameters) : undefined }, http_headers_1.httpHeadersToSpanAttributes('request', event.headers));
};
const getHttpV2Attributes = (event) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
    const queryString = queryStringObjectToString(event.queryStringParameters);
    const lowerCaseHeaders = new Map(Object.entries((_a = event.headers) !== null && _a !== void 0 ? _a : {}).map(([k, v]) => [k.toLowerCase(), v]));
    const agent = (_d = (_c = (_b = event.requestContext) === null || _b === void 0 ? void 0 : _b.http) === null || _c === void 0 ? void 0 : _c.userAgent) !== null && _d !== void 0 ? _d : lowerCaseHeaders.get('user-agent');
    const scheme = (_e = lowerCaseHeaders.get('x-forwarded-proto')) !== null && _e !== void 0 ? _e : 'https';
    const host = (_f = lowerCaseHeaders.get('host')) !== null && _f !== void 0 ? _f : (_g = event.requestContext) === null || _g === void 0 ? void 0 : _g.domainName;
    const path = (_k = (_j = (_h = event.requestContext) === null || _h === void 0 ? void 0 : _h.http) === null || _j === void 0 ? void 0 : _j.path) !== null && _k !== void 0 ? _k : event.rawPath;
    return Object.assign({ [semantic_conventions_1.SemanticAttributes.FAAS_TRIGGER]: 'http', [semantic_conventions_1.SemanticAttributes.HTTP_METHOD]: event.requestContext.http.method, [semantic_conventions_1.SemanticAttributes.HTTP_SCHEME]: scheme, [semantic_conventions_1.SemanticAttributes.HTTP_HOST]: host, [semantic_conventions_1.SemanticAttributes.HTTP_TARGET]: path ? `${path}${queryString}` : undefined, [semantic_conventions_1.SemanticAttributes.HTTP_FLAVOR]: (_l = event.requestContext.http.protocol) === null || _l === void 0 ? void 0 : _l.split('/').pop(), [semantic_conventions_1.SemanticAttributes.HTTP_USER_AGENT]: agent, [semantic_conventions_1.SemanticAttributes.HTTP_ROUTE]: path, [opentelemetry_base_1.AspectoAttributeNames.HTTP_REQUEST_BODY]: event.body ? event.body : '', [opentelemetry_base_1.AspectoAttributeNames.HTTP_PATH]: path, ['http.route.params']: event.pathParameters ? JSON.stringify(event.pathParameters) : undefined }, http_headers_1.httpHeadersToSpanAttributes('request', event.headers));
};
const getSqsAttributes = (event) => {
    const record = event.Records[0];
    const arnArray = record.eventSourceARN.split(':');
    const queueName = arnArray.pop();
    const accountId = arnArray.pop();
    return {
        [semantic_conventions_1.SemanticAttributes.FAAS_TRIGGER]: 'pubsub',
        [semantic_conventions_1.SemanticAttributes.MESSAGING_OPERATION]: semantic_conventions_1.MessagingOperationValues.RECEIVE,
        [semantic_conventions_1.SemanticAttributes.MESSAGING_SYSTEM]: 'aws.sqs',
        [semantic_conventions_1.SemanticAttributes.MESSAGING_DESTINATION_KIND]: semantic_conventions_1.MessagingDestinationKindValues.QUEUE,
        [semantic_conventions_1.SemanticAttributes.MESSAGING_DESTINATION]: queueName,
        [semantic_conventions_1.SemanticAttributes.MESSAGING_URL]: `https://sqs.${record.awsRegion}.amazonaws/${accountId}/${queueName}`,
    };
};
const getSnsAttributes = (event) => {
    const record = event.Records[0];
    // TopicArn example: arn:aws:sns:us-east-1:1234567890:my-topic
    const arnArray = record.Sns.TopicArn.split(':');
    const topicName = arnArray.pop();
    return {
        [semantic_conventions_1.SemanticAttributes.FAAS_TRIGGER]: 'pubsub',
        [semantic_conventions_1.SemanticAttributes.MESSAGING_OPERATION]: semantic_conventions_1.MessagingOperationValues.RECEIVE,
        [semantic_conventions_1.SemanticAttributes.MESSAGING_SYSTEM]: 'aws.sns',
        [semantic_conventions_1.SemanticAttributes.MESSAGING_DESTINATION_KIND]: semantic_conventions_1.MessagingDestinationKindValues.TOPIC,
        [semantic_conventions_1.SemanticAttributes.MESSAGING_DESTINATION]: topicName,
        // TODO: Split to different traces per message ID
        [opentelemetry_base_1.LambdaAttributes.EVENT]: JSON.stringify(event),
    };
};
exports.isSqs = (event) => { var _a, _b, _c; return ((_c = (_b = (_a = event) === null || _a === void 0 ? void 0 : _a.Records) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.eventSource) === 'aws:sqs'; };
exports.isSns = (event) => { var _a, _b, _c; return ((_c = (_b = (_a = event) === null || _a === void 0 ? void 0 : _a.Records) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.EventSource) === 'aws:sns'; };
exports.isTimer = (event) => { var _a; return ((_a = event) === null || _a === void 0 ? void 0 : _a['detail-type']) === 'Scheduled Event'; };
const isHttpV1 = (event) => { var _a; return (_a = event) === null || _a === void 0 ? void 0 : _a.httpMethod; };
const isHttpV2 = (event) => { var _a, _b; return (_b = (_a = event) === null || _a === void 0 ? void 0 : _a.requestContext) === null || _b === void 0 ? void 0 : _b.http; };
exports.isHttp = (event) => isHttpV1(event) || isHttpV2(event);
exports.getTriggerSpecificAttributes = (event = {}) => {
    try {
        if (isHttpV1(event))
            return getHttpV1Attributes(event);
        if (isHttpV2(event))
            return getHttpV2Attributes(event);
        if (exports.isTimer(event))
            return getScheduledEventAttributes(event);
        if (exports.isSqs(event))
            return getSqsAttributes(event);
        if (exports.isSns(event))
            return getSnsAttributes(event);
    }
    catch (_a) { }
    return {
        [opentelemetry_base_1.LambdaAttributes.EVENT]: JSON.stringify(event),
        [semantic_conventions_1.SemanticAttributes.FAAS_TRIGGER]: 'other',
    };
};
//# sourceMappingURL=trigger-attributes.js.map