{"version":3,"file":"pubsub-patcher.js","sourceRoot":"","sources":["../../../../src/faas/lambda/pubsub-patcher.ts"],"names":[],"mappings":"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","sourcesContent":["import { propagation, trace, TextMapGetter, Context, ROOT_CONTEXT } from '@opentelemetry/api';\nimport { pubsubPropagation } from '@opentelemetry/propagation-utils';\nimport { SQSRecord, SNSEventRecord, SNSMessageAttributes, SQSMessageAttributes } from 'aws-lambda';\nimport { SemanticAttributes, MessagingDestinationKindValues } from '@opentelemetry/semantic-conventions';\nimport { MessagingExtendedAttribute } from '@aspecto/opentelemetry-base';\n\nclass SnsContextGetter implements TextMapGetter<SNSMessageAttributes> {\n    keys(carrier: SNSMessageAttributes): string[] {\n        return Object.keys(carrier);\n    }\n\n    get(carrier: SNSMessageAttributes, key: string): string | string[] {\n        return carrier?.[key]?.Value;\n    }\n}\nconst snsContextGetter = new SnsContextGetter();\n\nclass SqsContextGetter implements TextMapGetter<SQSMessageAttributes> {\n    keys(carrier: SQSMessageAttributes): string[] {\n        return Object.keys(carrier);\n    }\n\n    get(carrier: SQSMessageAttributes, key: string): string | string[] {\n        return carrier?.[key]?.stringValue;\n    }\n}\nconst sqsContextGetter = new SqsContextGetter();\n\ninterface PatchSqsPayload {\n    messages: SQSRecord[];\n    faasRootContext: Context;\n    queueUrl: string;\n    queueName: string;\n}\n\nexport const patchSqsRecords = ({ messages, faasRootContext, queueUrl, queueName }: PatchSqsPayload) => {\n    if (!messages?.length) return;\n    const tracer = trace.getTracer('lambda-sqs');\n    pubsubPropagation.patchArrayForProcessSpans(messages, tracer);\n\n    const messageToSpanDetails = (message: SQSRecord) => ({\n        attributes: {\n            [SemanticAttributes.MESSAGING_SYSTEM]: 'aws.sqs',\n            [SemanticAttributes.MESSAGING_DESTINATION]: queueName,\n            [SemanticAttributes.MESSAGING_DESTINATION_KIND]: MessagingDestinationKindValues.QUEUE,\n            [SemanticAttributes.MESSAGING_MESSAGE_ID]: message.messageId,\n            [SemanticAttributes.MESSAGING_URL]: queueUrl,\n            [MessagingExtendedAttribute.MESSAGING_PAYLOAD]:\n                typeof message.body === 'string' ? message.body : JSON.stringify(message.body),\n        },\n        name: queueName,\n        parentContext: propagation.extract(ROOT_CONTEXT, message.messageAttributes, sqsContextGetter),\n    });\n\n    pubsubPropagation.patchMessagesArrayToStartProcessSpans<SQSRecord>({\n        messages,\n        tracer,\n        parentContext: faasRootContext,\n        messageToSpanDetails,\n    });\n};\n\ninterface PatchSnsPayload {\n    messages: SNSEventRecord[];\n    faasRootContext: Context;\n    topicName: string;\n}\n\nexport const patchSnsRecords = ({ messages, faasRootContext, topicName }: PatchSnsPayload) => {\n    if (!messages?.length) return;\n    const tracer = trace.getTracer('lambda-sns');\n    pubsubPropagation.patchArrayForProcessSpans(messages, tracer);\n\n    const messageToSpanDetails = (message: SNSEventRecord) => ({\n        attributes: {\n            [SemanticAttributes.MESSAGING_SYSTEM]: 'aws.sns',\n            [SemanticAttributes.MESSAGING_DESTINATION]: topicName,\n            [SemanticAttributes.MESSAGING_DESTINATION_KIND]: MessagingDestinationKindValues.TOPIC,\n            [SemanticAttributes.MESSAGING_MESSAGE_ID]: message.Sns.MessageId,\n            [MessagingExtendedAttribute.MESSAGING_PAYLOAD]:\n                typeof message.Sns.Message === 'string' ? message.Sns.Message : JSON.stringify(message.Sns.Message),\n        },\n        name: topicName,\n        parentContext: propagation.extract(ROOT_CONTEXT, message.Sns.MessageAttributes, snsContextGetter),\n    });\n\n    pubsubPropagation.patchMessagesArrayToStartProcessSpans<SNSEventRecord>({\n        messages,\n        tracer,\n        parentContext: faasRootContext,\n        messageToSpanDetails,\n    });\n};\n"]}