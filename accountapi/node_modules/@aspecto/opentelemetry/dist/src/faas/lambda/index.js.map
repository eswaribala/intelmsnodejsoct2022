{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/faas/lambda/index.ts"],"names":[],"mappings":"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","sourcesContent":["import api, { propagation, ROOT_CONTEXT, SpanKind, SpanStatusCode, trace } from '@opentelemetry/api';\nimport { SemanticAttributes, SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { Context } from 'aws-lambda';\nimport { AspectoAttributeNames, LambdaAttributes } from '@aspecto/opentelemetry-base';\nimport { promisifyHandler, ResponseType } from './lambda-promisify';\nimport { getTriggerSpecificAttributes, isSqs, isHttp, isSns } from './trigger-attributes';\nimport { patchSqsRecords, patchSnsRecords } from './pubsub-patcher';\nimport { cleanStackTrace } from '../clean-stack-trace';\nimport { VERSION } from '../../version';\nimport { httpHeadersToSpanAttributes } from '../../plugins-customizations/http-headers';\n\ntype LambdaCallback = (err?: Error, data?: any) => void;\n\nexport const getInstanceFromContext = (context: Context) => {\n    if (typeof context.logStreamName !== 'string') return undefined;\n    return context.logStreamName.split(']').pop();\n};\n\nexport type LambdaTracer = <T>(handler: T) => T;\n\nexport const getLambdaTracer = (waitForSpansExport: () => Promise<void>): LambdaTracer => <T>(handler: T) =>\n    ((async (event: any, context: Context, callback?: LambdaCallback) => {\n        const otelContext = propagation.extract(ROOT_CONTEXT, event?.headers ?? {});\n        const triggerSpecificAttributes = getTriggerSpecificAttributes(event);\n        const tracer = trace.getTracer('lambda', VERSION);\n        const newSpan = tracer.startSpan(\n            `Lambda ${context.functionName}`,\n            {\n                attributes: {\n                    [SemanticResourceAttributes.CLOUD_PROVIDER]: 'aws',\n                    [SemanticResourceAttributes.CLOUD_REGION]: process.env.AWS_REGION,\n                    [SemanticAttributes.FAAS_EXECUTION]: context.awsRequestId,\n                    [SemanticResourceAttributes.FAAS_NAME]: context.functionName,\n                    [SemanticResourceAttributes.FAAS_ID]: context.invokedFunctionArn,\n                    [SemanticResourceAttributes.FAAS_VERSION]: context.functionVersion,\n                    [SemanticResourceAttributes.FAAS_INSTANCE]: getInstanceFromContext(context),\n                    ...triggerSpecificAttributes,\n                },\n                kind: SpanKind.SERVER,\n            },\n            otelContext\n        );\n        if (isSqs(event)) {\n            patchSqsRecords({\n                messages: event.Records,\n                faasRootContext: trace.setSpan(api.context.active(), newSpan),\n                queueName: triggerSpecificAttributes[SemanticAttributes.MESSAGING_DESTINATION] as string,\n                queueUrl: triggerSpecificAttributes[SemanticAttributes.MESSAGING_URL] as string,\n            });\n        } else if (isSns(event)) {\n            patchSnsRecords({\n                messages: event.Records,\n                faasRootContext: trace.setSpan(api.context.active(), newSpan),\n                topicName: triggerSpecificAttributes[SemanticAttributes.MESSAGING_DESTINATION] as string,\n            });\n        }\n\n        const { err, data, type } = await api.context.with(trace.setSpan(api.context.active(), newSpan), () =>\n            promisifyHandler(handler as any, event, context)\n        );\n        if (err) {\n            cleanStackTrace(err);\n            newSpan.setStatus({\n                code: SpanStatusCode.ERROR,\n                message: err.message,\n            });\n        } else {\n            try {\n                if (isHttp(event)) {\n                    newSpan.setAttributes({\n                        [SemanticAttributes.HTTP_STATUS_CODE]: data?.statusCode,\n                        [AspectoAttributeNames.HTTP_RESPONSE_BODY]: data?.body ?? '',\n                        ...httpHeadersToSpanAttributes('response', data?.headers),\n                    });\n                } else {\n                    newSpan.setAttribute(LambdaAttributes.RESPONSE, JSON.stringify(data));\n                }\n            } catch (err) {\n                newSpan.setAttribute(LambdaAttributes.RESPONSE, null);\n            }\n        }\n\n        newSpan.end();\n        await waitForSpansExport();\n\n        if (type === ResponseType.Callback) return callback(err, data);\n        if (type === ResponseType.AsyncResolved) return data;\n        throw err;\n    }) as unknown) as T;\n"]}