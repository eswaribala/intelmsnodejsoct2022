import { SpanAttributes, SpanAttributeValue, Tracer } from '@opentelemetry/api';
import AspectoClientOptions, { Logger } from './interfaces/AspectoClientOptions';
import { LambdaTracer } from './faas/lambda';
import { GCFTracer } from './faas/gcf';
import * as manualSpans from './manual-spans';

interface InstrumentResult {
    tracer: Tracer;
    lambda: LambdaTracer;
    gcf: GCFTracer;
    /**
    @deprecated
    */
    setLogger: (logger: Logger) => void;
    shutdown: () => Promise<void>;
}

declare function instrument(options?: AspectoClientOptions): InstrumentResult;

declare namespace instrument {
    interface TracedFunction extends manualSpans.TracedFunction {}
    interface ManualSpan extends manualSpans.ManualSpan {}
    interface TraceOptions extends manualSpans.TraceOptions {}
    type OptionsOrTracedFunction = TraceOptions | TracedFunction;

    export function getContext(): {
        traceId: string;
        spanId: string;
    };

    export function setAttribute(key: string, value: SpanAttributeValue): boolean;

    export function setAttributes(attributes: SpanAttributes): boolean;

    export function trace(optionsOrTracedFunction: OptionsOrTracedFunction, fn?: TracedFunction): any;
}
export = instrument;
//# sourceMappingURL=index.d.ts.map
