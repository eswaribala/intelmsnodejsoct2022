{"version":3,"file":"aspecto-resource.js","sourceRoot":"","sources":["../../../src/aspecto-resource/aspecto-resource.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,wDAAwE;AACxE,8EAAiF;AACjF,sCAA0C;AAE1C,6CAA0C;AAC1C,uCAAyB;AAEzB,wCAAqC;AAErC,MAAa,mBAAmB;IAC5B,YAAoB,UAAgC,EAAU,WAAiC;QAA3E,eAAU,GAAV,UAAU,CAAsB;QAAU,gBAAW,GAAX,WAAW,CAAsB;IAAG,CAAC;IAEnG,MAAM;QACF,MAAM,UAAU,GAAuB;YACnC,CAAC,iDAA0B,CAAC,sBAAsB,CAAC,EAAE,QAAQ;YAC7D,CAAC,uBAAU,CAAC,eAAe,CAAC,EAAE,OAAO,CAAC,QAAQ,CAAC,IAAI;YACnD,CAAC,uBAAU,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC,QAAQ,EAAE;YACpC,CAAC,uBAAU,CAAC,KAAK,CAAC,EAAE,sBAAa,CAAC,KAAK;YACvC,CAAC,uBAAU,CAAC,OAAO,CAAC,EAAE,iBAAO;SAChC,CAAC;QAEF,MAAM,gBAAgB,GAAG,6BAAqB,CAC1C,IAAI,CAAC,UAAU,EACf,IAAI,CAAC,WAAW,EAChB,UAAU,EACV,mBAAmB,CACtB,CAAC;QACF,IAAI,gBAAgB,EAAE;YAClB,UAAU,CAAC,uBAAU,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;SAC3C;QAED,OAAO,IAAI,oBAAQ,CAAC,UAAU,CAAC,CAAC;IACpC,CAAC;CACJ;AAxBD,kDAwBC;AAEY,QAAA,qBAAqB,GAAG,CACjC,UAAgC,EAChC,WAAiC,EACjC,UAAsC,EACtC,UAAkB,EACgB,EAAE;;IACpC,mBAAO,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAG,UAAU,oCAAK,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,mCAAI,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAG,UAAU,EAAE;AAC5F,CAAC,CAAC","sourcesContent":["import { Resource, ResourceAttributes } from '@opentelemetry/resources';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { AspectoConfig } from '../config';\nimport AspectoClientOptions, { Logger } from '../interfaces/AspectoClientOptions';\nimport { LabelNames } from './LabelNames';\nimport * as os from 'os';\nimport { SyncDetector } from 'opentelemetry-resource-detector-sync-api';\nimport { VERSION } from '../version';\n\nexport class AspectoSyncDetector implements SyncDetector {\n    constructor(private sdkOptions: AspectoClientOptions, private fileOptions: AspectoClientOptions) {}\n\n    detect(): Resource {\n        const attributes: ResourceAttributes = {\n            [SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE]: 'nodejs',\n            [LabelNames.RUNTIME_VERSION]: process.versions.node,\n            [LabelNames.HOSTNAME]: os.hostname(),\n            [LabelNames.TOKEN]: AspectoConfig.token,\n            [LabelNames.VERSION]: VERSION,\n        };\n\n        const generateCiReport = getAspectoConfigValue(\n            this.sdkOptions,\n            this.fileOptions,\n            'ciReport',\n            'ASPECTO_CI_REPORT'\n        );\n        if (generateCiReport) {\n            attributes[LabelNames.CI_REPORT] = true;\n        }\n\n        return new Resource(attributes);\n    }\n}\n\nexport const getAspectoConfigValue = (\n    sdkOptions: AspectoClientOptions,\n    fileOptions: AspectoClientOptions,\n    optionName: keyof AspectoClientOptions,\n    envVarName: string\n): string | number | boolean | Logger => {\n    return sdkOptions?.[optionName] ?? process.env[envVarName] ?? fileOptions?.[optionName];\n};\n"]}