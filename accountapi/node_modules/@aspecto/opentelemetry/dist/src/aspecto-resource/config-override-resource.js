"use strict";
// check if a value is overwritten from various config sources.
//
// Order of precedence is:
// 1. sdkOptions (the value supplied in code while initializing the Aspecto SDK)
// 2. Environment variables
// 3. Aspecto config file
//
Object.defineProperty(exports, "__esModule", { value: true });
exports.sdkConfigOverrideResource = void 0;
const resources_1 = require("@opentelemetry/resources");
const semantic_conventions_1 = require("@opentelemetry/semantic-conventions");
const aspecto_resource_1 = require("./aspecto-resource");
const LabelNames_1 = require("./LabelNames");
exports.sdkConfigOverrideResource = (sdkOptions, fileOptions) => {
    const attributes = {};
    // override service name.
    // packageName is for backward compatibility.
    const overridePackageName = aspecto_resource_1.getAspectoConfigValue(sdkOptions, fileOptions, 'packageName', 'ASPECTO_PACKAGE_NAME'); // deprecated
    const overrideServiceName = aspecto_resource_1.getAspectoConfigValue(sdkOptions, fileOptions, 'serviceName', null);
    const finalServiceName = overrideServiceName !== null && overrideServiceName !== void 0 ? overrideServiceName : overridePackageName;
    if (finalServiceName) {
        attributes[semantic_conventions_1.SemanticResourceAttributes.SERVICE_NAME] = finalServiceName;
    }
    // override service version
    const overridePackageVersion = aspecto_resource_1.getAspectoConfigValue(sdkOptions, fileOptions, 'packageVersion', 'ASPECTO_PACKAGE_VERSION'); // deprecated
    const overrideServiceVersion = aspecto_resource_1.getAspectoConfigValue(sdkOptions, fileOptions, 'serviceVersion', 'OTEL_SERVICE_VERSION');
    const finalServiceVersion = overrideServiceVersion !== null && overrideServiceVersion !== void 0 ? overrideServiceVersion : overridePackageVersion;
    if (finalServiceVersion) {
        attributes[semantic_conventions_1.SemanticResourceAttributes.SERVICE_VERSION] = finalServiceVersion;
    }
    // override env
    const overrideEnv = aspecto_resource_1.getAspectoConfigValue(sdkOptions, fileOptions, 'env', 'ASPECTO_ENV');
    if (overrideEnv) {
        attributes[semantic_conventions_1.SemanticResourceAttributes.DEPLOYMENT_ENVIRONMENT] = overrideEnv;
    }
    // override git hash, only via env variable
    if (process.env.ASPECTO_GITHASH) {
        attributes[LabelNames_1.GitResourceAttributes.VCS_COMMIT_ID] = process.env.ASPECTO_GITHASH;
    }
    return new resources_1.Resource(attributes);
};
//# sourceMappingURL=config-override-resource.js.map