"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAspectoConfigValue = exports.AspectoSyncDetector = void 0;
const resources_1 = require("@opentelemetry/resources");
const semantic_conventions_1 = require("@opentelemetry/semantic-conventions");
const config_1 = require("../config");
const LabelNames_1 = require("./LabelNames");
const os = __importStar(require("os"));
const version_1 = require("../version");
class AspectoSyncDetector {
    constructor(sdkOptions, fileOptions) {
        this.sdkOptions = sdkOptions;
        this.fileOptions = fileOptions;
    }
    detect() {
        const attributes = {
            [semantic_conventions_1.SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE]: 'nodejs',
            [LabelNames_1.LabelNames.RUNTIME_VERSION]: process.versions.node,
            [LabelNames_1.LabelNames.HOSTNAME]: os.hostname(),
            [LabelNames_1.LabelNames.TOKEN]: config_1.AspectoConfig.token,
            [LabelNames_1.LabelNames.VERSION]: version_1.VERSION,
        };
        const generateCiReport = exports.getAspectoConfigValue(this.sdkOptions, this.fileOptions, 'ciReport', 'ASPECTO_CI_REPORT');
        if (generateCiReport) {
            attributes[LabelNames_1.LabelNames.CI_REPORT] = true;
        }
        return new resources_1.Resource(attributes);
    }
}
exports.AspectoSyncDetector = AspectoSyncDetector;
exports.getAspectoConfigValue = (sdkOptions, fileOptions, optionName, envVarName) => {
    var _a, _b;
    return (_b = (_a = sdkOptions === null || sdkOptions === void 0 ? void 0 : sdkOptions[optionName]) !== null && _a !== void 0 ? _a : process.env[envVarName]) !== null && _b !== void 0 ? _b : fileOptions === null || fileOptions === void 0 ? void 0 : fileOptions[optionName];
};
//# sourceMappingURL=aspecto-resource.js.map