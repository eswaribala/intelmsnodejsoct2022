"use strict";
// this is the fallback for some attributes which should be set to "not-set" if missing
Object.defineProperty(exports, "__esModule", { value: true });
exports.notSetResource = exports.NOT_SET_ATTRIBUTE_VALUE = void 0;
const resources_1 = require("@opentelemetry/resources");
const semantic_conventions_1 = require("@opentelemetry/semantic-conventions");
const LabelNames_1 = require("./LabelNames");
exports.NOT_SET_ATTRIBUTE_VALUE = 'not-set';
// later resources will try to fetch the values from other sources, overriding this one if present
exports.notSetResource = new resources_1.Resource({
    [semantic_conventions_1.SemanticResourceAttributes.SERVICE_NAME]: exports.NOT_SET_ATTRIBUTE_VALUE,
    [semantic_conventions_1.SemanticResourceAttributes.SERVICE_VERSION]: exports.NOT_SET_ATTRIBUTE_VALUE,
    [semantic_conventions_1.SemanticResourceAttributes.DEPLOYMENT_ENVIRONMENT]: exports.NOT_SET_ATTRIBUTE_VALUE,
    [LabelNames_1.GitResourceAttributes.VCS_COMMIT_ID]: exports.NOT_SET_ATTRIBUTE_VALUE,
    [LabelNames_1.GitResourceAttributes.VCS_CLONE_ID]: exports.NOT_SET_ATTRIBUTE_VALUE,
});
//# sourceMappingURL=not-set-resource.js.map