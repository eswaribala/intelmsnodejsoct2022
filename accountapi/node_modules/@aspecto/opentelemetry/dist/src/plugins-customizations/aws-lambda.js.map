{"version":3,"file":"aws-lambda.js","sourceRoot":"","sources":["../../../src/plugins-customizations/aws-lambda.ts"],"names":[],"mappings":";;;AAAA,8EAAqG;AACrG,oEAAsF;AAEtF,4CAAmE;AAGnE,2CAAwD;AACxD,kEAAiF;AACjF,0EAA+F;AAC/F,iEAA4D;AAC5D,iDAA6D;AAEhD,QAAA,8BAA8B,GAAmC;IAC1E,WAAW,EAAE,CAAC,IAAU,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,EAAE,EAAE;QAC5C,MAAM,eAAe,GAAG;YACpB,CAAC,iDAA0B,CAAC,cAAc,CAAC,EAAE,KAAK;YAClD,CAAC,iDAA0B,CAAC,YAAY,CAAC,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU;YACjE,CAAC,iDAA0B,CAAC,SAAS,CAAC,EAAE,OAAO,CAAC,YAAY;YAC5D,CAAC,iDAA0B,CAAC,YAAY,CAAC,EAAE,OAAO,CAAC,eAAe;YAClE,CAAC,iDAA0B,CAAC,aAAa,CAAC,EAAE,+BAAsB,CAAC,OAAO,CAAC;SAC9E,CAAC;QACF,MAAM,iBAAiB,GAAG,iDAA4B,CAAC,KAAK,CAAC,CAAC;QAE9D,IAAI,0BAAK,CAAC,KAAK,CAAC,EAAE;YACd,gCAAe,CAAC;gBACZ,QAAQ,EAAE,KAAK,CAAC,OAAO;gBACvB,eAAe,EAAE,WAAK,CAAC,OAAO,CAAC,aAAW,CAAC,MAAM,EAAE,EAAE,IAAI,CAAC;gBAC1D,SAAS,EAAE,iBAAiB,CAAC,yCAAkB,CAAC,qBAAqB,CAAW;gBAChF,QAAQ,EAAE,iBAAiB,CAAC,yCAAkB,CAAC,aAAa,CAAW;aAC1E,CAAC,CAAC;SACN;aAAM,IAAI,0BAAK,CAAC,KAAK,CAAC,EAAE;YACrB,gCAAe,CAAC;gBACZ,QAAQ,EAAE,KAAK,CAAC,OAAO;gBACvB,eAAe,EAAE,WAAK,CAAC,OAAO,CAAC,aAAW,CAAC,MAAM,EAAE,EAAE,IAAI,CAAC;gBAC1D,SAAS,EAAE,iBAAiB,CAAC,yCAAkB,CAAC,qBAAqB,CAAW;aACnF,CAAC,CAAC;YACH,iBAAiB,CAAC;SACrB;QAED,IAAI,CAAC,aAAa,iCACX,eAAe,GACf,iBAAiB,EACtB,CAAC;IACP,CAAC;IACD,YAAY,EAAE,CAAC,IAAU,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE;;QACvC,IAAI;YACA,IAAI,GAAG,EAAE;gBACL,IAAI,IAAI,CAAC,UAAU,CAAC,yCAAkB,CAAC,YAAY,CAAC,KAAK,MAAM,EAAE;oBAC7D,IAAI,CAAC,aAAa,iBACd,CAAC,yCAAkB,CAAC,gBAAgB,CAAC,EAAE,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,UAAU,EACtD,CAAC,0CAAqB,CAAC,kBAAkB,CAAC,QAAE,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,IAAI,mCAAI,EAAE,IACxD,0CAA2B,CAAC,UAAU,EAAE,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,OAAO,CAAC,EAC1D,CAAC;iBACN;qBAAM;oBACH,IAAI,CAAC,YAAY,CAAC,qCAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;iBACrE;aACJ;iBAAM;gBACH,IAAI,GAAG,YAAY,KAAK,EAAE;oBACtB,mCAAe,CAAC,GAAG,CAAC,CAAC;iBACxB;gBACD,IAAI,CAAC,YAAY,CAAC,qCAAgB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;aACtD;SACJ;QAAC,WAAM;YACJ,OAAO;SACV;IACL,CAAC;IACD,4BAA4B,EAAE,IAAI;CACrC,CAAC","sourcesContent":["import { SemanticAttributes, SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { AspectoAttributeNames, LambdaAttributes } from '@aspecto/opentelemetry-base';\nimport { AwsLambdaInstrumentationConfig } from '@opentelemetry/instrumentation-aws-lambda';\nimport { context as otelcontext, trace } from '@opentelemetry/api';\nimport { Span } from '@opentelemetry/sdk-trace-base';\n\nimport { getInstanceFromContext } from '../faas/lambda';\nimport { patchSnsRecords, patchSqsRecords } from '../faas/lambda/pubsub-patcher';\nimport { getTriggerSpecificAttributes, isSqs, isSns } from '../faas/lambda/trigger-attributes';\nimport { cleanStackTrace } from '../faas/clean-stack-trace';\nimport { httpHeadersToSpanAttributes } from './http-headers';\n\nexport const awsLambdaInstrumentationConfig: AwsLambdaInstrumentationConfig = {\n    requestHook: (span: Span, { event, context }) => {\n        const entryAttributes = {\n            [SemanticResourceAttributes.CLOUD_PROVIDER]: 'aws',\n            [SemanticResourceAttributes.CLOUD_REGION]: process.env.AWS_REGION,\n            [SemanticResourceAttributes.FAAS_NAME]: context.functionName,\n            [SemanticResourceAttributes.FAAS_VERSION]: context.functionVersion,\n            [SemanticResourceAttributes.FAAS_INSTANCE]: getInstanceFromContext(context),\n        };\n        const triggerAttributes = getTriggerSpecificAttributes(event);\n\n        if (isSqs(event)) {\n            patchSqsRecords({\n                messages: event.Records,\n                faasRootContext: trace.setSpan(otelcontext.active(), span),\n                queueName: triggerAttributes[SemanticAttributes.MESSAGING_DESTINATION] as string,\n                queueUrl: triggerAttributes[SemanticAttributes.MESSAGING_URL] as string,\n            });\n        } else if (isSns(event)) {\n            patchSnsRecords({\n                messages: event.Records,\n                faasRootContext: trace.setSpan(otelcontext.active(), span),\n                topicName: triggerAttributes[SemanticAttributes.MESSAGING_DESTINATION] as string,\n            });\n            triggerAttributes;\n        }\n\n        span.setAttributes({\n            ...entryAttributes,\n            ...triggerAttributes,\n        });\n    },\n    responseHook: (span: Span, { err, res }) => {\n        try {\n            if (res) {\n                if (span.attributes[SemanticAttributes.FAAS_TRIGGER] === 'http') {\n                    span.setAttributes({\n                        [SemanticAttributes.HTTP_STATUS_CODE]: res?.statusCode,\n                        [AspectoAttributeNames.HTTP_RESPONSE_BODY]: res?.body ?? '',\n                        ...httpHeadersToSpanAttributes('response', res?.headers),\n                    });\n                } else {\n                    span.setAttribute(LambdaAttributes.RESPONSE, JSON.stringify(res));\n                }\n            } else {\n                if (err instanceof Error) {\n                    cleanStackTrace(err);\n                }\n                span.setAttribute(LambdaAttributes.RESPONSE, null);\n            }\n        } catch {\n            // noop\n        }\n    },\n    disableAwsContextPropagation: true,\n};\n"]}