"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.aspectoHttpPluginConfig = void 0;
const http_1 = require("http");
const opentelemetry_base_1 = require("@aspecto/opentelemetry-base");
const opentelemetry_base_2 = require("@aspecto/opentelemetry-base");
const recording_span_1 = require("./recording-span");
const http_headers_1 = require("./http-headers");
const streamChunksKey = Symbol('aspecto otel instrumentation StreamChunks');
const httpCustomAttributes = (span, request, response) => {
    if (request instanceof http_1.ClientRequest) {
        const reqPath = request.path.split('?')[0];
        span.setAttribute(opentelemetry_base_1.AspectoAttributeNames.HTTP_PATH, reqPath);
        span.setAttributes(http_headers_1.httpHeadersToSpanAttributes('request', request.getHeaders()));
    }
    if (response instanceof http_1.IncomingMessage) {
        span.setAttributes(http_headers_1.httpHeadersToSpanAttributes('response', response.headers));
    }
    const requestBody = request[streamChunksKey];
    if (requestBody) {
        span.setAttribute(opentelemetry_base_1.AspectoAttributeNames.HTTP_REQUEST_BODY, requestBody.getBody());
    }
    const responseBody = response[streamChunksKey];
    if (responseBody) {
        span.setAttribute(opentelemetry_base_1.AspectoAttributeNames.HTTP_RESPONSE_BODY, responseBody.getBody());
    }
};
const httpCustomAttributesOnRequest = (span, request) => {
    if (request instanceof http_1.ClientRequest) {
        const requestMimeType = request.getHeader('content-type');
        if (!opentelemetry_base_2.shouldCaptureBodyByMimeType(requestMimeType)) {
            span.setAttribute(opentelemetry_base_1.AspectoAttributeNames.HTTP_REQUEST_BODY, `Request body not collected due to unsupported mime type: ${requestMimeType}`);
            return;
        }
        let oldWrite = request.write;
        request[streamChunksKey] = new opentelemetry_base_2.StreamChunks();
        request.write = function (data) {
            const aspectoData = request[streamChunksKey];
            aspectoData === null || aspectoData === void 0 ? void 0 : aspectoData.addChunk(data);
            return oldWrite.call(request, data);
        };
    }
};
const httpCustomAttributesOnResponse = (span, response) => {
    var _a;
    if (response instanceof http_1.IncomingMessage) {
        const responseMimeType = (_a = response.headers) === null || _a === void 0 ? void 0 : _a['content-type'];
        if (!opentelemetry_base_2.shouldCaptureBodyByMimeType(responseMimeType)) {
            span.setAttribute(opentelemetry_base_1.AspectoAttributeNames.HTTP_RESPONSE_BODY, `Response body not collected due to unsupported mime type: ${responseMimeType}`);
            return;
        }
        response[streamChunksKey] = new opentelemetry_base_2.StreamChunks();
        const origPush = response.push;
        response.push = function (chunk) {
            if (chunk) {
                const aspectoData = response[streamChunksKey];
                aspectoData === null || aspectoData === void 0 ? void 0 : aspectoData.addChunk(chunk);
            }
            return origPush.apply(this, arguments);
        };
    }
};
exports.aspectoHttpPluginConfig = {
    applyCustomAttributesOnSpan: recording_span_1.callCapturePayloadHook(httpCustomAttributes),
    requestHook: recording_span_1.callCapturePayloadHook(httpCustomAttributesOnRequest),
    responseHook: recording_span_1.callCapturePayloadHook(httpCustomAttributesOnResponse),
};
//# sourceMappingURL=http.js.map