{"version":3,"file":"redis.js","sourceRoot":"","sources":["../../../src/plugins-customizations/redis.ts"],"names":[],"mappings":";;;AAEA,oEAAoE;AACpE,qDAA0D;AAG1D,MAAM,kBAAkB,GAAG,CAAC,IAAU,EAAE,EAAE,aAAa,EAAiC,EAAQ,EAAE;IAC9F,IAAI,aAAa,EAAE;QACf,IAAI,CAAC,YAAY,CAAC,0CAAqB,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC;KAC1E;AACL,CAAC,CAAC;AAEF,MAAM,8BAA8B,GAAG,CAAC,QAAa,EAAsB,EAAE;IACzE,IAAI,OAAO,QAAQ,KAAK,QAAQ,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;QAC9D,OAAO,QAAQ,CAAC;KACnB;IACD,IAAI,QAAQ,YAAY,MAAM,EAAE;QAC5B,OAAO,QAAQ,CAAC,QAAQ,EAAE,CAAC;KAC9B;IACD,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;QAC9B,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;KACnC;IACD,OAAO,SAAS,CAAC;AACrB,CAAC,CAAC;AAEF,MAAM,+BAA+B,GAAG,CACpC,IAAU,EACV,QAAgB,EAChB,QAAyC,EACzC,QAAa,EACT,EAAE;IACN,IAAI,eAAe,CAAC;IACpB,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;QACzB,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,8BAA8B,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KAC5F;SAAM;QACH,eAAe,GAAG,8BAA8B,CAAC,QAAQ,CAAC,CAAC;KAC9D;IAED,IAAI,eAAe,KAAK,SAAS,EAAE;QAC/B,IAAI,CAAC,YAAY,CAAC,0CAAqB,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC;KACzE;AACL,CAAC,CAAC;AAEW,QAAA,0BAA0B,GAAG;IACtC,WAAW,EAAE,kBAAkB;IAC/B,YAAY,EAAE,uCAAsB,CAAC,+BAA+B,CAAC;CACxE,CAAC;AAEW,QAAA,iBAAiB,GAAG;IAC7B,YAAY,EAAE,uCAAsB,CAAC,+BAA+B,CAAC;IACrE,qBAAqB,EAAE,CAAC,GAAG,EAAE,IAAI,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC;CACrH,CAAC","sourcesContent":["import { SpanAttributeValue } from '@opentelemetry/api';\nimport { Span } from '@opentelemetry/sdk-trace-base';\nimport { AspectoAttributeNames } from '@aspecto/opentelemetry-base';\nimport { callCapturePayloadHook } from './recording-span';\nimport { IORedisRequestHookInformation } from '@opentelemetry/instrumentation-ioredis/build/src/types';\n\nconst ioredisRequestHook = (span: Span, { moduleVersion }: IORedisRequestHookInformation): void => {\n    if (moduleVersion) {\n        span.setAttribute(AspectoAttributeNames.MODULE_VERSION, moduleVersion);\n    }\n};\n\nconst serializeAtomicResponsePayload = (response: any): SpanAttributeValue => {\n    if (typeof response === 'string' || typeof response === 'number') {\n        return response;\n    }\n    if (response instanceof Buffer) {\n        return response.toString();\n    }\n    if (typeof response === 'object') {\n        return JSON.stringify(response);\n    }\n    return undefined;\n};\n\nconst redisCustomAttributesOnResponse = (\n    span: Span,\n    _cmdName: string,\n    _cmdArgs: Array<string | Buffer | number>,\n    response: any\n): void => {\n    let responsePayload;\n    if (Array.isArray(response)) {\n        responsePayload = JSON.stringify(response.map((e) => serializeAtomicResponsePayload(e)));\n    } else {\n        responsePayload = serializeAtomicResponsePayload(response);\n    }\n\n    if (responsePayload !== undefined) {\n        span.setAttribute(AspectoAttributeNames.DB_RESPONSE, responsePayload);\n    }\n};\n\nexport const aspectoIoredisPluginConfig = {\n    requestHook: ioredisRequestHook,\n    responseHook: callCapturePayloadHook(redisCustomAttributesOnResponse),\n};\n\nexport const redisPluginConfig = {\n    responseHook: callCapturePayloadHook(redisCustomAttributesOnResponse),\n    dbStatementSerializer: (cmd, args = []) => (Array.isArray(args) && args.length ? `${cmd} ${args.join(' ')}` : cmd),\n};\n"]}