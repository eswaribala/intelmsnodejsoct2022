"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.nodeCacheInstrumentationConfig = void 0;
const opentelemetry_base_1 = require("@aspecto/opentelemetry-base");
const recording_span_1 = require("./recording-span");
const semantic_conventions_1 = require("@opentelemetry/semantic-conventions");
const collectPayload = !Boolean(process.env.ASPECTO_DISABLE_COLLECT_NODE_CACHE_PAYLOAD);
const requestHook = (span, { args, operation, moduleVersion }) => {
    span.setAttribute(opentelemetry_base_1.AspectoAttributeNames.MODULE_VERSION, moduleVersion);
    if (collectPayload) {
        if (operation === 'set') {
            span.setAttribute(semantic_conventions_1.SemanticAttributes.DB_STATEMENT, `set ${args[0]} ${JSON.stringify(args[1])}`);
        }
        if (operation === 'mset') {
            span.setAttribute(semantic_conventions_1.SemanticAttributes.DB_STATEMENT, `mset ${JSON.stringify(args[0])}`);
        }
    }
};
const serializePayload = (response) => {
    if (['string', 'number', 'boolean'].includes(typeof response)) {
        return response;
    }
    if (response instanceof Buffer) {
        return response.toString();
    }
    if (typeof response === 'object') {
        return JSON.stringify(response);
    }
    return undefined;
};
const responseHook = (span, { response }) => {
    if (collectPayload) {
        span.setAttribute(opentelemetry_base_1.AspectoAttributeNames.DB_RESPONSE, serializePayload(response));
    }
};
exports.nodeCacheInstrumentationConfig = {
    requireParentSpan: true,
    requestHook: recording_span_1.callCapturePayloadHook(requestHook),
    responseHook: recording_span_1.callCapturePayloadHook(responseHook),
};
//# sourceMappingURL=node-cache.js.map