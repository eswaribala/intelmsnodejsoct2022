{"version":3,"file":"http.js","sourceRoot":"","sources":["../../../src/plugins-customizations/http.ts"],"names":[],"mappings":"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","sourcesContent":["import { Span } from '@opentelemetry/api';\nimport { HttpInstrumentationConfig } from '@opentelemetry/instrumentation-http';\nimport { IncomingMessage, ServerResponse, ClientRequest } from 'http';\nimport { AspectoAttributeNames } from '@aspecto/opentelemetry-base';\nimport { StreamChunks, shouldCaptureBodyByMimeType } from '@aspecto/opentelemetry-base';\nimport { callCapturePayloadHook } from './recording-span';\nimport { httpHeadersToSpanAttributes } from './http-headers';\n\nconst streamChunksKey = Symbol('aspecto otel instrumentation StreamChunks');\n\nconst httpCustomAttributes = (\n    span: Span,\n    request: ClientRequest | IncomingMessage,\n    response: IncomingMessage | ServerResponse\n): void => {\n    if (request instanceof ClientRequest) {\n        const reqPath = request.path.split('?')[0];\n        span.setAttribute(AspectoAttributeNames.HTTP_PATH, reqPath);\n        span.setAttributes(httpHeadersToSpanAttributes('request', (request as ClientRequest).getHeaders()));\n    }\n    if (response instanceof IncomingMessage) {\n        span.setAttributes(httpHeadersToSpanAttributes('response', (response as IncomingMessage).headers));\n    }\n\n    const requestBody: StreamChunks = request[streamChunksKey];\n    if (requestBody) {\n        span.setAttribute(AspectoAttributeNames.HTTP_REQUEST_BODY, requestBody.getBody());\n    }\n\n    const responseBody: StreamChunks = response[streamChunksKey];\n    if (responseBody) {\n        span.setAttribute(AspectoAttributeNames.HTTP_RESPONSE_BODY, responseBody.getBody());\n    }\n};\n\nconst httpCustomAttributesOnRequest = (span: Span, request: ClientRequest | IncomingMessage): void => {\n    if (request instanceof ClientRequest) {\n        const requestMimeType = request.getHeader('content-type') as string;\n        if (!shouldCaptureBodyByMimeType(requestMimeType)) {\n            span.setAttribute(\n                AspectoAttributeNames.HTTP_REQUEST_BODY,\n                `Request body not collected due to unsupported mime type: ${requestMimeType}`\n            );\n            return;\n        }\n\n        let oldWrite = request.write;\n        request[streamChunksKey] = new StreamChunks();\n        request.write = function (data: any) {\n            const aspectoData: StreamChunks = request[streamChunksKey];\n            aspectoData?.addChunk(data);\n            return oldWrite.call(request, data);\n        };\n    }\n};\n\nconst httpCustomAttributesOnResponse = (span: Span, response: IncomingMessage | ServerResponse): void => {\n    if (response instanceof IncomingMessage) {\n        const responseMimeType = response.headers?.['content-type'] as string;\n        if (!shouldCaptureBodyByMimeType(responseMimeType)) {\n            span.setAttribute(\n                AspectoAttributeNames.HTTP_RESPONSE_BODY,\n                `Response body not collected due to unsupported mime type: ${responseMimeType}`\n            );\n            return;\n        }\n\n        response[streamChunksKey] = new StreamChunks();\n        const origPush = response.push;\n        response.push = function (chunk: any) {\n            if (chunk) {\n                const aspectoData: StreamChunks = response[streamChunksKey];\n                aspectoData?.addChunk(chunk);\n            }\n            return origPush.apply(this, arguments);\n        };\n    }\n};\n\nexport const aspectoHttpPluginConfig: HttpInstrumentationConfig = {\n    applyCustomAttributesOnSpan: callCapturePayloadHook(httpCustomAttributes),\n    requestHook: callCapturePayloadHook(httpCustomAttributesOnRequest),\n    responseHook: callCapturePayloadHook(httpCustomAttributesOnResponse),\n};\n"]}