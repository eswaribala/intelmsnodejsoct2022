{"version":3,"file":"mongodb.js","sourceRoot":"","sources":["../../../src/plugins-customizations/mongodb.ts"],"names":[],"mappings":"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","sourcesContent":["import sizeof from 'object-sizeof';\nimport { Span } from '@opentelemetry/sdk-trace-base';\nimport { AspectoAttributeNames } from '@aspecto/opentelemetry-base';\nimport {\n    DbStatementSerializer,\n    MongoDbInstrumentationConfig,\n    MongoDbResponseCustomAttributesFunction,\n    MongoDbGetMoreResponseHookInformation,\n    MongoDbGetMoreResponseAggregateFunction,\n} from '@aspecto/opentelemetry-instrumentation-mongodb';\nimport { callCapturePayloadHook } from './recording-span';\n\nconst AGGREGATE_CURSOR_PAYLOAD: unique symbol = Symbol('opentelemetry.mongodb.aggregate-cursor-payload');\nconst AGGREGATE_CURSOR_PAYLOAD_SIZE: unique symbol = Symbol('opentelemetry.mongodb.aggregate-cursor-payload-size');\nconst IS_AGGREGATE_CURSOR_PAYLOAD_FREEZED: unique symbol = Symbol(\n    'opentelemetry.mongodb.aggregate-cursor-payload-freezed'\n);\nconst AGGREGATE_PAYLOAD_SIZE_LIMIT = 500 * 1024; // 500 KB\n\nconst getStatement = (operation: string, payload: any) => {\n    if (operation === 'insert') {\n        // for insert/insertMany operations the payload contains inserted documents\n        return Array.isArray(payload) && payload.length === 1 ? payload[0] : payload;\n    }\n    if ((operation === 'update' || operation === 'remove') && Array.isArray(payload)) {\n        // for update and remove the payload is an array with one element (query + update + opts)\n        payload = payload[0];\n    }\n    // parse query (aka filter) and update statements from the payload\n    const query = payload.query ?? payload.q ?? payload;\n    const update = payload.update ?? payload.u;\n    return update ? { query, update } : query;\n};\n\nconst dbStatementSerializer: DbStatementSerializer = (operation: string, payload: any) => {\n    try {\n        return JSON.stringify(getStatement(operation, payload));\n    } catch {\n        return undefined;\n    }\n};\n\nconst parsePayload = (payload: any) => {\n    if (!payload || Array.isArray(payload) || typeof payload !== 'object') return payload;\n    return payload.result?.cursor?.firstBatch ?? payload.cursor?.nextBatch ?? payload.result ?? payload;\n};\n\nconst responseHook: MongoDbResponseCustomAttributesFunction = (span: Span, response: any) => {\n    const payload = parsePayload(response);\n    span.setAttribute(AspectoAttributeNames.DB_RESPONSE, JSON.stringify(payload));\n};\n\nconst aggregateGetMoreResponseHook: MongoDbGetMoreResponseAggregateFunction = (\n    span: Span,\n    responseInfo: MongoDbGetMoreResponseHookInformation\n) => {\n    const cursorState = responseInfo.cursorState as any;\n    const payload = parsePayload(responseInfo.payload);\n    const aggregatedPayload = cursorState[AGGREGATE_CURSOR_PAYLOAD] ?? [];\n    const aggregatedPayloadSize = cursorState[AGGREGATE_CURSOR_PAYLOAD_SIZE] ?? 0;\n    const isAggregatedPayloadFreezed = Boolean(cursorState[IS_AGGREGATE_CURSOR_PAYLOAD_FREEZED]);\n\n    if (payload && !isAggregatedPayloadFreezed) {\n        const calcAggregatedPayloadSize = aggregatedPayloadSize + sizeof(payload);\n\n        if (calcAggregatedPayloadSize < AGGREGATE_PAYLOAD_SIZE_LIMIT) {\n            if (Array.isArray(payload)) {\n                aggregatedPayload.push(...payload);\n            } else {\n                aggregatedPayload.push(payload);\n            }\n            cursorState[AGGREGATE_CURSOR_PAYLOAD] = aggregatedPayload;\n            cursorState[AGGREGATE_CURSOR_PAYLOAD_SIZE] = calcAggregatedPayloadSize;\n        } else {\n            cursorState[IS_AGGREGATE_CURSOR_PAYLOAD_FREEZED] = true;\n        }\n    }\n\n    if (cursorState.dead) {\n        // store aggregated response payload to a span when a cursor is closed.\n        span.setAttribute(AspectoAttributeNames.DB_RESPONSE, JSON.stringify(aggregatedPayload));\n    }\n};\n\nexport const aspectoMongodbPluginConfig: MongoDbInstrumentationConfig = {\n    dbStatementSerializer,\n    responseHook: callCapturePayloadHook(responseHook),\n    moduleVersionAttributeName: AspectoAttributeNames.MODULE_VERSION,\n    ignoreIsMasterCommand: true,\n    aggregateGetMoreOperations: true,\n    aggregateGetMoreResponseHook: callCapturePayloadHook(aggregateGetMoreResponseHook),\n};\n"]}