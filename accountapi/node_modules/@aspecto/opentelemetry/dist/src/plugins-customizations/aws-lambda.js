"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.awsLambdaInstrumentationConfig = void 0;
const semantic_conventions_1 = require("@opentelemetry/semantic-conventions");
const opentelemetry_base_1 = require("@aspecto/opentelemetry-base");
const api_1 = require("@opentelemetry/api");
const lambda_1 = require("../faas/lambda");
const pubsub_patcher_1 = require("../faas/lambda/pubsub-patcher");
const trigger_attributes_1 = require("../faas/lambda/trigger-attributes");
const clean_stack_trace_1 = require("../faas/clean-stack-trace");
const http_headers_1 = require("./http-headers");
exports.awsLambdaInstrumentationConfig = {
    requestHook: (span, { event, context }) => {
        const entryAttributes = {
            [semantic_conventions_1.SemanticResourceAttributes.CLOUD_PROVIDER]: 'aws',
            [semantic_conventions_1.SemanticResourceAttributes.CLOUD_REGION]: process.env.AWS_REGION,
            [semantic_conventions_1.SemanticResourceAttributes.FAAS_NAME]: context.functionName,
            [semantic_conventions_1.SemanticResourceAttributes.FAAS_VERSION]: context.functionVersion,
            [semantic_conventions_1.SemanticResourceAttributes.FAAS_INSTANCE]: lambda_1.getInstanceFromContext(context),
        };
        const triggerAttributes = trigger_attributes_1.getTriggerSpecificAttributes(event);
        if (trigger_attributes_1.isSqs(event)) {
            pubsub_patcher_1.patchSqsRecords({
                messages: event.Records,
                faasRootContext: api_1.trace.setSpan(api_1.context.active(), span),
                queueName: triggerAttributes[semantic_conventions_1.SemanticAttributes.MESSAGING_DESTINATION],
                queueUrl: triggerAttributes[semantic_conventions_1.SemanticAttributes.MESSAGING_URL],
            });
        }
        else if (trigger_attributes_1.isSns(event)) {
            pubsub_patcher_1.patchSnsRecords({
                messages: event.Records,
                faasRootContext: api_1.trace.setSpan(api_1.context.active(), span),
                topicName: triggerAttributes[semantic_conventions_1.SemanticAttributes.MESSAGING_DESTINATION],
            });
            triggerAttributes;
        }
        span.setAttributes(Object.assign(Object.assign({}, entryAttributes), triggerAttributes));
    },
    responseHook: (span, { err, res }) => {
        var _a;
        try {
            if (res) {
                if (span.attributes[semantic_conventions_1.SemanticAttributes.FAAS_TRIGGER] === 'http') {
                    span.setAttributes(Object.assign({ [semantic_conventions_1.SemanticAttributes.HTTP_STATUS_CODE]: res === null || res === void 0 ? void 0 : res.statusCode, [opentelemetry_base_1.AspectoAttributeNames.HTTP_RESPONSE_BODY]: (_a = res === null || res === void 0 ? void 0 : res.body) !== null && _a !== void 0 ? _a : '' }, http_headers_1.httpHeadersToSpanAttributes('response', res === null || res === void 0 ? void 0 : res.headers)));
                }
                else {
                    span.setAttribute(opentelemetry_base_1.LambdaAttributes.RESPONSE, JSON.stringify(res));
                }
            }
            else {
                if (err instanceof Error) {
                    clean_stack_trace_1.cleanStackTrace(err);
                }
                span.setAttribute(opentelemetry_base_1.LambdaAttributes.RESPONSE, null);
            }
        }
        catch (_b) {
            // noop
        }
    },
    disableAwsContextPropagation: true,
};
//# sourceMappingURL=aws-lambda.js.map