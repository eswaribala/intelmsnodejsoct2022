"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.redisPluginConfig = exports.aspectoIoredisPluginConfig = void 0;
const opentelemetry_base_1 = require("@aspecto/opentelemetry-base");
const recording_span_1 = require("./recording-span");
const ioredisRequestHook = (span, { moduleVersion }) => {
    if (moduleVersion) {
        span.setAttribute(opentelemetry_base_1.AspectoAttributeNames.MODULE_VERSION, moduleVersion);
    }
};
const serializeAtomicResponsePayload = (response) => {
    if (typeof response === 'string' || typeof response === 'number') {
        return response;
    }
    if (response instanceof Buffer) {
        return response.toString();
    }
    if (typeof response === 'object') {
        return JSON.stringify(response);
    }
    return undefined;
};
const redisCustomAttributesOnResponse = (span, _cmdName, _cmdArgs, response) => {
    let responsePayload;
    if (Array.isArray(response)) {
        responsePayload = JSON.stringify(response.map((e) => serializeAtomicResponsePayload(e)));
    }
    else {
        responsePayload = serializeAtomicResponsePayload(response);
    }
    if (responsePayload !== undefined) {
        span.setAttribute(opentelemetry_base_1.AspectoAttributeNames.DB_RESPONSE, responsePayload);
    }
};
exports.aspectoIoredisPluginConfig = {
    requestHook: ioredisRequestHook,
    responseHook: recording_span_1.callCapturePayloadHook(redisCustomAttributesOnResponse),
};
exports.redisPluginConfig = {
    responseHook: recording_span_1.callCapturePayloadHook(redisCustomAttributesOnResponse),
    dbStatementSerializer: (cmd, args = []) => (Array.isArray(args) && args.length ? `${cmd} ${args.join(' ')}` : cmd),
};
//# sourceMappingURL=redis.js.map