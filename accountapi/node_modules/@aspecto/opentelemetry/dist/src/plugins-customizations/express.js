"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.expressInstrumentationConfig = exports.requestHook = void 0;
const opentelemetry_base_1 = require("@aspecto/opentelemetry-base");
const opentelemetry_base_2 = require("@aspecto/opentelemetry-base");
const recording_span_1 = require("./recording-span");
const http_headers_1 = require("./http-headers");
exports.requestHook = (span, { moduleVersion, req, res }) => {
    span.setAttribute(opentelemetry_base_1.AspectoAttributeNames.HTTP_PATH, req.path);
    span.setAttributes(http_headers_1.httpHeadersToSpanAttributes('request', req.headers));
    if (moduleVersion) {
        span.setAttribute(opentelemetry_base_1.AspectoAttributeNames.MODULE_VERSION, moduleVersion);
    }
    if (recording_span_1.shouldCapturePayload(span)) {
        const requestMimeType = req.get('content-type');
        const captureRequestBody = opentelemetry_base_2.shouldCaptureBodyByMimeType(requestMimeType);
        const requestStreamChunks = new opentelemetry_base_2.StreamChunks();
        if (captureRequestBody) {
            // we don't want to use req.on('data') as it puts the stream into a flowing mode
            // which starts consuming data, possible before user has chance to read it
            const origPush = req.push;
            req.push = function (chunk) {
                if (chunk) {
                    requestStreamChunks.addChunk(chunk);
                }
                return origPush.apply(this, arguments);
            };
        }
        const originalResWrite = res.write;
        const oldResEnd = res.end;
        const responseStreamChunks = new opentelemetry_base_2.StreamChunks();
        res.write = function (chunk) {
            responseStreamChunks.addChunk(chunk);
            originalResWrite.apply(res, arguments);
        };
        res.end = function (chunk) {
            const resEndResponse = oldResEnd.apply(res, arguments);
            const responseMimeType = res.get('content-type');
            const captureResponseBody = opentelemetry_base_2.shouldCaptureBodyByMimeType(responseMimeType);
            if (captureResponseBody)
                responseStreamChunks.addChunk(chunk);
            span.setAttributes(http_headers_1.httpHeadersToSpanAttributes('response', res.getHeaders()));
            span.setAttributes({
                [opentelemetry_base_1.AspectoAttributeNames.HTTP_REQUEST_BODY]: captureRequestBody
                    ? requestStreamChunks.getBody()
                    : `Request body not collected due to unsupported mime type: ${requestMimeType}`,
                [opentelemetry_base_1.AspectoAttributeNames.HTTP_RESPONSE_BODY]: captureResponseBody
                    ? responseStreamChunks.getBody()
                    : `Response body not collected due to unsupported mime type: ${responseMimeType}`,
            });
            return resEndResponse;
        };
    }
};
exports.expressInstrumentationConfig = {
    requestHook: exports.requestHook,
    includeHttpAttributes: true,
};
//# sourceMappingURL=express.js.map