{"version":3,"file":"express.js","sourceRoot":"","sources":["../../../src/plugins-customizations/express.ts"],"names":[],"mappings":";;;AACA,oEAAoE;AACpE,oEAAwF;AACxF,qDAAwD;AAExD,iDAA6D;AAEhD,QAAA,WAAW,GAAG,CAAC,IAAU,EAAE,EAAE,aAAa,EAAE,GAAG,EAAE,GAAG,EAAiC,EAAE,EAAE;IAClG,IAAI,CAAC,YAAY,CAAC,0CAAqB,CAAC,SAAS,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;IAC7D,IAAI,CAAC,aAAa,CAAC,0CAA2B,CAAC,SAAS,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC;IAExE,IAAI,aAAa,EAAE;QACf,IAAI,CAAC,YAAY,CAAC,0CAAqB,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC;KAC1E;IAED,IAAI,qCAAoB,CAAC,IAAI,CAAC,EAAE;QAC5B,MAAM,eAAe,GAAG,GAAG,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;QAChD,MAAM,kBAAkB,GAAG,gDAA2B,CAAC,eAAe,CAAC,CAAC;QACxE,MAAM,mBAAmB,GAAG,IAAI,iCAAY,EAAE,CAAC;QAC/C,IAAI,kBAAkB,EAAE;YACpB,gFAAgF;YAChF,0EAA0E;YAC1E,MAAM,QAAQ,GAAG,GAAG,CAAC,IAAI,CAAC;YAC1B,GAAG,CAAC,IAAI,GAAG,UAAU,KAAU;gBAC3B,IAAI,KAAK,EAAE;oBACP,mBAAmB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;iBACvC;gBACD,OAAO,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;YAC3C,CAAC,CAAC;SACL;QAED,MAAM,gBAAgB,GAAG,GAAG,CAAC,KAAK,CAAC;QACnC,MAAM,SAAS,GAAG,GAAG,CAAC,GAAG,CAAC;QAE1B,MAAM,oBAAoB,GAAG,IAAI,iCAAY,EAAE,CAAC;QAE/C,GAAW,CAAC,KAAK,GAAG,UAAU,KAAU;YACrC,oBAAoB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACrC,gBAAgB,CAAC,KAAK,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;QAC3C,CAAC,CAAC;QAEF,GAAG,CAAC,GAAG,GAAG,UAAU,KAAU;YAC1B,MAAM,cAAc,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;YAEvD,MAAM,gBAAgB,GAAG,GAAG,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;YACjD,MAAM,mBAAmB,GAAG,gDAA2B,CAAC,gBAAgB,CAAC,CAAC;YAC1E,IAAI,mBAAmB;gBAAE,oBAAoB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAE9D,IAAI,CAAC,aAAa,CAAC,0CAA2B,CAAC,UAAU,EAAE,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;YAC9E,IAAI,CAAC,aAAa,CAAC;gBACf,CAAC,0CAAqB,CAAC,iBAAiB,CAAC,EAAE,kBAAkB;oBACzD,CAAC,CAAC,mBAAmB,CAAC,OAAO,EAAE;oBAC/B,CAAC,CAAC,4DAA4D,eAAe,EAAE;gBACnF,CAAC,0CAAqB,CAAC,kBAAkB,CAAC,EAAE,mBAAmB;oBAC3D,CAAC,CAAC,oBAAoB,CAAC,OAAO,EAAE;oBAChC,CAAC,CAAC,6DAA6D,gBAAgB,EAAE;aACxF,CAAC,CAAC;YAEH,OAAO,cAAc,CAAC;QAC1B,CAAC,CAAC;KACL;AACL,CAAC,CAAC;AAEW,QAAA,4BAA4B,GAAiC;IACtE,WAAW,EAAE,mBAAW;IACxB,qBAAqB,EAAE,IAAI;CAC9B,CAAC","sourcesContent":["import { ExpressInstrumentationConfig, ExpressRequestHookInformation } from 'opentelemetry-instrumentation-express';\nimport { AspectoAttributeNames } from '@aspecto/opentelemetry-base';\nimport { StreamChunks, shouldCaptureBodyByMimeType } from '@aspecto/opentelemetry-base';\nimport { shouldCapturePayload } from './recording-span';\nimport { Span } from '@opentelemetry/api';\nimport { httpHeadersToSpanAttributes } from './http-headers';\n\nexport const requestHook = (span: Span, { moduleVersion, req, res }: ExpressRequestHookInformation) => {\n    span.setAttribute(AspectoAttributeNames.HTTP_PATH, req.path);\n    span.setAttributes(httpHeadersToSpanAttributes('request', req.headers));\n\n    if (moduleVersion) {\n        span.setAttribute(AspectoAttributeNames.MODULE_VERSION, moduleVersion);\n    }\n\n    if (shouldCapturePayload(span)) {\n        const requestMimeType = req.get('content-type');\n        const captureRequestBody = shouldCaptureBodyByMimeType(requestMimeType);\n        const requestStreamChunks = new StreamChunks();\n        if (captureRequestBody) {\n            // we don't want to use req.on('data') as it puts the stream into a flowing mode\n            // which starts consuming data, possible before user has chance to read it\n            const origPush = req.push;\n            req.push = function (chunk: any) {\n                if (chunk) {\n                    requestStreamChunks.addChunk(chunk);\n                }\n                return origPush.apply(this, arguments);\n            };\n        }\n\n        const originalResWrite = res.write;\n        const oldResEnd = res.end;\n\n        const responseStreamChunks = new StreamChunks();\n\n        (res as any).write = function (chunk: any) {\n            responseStreamChunks.addChunk(chunk);\n            originalResWrite.apply(res, arguments);\n        };\n\n        res.end = function (chunk: any) {\n            const resEndResponse = oldResEnd.apply(res, arguments);\n\n            const responseMimeType = res.get('content-type');\n            const captureResponseBody = shouldCaptureBodyByMimeType(responseMimeType);\n            if (captureResponseBody) responseStreamChunks.addChunk(chunk);\n\n            span.setAttributes(httpHeadersToSpanAttributes('response', res.getHeaders()));\n            span.setAttributes({\n                [AspectoAttributeNames.HTTP_REQUEST_BODY]: captureRequestBody\n                    ? requestStreamChunks.getBody()\n                    : `Request body not collected due to unsupported mime type: ${requestMimeType}`,\n                [AspectoAttributeNames.HTTP_RESPONSE_BODY]: captureResponseBody\n                    ? responseStreamChunks.getBody()\n                    : `Response body not collected due to unsupported mime type: ${responseMimeType}`,\n            });\n\n            return resEndResponse;\n        };\n    }\n};\n\nexport const expressInstrumentationConfig: ExpressInstrumentationConfig = {\n    requestHook: requestHook,\n    includeHttpAttributes: true,\n};\n"]}