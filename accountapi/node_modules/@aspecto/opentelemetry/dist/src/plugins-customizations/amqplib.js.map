{"version":3,"file":"amqplib.js","sourceRoot":"","sources":["../../../src/plugins-customizations/amqplib.ts"],"names":[],"mappings":";;;AAAA,8DAA6E;AAC7E,oEAAyE;AAQzE,qDAA0D;AAE1D,MAAM,kBAAkB,GAAG,CAAC,IAAU,EAAE,WAAwB,EAAE,EAAE;IAChE,IAAI,WAAW,CAAC,OAAO,KAAK,SAAS,EAAE;QACnC,IAAI,CAAC,YAAY,CAAC,+CAA0B,CAAC,iBAAiB,EAAE,WAAW,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;KACnG;IACD,IAAI,WAAW,CAAC,aAAa,EAAE;QAC3B,IAAI,CAAC,YAAY,CAAC,2BAAqB,CAAC,cAAc,EAAE,WAAW,CAAC,aAAa,CAAC,CAAC;KACtF;AACL,CAAC,CAAC;AAEF,MAAM,kBAAkB,GAAG,CAAC,IAAU,EAAE,WAAwB,EAAE,EAAE;;IAChE,IAAI,OAAA,WAAW,CAAC,GAAG,0CAAE,OAAO,MAAK,SAAS,EAAE;QACxC,IAAI,CAAC,YAAY,CAAC,+CAA0B,CAAC,iBAAiB,EAAE,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;KACvG;IACD,IAAI,WAAW,CAAC,aAAa,EAAE;QAC3B,IAAI,CAAC,YAAY,CAAC,2BAAqB,CAAC,cAAc,EAAE,WAAW,CAAC,aAAa,CAAC,CAAC;KACtF;AACL,CAAC,CAAC;AAEF,MAAM,qBAAqB,GAAG,CAAC,IAAU,EAAE,cAA8B,EAAE,EAAE;IACzE,IAAI,CAAC,YAAY,CAAC,+CAA0B,CAAC,wCAAwC,EAAE,cAAc,CAAC,YAAY,CAAC,CAAC;AACxH,CAAC,CAAC;AAEW,QAAA,0BAA0B,GAAiC;IACpE,WAAW,EAAE,uCAAsB,CAAC,kBAAkB,CAAC;IACvD,WAAW,EAAE,uCAAsB,CAAC,kBAAkB,CAAC;IACvD,cAAc,EAAE,qBAAqB;CACxC,CAAC","sourcesContent":["import { AspectoAttributeNames } from '@aspecto/opentelemetry-base/dist/src';\nimport { MessagingExtendedAttribute } from '@aspecto/opentelemetry-base';\nimport { Span } from '@opentelemetry/api';\nimport {\n    AmqplibInstrumentationConfig,\n    PublishInfo,\n    ConsumeEndInfo,\n    ConsumeInfo,\n} from '@opentelemetry/instrumentation-amqplib';\nimport { callCapturePayloadHook } from './recording-span';\n\nconst amqplibPublishHook = (span: Span, publishInfo: PublishInfo) => {\n    if (publishInfo.content !== undefined) {\n        span.setAttribute(MessagingExtendedAttribute.MESSAGING_PAYLOAD, publishInfo.content.toString());\n    }\n    if (publishInfo.moduleVersion) {\n        span.setAttribute(AspectoAttributeNames.MODULE_VERSION, publishInfo.moduleVersion);\n    }\n};\n\nconst amqplibConsumeHook = (span: Span, consumeInfo: ConsumeInfo) => {\n    if (consumeInfo.msg?.content !== undefined) {\n        span.setAttribute(MessagingExtendedAttribute.MESSAGING_PAYLOAD, consumeInfo.msg.content.toString());\n    }\n    if (consumeInfo.moduleVersion) {\n        span.setAttribute(AspectoAttributeNames.MODULE_VERSION, consumeInfo.moduleVersion);\n    }\n};\n\nconst amqplibConsumeEndHook = (span: Span, consumeEndInfo: ConsumeEndInfo) => {\n    span.setAttribute(MessagingExtendedAttribute.MESSAGING_RABBITMQ_CONSUME_END_OPERATION, consumeEndInfo.endOperation);\n};\n\nexport const aspectoAmqplibPluginConfig: AmqplibInstrumentationConfig = {\n    publishHook: callCapturePayloadHook(amqplibPublishHook),\n    consumeHook: callCapturePayloadHook(amqplibConsumeHook),\n    consumeEndHook: amqplibConsumeEndHook,\n};\n"]}