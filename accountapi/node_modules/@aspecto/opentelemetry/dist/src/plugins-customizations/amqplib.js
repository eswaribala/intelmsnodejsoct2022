"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.aspectoAmqplibPluginConfig = void 0;
const src_1 = require("@aspecto/opentelemetry-base/dist/src");
const opentelemetry_base_1 = require("@aspecto/opentelemetry-base");
const recording_span_1 = require("./recording-span");
const amqplibPublishHook = (span, publishInfo) => {
    if (publishInfo.content !== undefined) {
        span.setAttribute(opentelemetry_base_1.MessagingExtendedAttribute.MESSAGING_PAYLOAD, publishInfo.content.toString());
    }
    if (publishInfo.moduleVersion) {
        span.setAttribute(src_1.AspectoAttributeNames.MODULE_VERSION, publishInfo.moduleVersion);
    }
};
const amqplibConsumeHook = (span, consumeInfo) => {
    var _a;
    if (((_a = consumeInfo.msg) === null || _a === void 0 ? void 0 : _a.content) !== undefined) {
        span.setAttribute(opentelemetry_base_1.MessagingExtendedAttribute.MESSAGING_PAYLOAD, consumeInfo.msg.content.toString());
    }
    if (consumeInfo.moduleVersion) {
        span.setAttribute(src_1.AspectoAttributeNames.MODULE_VERSION, consumeInfo.moduleVersion);
    }
};
const amqplibConsumeEndHook = (span, consumeEndInfo) => {
    span.setAttribute(opentelemetry_base_1.MessagingExtendedAttribute.MESSAGING_RABBITMQ_CONSUME_END_OPERATION, consumeEndInfo.endOperation);
};
exports.aspectoAmqplibPluginConfig = {
    publishHook: recording_span_1.callCapturePayloadHook(amqplibPublishHook),
    consumeHook: recording_span_1.callCapturePayloadHook(amqplibConsumeHook),
    consumeEndHook: amqplibConsumeEndHook,
};
//# sourceMappingURL=amqplib.js.map