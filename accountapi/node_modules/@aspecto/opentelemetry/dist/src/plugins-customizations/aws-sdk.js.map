{"version":3,"file":"aws-sdk.js","sourceRoot":"","sources":["../../../src/plugins-customizations/aws-sdk.ts"],"names":[],"mappings":";;;AACA,oEAAgG;AAChG,qDAAgF;AAQhF,sCAA0C;AAM1C,MAAM,eAAe,GAA6B;IAC9C,GAAG,EAAE,CAAC,UAAU,EAAE,cAAc,EAAE,qBAAqB,EAAE,iBAAiB,CAAC;IAC3E,EAAE,EAAE,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,aAAa,EAAE,qBAAqB,CAAC;IAClE,GAAG,EAAE,CAAC,UAAU,CAAC;IACjB,OAAO,EAAE,CAAC,YAAY,EAAE,cAAc,CAAC;IACvC,QAAQ,EAAE,CAAC,oBAAoB,CAAC;IAChC,GAAG,EAAE,CAAC,YAAY,CAAC;IACnB,GAAG,EAAE,CAAC,MAAM,CAAC;IACb,MAAM,EAAE,CAAC,cAAc,CAAC;IACxB,MAAM,EAAE,CAAC,WAAW,EAAE,aAAa,CAAC;IACpC,GAAG,EAAE,CAAC,SAAS,CAAC;CACnB,CAAC;AAEF,MAAM,2BAA2B,GAAG,CAAC,WAAmB,EAAE,aAAkC,EAAuB,EAAE;IACjH,MAAM,eAAe,GAAa,eAAe,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC;IAC7E,IAAI,CAAC,eAAe,IAAI,CAAC,aAAa;QAAE,OAAO;IAE/C,OAAO,eAAe,CAAC,MAAM,CAAC,CAAC,eAAoC,EAAE,aAAqB,EAAE,EAAE;QAC1F,MAAM,GAAG,GAAG,aAAa,CAAC,aAAa,CAAC,CAAC;QACzC,IAAI,GAAG,KAAK,SAAS,EAAE;YACnB,eAAe,CAAC,aAAa,CAAC,GAAG,GAAG,CAAC;SACxC;QACD,OAAO,eAAe,CAAC;IAC3B,CAAC,EAAE,EAAE,CAAC,CAAC;AACX,CAAC,CAAC;AAEF,MAAM,aAAa,GAAG,CAAC,IAAU,EAAE,OAA0B,EAAE,EAAE;;IAC7D,IAAI,OAAO,CAAC;IACZ,QAAQ,OAAO,CAAC,WAAW,EAAE;QACzB,KAAK,aAAa,CAAC,CAAC;YAChB,OAAO,SAAG,OAAO,CAAC,YAAY,0CAAE,WAAW,CAAC;YAC5C,IAAI,OAAO,OAAO,KAAK,QAAQ;gBAAE,OAAO;YACxC,MAAM;SACT;QAED,KAAK,kBAAkB,CAAC,CAAC;YACrB,IAAI,eAAe,eAAG,OAAO,CAAC,YAAY,0CAAE,OAAO,0CAAE,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;gBACjE,KAAK,EAAE,KAAK,CAAC,EAAE;gBACf,OAAO,EAAE,KAAK,CAAC,WAAW;aAC7B,CAAC,CAAC,CAAC;YACJ,IAAI;gBACA,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;aAC7C;YAAC,WAAM,GAAE;YACV,MAAM;SACT;KACJ;IAED,IAAI,OAAO,KAAK,SAAS;QAAE,OAAO;IAClC,IAAI,CAAC,YAAY,CAAC,0CAAqB,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC;AACxE,CAAC,CAAC;AAEF,MAAM,iBAAiB,GAAG,CAAC,IAAU,EAAE,WAAyC,EAAE,EAAE;IAChF,IAAI,CAAC,YAAY,CAAC,0CAAqB,CAAC,cAAc,EAAE,WAAW,CAAC,aAAa,CAAC,CAAC;IACnF,MAAM,cAAc,GAAG,2BAA2B,CAC9C,WAAW,CAAC,OAAO,CAAC,WAAW,EAC/B,WAAW,CAAC,OAAO,CAAC,YAAY,CACnC,CAAC;IACF,IAAI,cAAc,EAAE;QAChB,IAAI;YACA,IAAI,CAAC,YAAY,gDAAoC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC,CAAC;SACxF;QAAC,WAAM,GAAE;KACb;IAED,QAAQ,WAAW,CAAC,OAAO,CAAC,WAAW,EAAE;QACrC,KAAK,KAAK;YACN,IAAI,qCAAoB,CAAC,IAAI,CAAC,EAAE;gBAC5B,aAAa,CAAC,IAAI,EAAE,WAAW,CAAC,OAAO,CAAC,CAAC;aAC5C;YACD,MAAM;KACb;AACL,CAAC,CAAC;AAEF,MAAM,kBAAkB,GAAG,CAAC,IAAU,EAAE,YAA2C,EAAE,EAAE;;IACnF,MAAM,EAAE,QAAQ,EAAE,GAAG,YAAY,CAAC;IAClC,QAAQ,QAAQ,CAAC,OAAO,CAAC,WAAW,EAAE;QAClC,KAAK,UAAU;YACX,IAAI,OAAO,QAAQ,CAAC,IAAI,KAAK,QAAQ;gBAAE,OAAO;YAC9C,IAAI,qCAAoB,CAAC,IAAI,CAAC,EAAE;gBAC5B,IAAI,CAAC,YAAY,CAAC,0CAAqB,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;aACvF;YACD,MAAM;QACV,KAAK,KAAK;YACN,IAAI,QAAQ,CAAC,OAAO,CAAC,WAAW,KAAK,gBAAgB,EAAE;gBACnD,MAAM,aAAa,qBAAG,QAAQ,CAAC,IAAI,0CAAE,QAAQ,0CAAE,MAAM,mCAAI,CAAC,CAAC;gBAC3D,IAAI,CAAC,YAAY,CAAC,+CAA0B,CAAC,4BAA4B,EAAE,aAAa,CAAC,CAAC;aAC7F;YACD,MAAM;KACb;AACL,CAAC,CAAC;AAEF,MAAM,wBAAwB,GAA4C,CAAC,IAAI,EAAE,cAAc,EAAE,EAAE;;IAC/F,MAAM,OAAO,SAAG,cAAc,CAAC,OAAO,0CAAE,IAAI,CAAC;IAC7C,IAAI,OAAO,KAAK,SAAS;QAAE,OAAO;IAClC,IAAI,CAAC,YAAY,CAAC,0CAAqB,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC;AACxE,CAAC,CAAC;AAEF,4FAA4F;AAC/E,QAAA,4BAA4B,GAAG,GAAgC,EAAE,CAAC,CAAC;IAC5E,cAAc,EAAE,iBAAiB;IACjC,YAAY,EAAE,kBAAkB;IAChC,cAAc,EAAE,uCAAsB,CAAC,wBAAwB,CAAC;IAChE,+BAA+B,EAAE,IAAI;IACrC,uCAAuC,EAAE,sBAAa,CAAC,uCAAuC;CACjG,CAAC,CAAC","sourcesContent":["import { Span } from '@opentelemetry/sdk-trace-base';\nimport { AspectoAttributeNames, MessagingExtendedAttribute } from '@aspecto/opentelemetry-base';\nimport { callCapturePayloadHook, shouldCapturePayload } from './recording-span';\nimport {\n    AwsSdkInstrumentationConfig,\n    AwsSdkRequestHookInformation,\n    AwsSdkResponseHookInformation,\n    AwsSdkSqsProcessCustomAttributeFunction,\n    NormalizedRequest,\n} from '@opentelemetry/instrumentation-aws-sdk';\nimport { AspectoConfig } from '../config';\n\nconst enum AttributeNames {\n    AWS_REQUEST_PARAMS = 'aws.request.params',\n}\n\nconst whiteListParams: Record<string, string[]> = {\n    sqs: ['QueueUrl', 'DelaySeconds', 'MaxNumberOfMessages', 'WaitTimeSeconds'],\n    s3: ['Bucket', 'Key', 'ACL', 'ContentType', 'ResponseContentType'],\n    sns: ['TopicArn'],\n    kinesis: ['StreamName', 'PartitionKey'],\n    firehose: ['DeliveryStreamName'],\n    ebs: ['SnapshotId'],\n    ssm: ['Name'],\n    lambda: ['FunctionName'],\n    athena: ['WorkGroup', 'QueryString'],\n    sts: ['RoleArn'],\n};\n\nconst getRequestWhitelistedParams = (serviceName: string, requestParams: Record<string, any>): Record<string, any> => {\n    const paramsToCapture: string[] = whiteListParams[serviceName.toLowerCase()];\n    if (!paramsToCapture || !requestParams) return;\n\n    return paramsToCapture.reduce((whiteListParams: Record<string, any>, currParamName: string) => {\n        const val = requestParams[currParamName];\n        if (val !== undefined) {\n            whiteListParams[currParamName] = val;\n        }\n        return whiteListParams;\n    }, {});\n};\n\nconst addSqsPayload = (span: Span, request: NormalizedRequest) => {\n    let payload;\n    switch (request.commandName) {\n        case 'SendMessage': {\n            payload = request.commandInput?.MessageBody;\n            if (typeof payload !== 'string') return;\n            break;\n        }\n\n        case 'SendMessageBatch': {\n            let messagesPayload = request.commandInput?.Entries?.map((entry) => ({\n                msgId: entry.Id,\n                payload: entry.MessageBody,\n            }));\n            try {\n                payload = JSON.stringify(messagesPayload);\n            } catch {}\n            break;\n        }\n    }\n\n    if (payload === undefined) return;\n    span.setAttribute(AspectoAttributeNames.MESSAGING_PAYLOAD, payload);\n};\n\nconst awsSdkRequestHook = (span: Span, requestInfo: AwsSdkRequestHookInformation) => {\n    span.setAttribute(AspectoAttributeNames.MODULE_VERSION, requestInfo.moduleVersion);\n    const paramsToAttach = getRequestWhitelistedParams(\n        requestInfo.request.serviceName,\n        requestInfo.request.commandInput\n    );\n    if (paramsToAttach) {\n        try {\n            span.setAttribute(AttributeNames.AWS_REQUEST_PARAMS, JSON.stringify(paramsToAttach));\n        } catch {}\n    }\n\n    switch (requestInfo.request.serviceName) {\n        case 'SQS':\n            if (shouldCapturePayload(span)) {\n                addSqsPayload(span, requestInfo.request);\n            }\n            break;\n    }\n};\n\nconst awsSdkResponseHook = (span: Span, responseInfo: AwsSdkResponseHookInformation) => {\n    const { response } = responseInfo;\n    switch (response.request.serviceName) {\n        case 'DynamoDB':\n            if (typeof response.data !== 'object') return;\n            if (shouldCapturePayload(span)) {\n                span.setAttribute(AspectoAttributeNames.DB_RESPONSE, JSON.stringify(response.data));\n            }\n            break;\n        case 'SQS':\n            if (response.request.commandName === 'ReceiveMessage') {\n                const numOfMessages = response.data?.Messages?.length ?? 0;\n                span.setAttribute(MessagingExtendedAttribute.MESSAGING_NUMBER_OF_MESSAGES, numOfMessages);\n            }\n            break;\n    }\n};\n\nconst sqsProcessCapturePayload: AwsSdkSqsProcessCustomAttributeFunction = (span, sqsProcessInfo) => {\n    const payload = sqsProcessInfo.message?.Body;\n    if (payload === undefined) return;\n    span.setAttribute(AspectoAttributeNames.MESSAGING_PAYLOAD, payload);\n};\n\n// making it a function instead of object so it evaluate AspectoConfig options at right time\nexport const getAspectoAwsSdkPluginConfig = (): AwsSdkInstrumentationConfig => ({\n    preRequestHook: awsSdkRequestHook,\n    responseHook: awsSdkResponseHook,\n    sqsProcessHook: callCapturePayloadHook(sqsProcessCapturePayload),\n    suppressInternalInstrumentation: true,\n    sqsExtractContextPropagationFromPayload: AspectoConfig.sqsExtractContextPropagationFromPayload,\n});\n"]}