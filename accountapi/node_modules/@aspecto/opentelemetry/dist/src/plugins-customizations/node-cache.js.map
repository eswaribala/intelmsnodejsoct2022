{"version":3,"file":"node-cache.js","sourceRoot":"","sources":["../../../src/plugins-customizations/node-cache.ts"],"names":[],"mappings":";;;AACA,oEAAoE;AACpE,qDAA0D;AAC1D,8EAAyE;AAGzE,MAAM,cAAc,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,0CAA0C,CAAC,CAAC;AAExF,MAAM,WAAW,GAAkD,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,aAAa,EAAE,EAAE,EAAE;IAC5G,IAAI,CAAC,YAAY,CAAC,0CAAqB,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC;IACvE,IAAI,cAAc,EAAE;QAChB,IAAI,SAAS,KAAK,KAAK,EAAE;YACrB,IAAI,CAAC,YAAY,CAAC,yCAAkB,CAAC,YAAY,EAAE,OAAO,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;SACnG;QACD,IAAI,SAAS,KAAK,MAAM,EAAE;YACtB,IAAI,CAAC,YAAY,CAAC,yCAAkB,CAAC,YAAY,EAAE,QAAQ,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;SACzF;KACJ;AACL,CAAC,CAAC;AAEF,MAAM,gBAAgB,GAAG,CAAC,QAAa,EAAsB,EAAE;IAC3D,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC,QAAQ,CAAC,OAAO,QAAQ,CAAC,EAAE;QAC3D,OAAO,QAAQ,CAAC;KACnB;IACD,IAAI,QAAQ,YAAY,MAAM,EAAE;QAC5B,OAAO,QAAQ,CAAC,QAAQ,EAAE,CAAC;KAC9B;IACD,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;QAC9B,OAAO,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;KACnC;IACD,OAAO,SAAS,CAAC;AACrB,CAAC,CAAC;AAEF,MAAM,YAAY,GAAmD,CAAC,IAAI,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE;IACxF,IAAI,cAAc,EAAE;QAChB,IAAI,CAAC,YAAY,CAAC,0CAAqB,CAAC,WAAW,EAAE,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC;KACpF;AACL,CAAC,CAAC;AAEW,QAAA,8BAA8B,GAAmC;IAC1E,iBAAiB,EAAE,IAAI;IACvB,WAAW,EAAE,uCAAsB,CAAC,WAAW,CAAC;IAChD,YAAY,EAAE,uCAAsB,CAAC,YAAY,CAAC;CACrD,CAAC","sourcesContent":["import { NodeCacheInstrumentationConfig } from 'opentelemetry-instrumentation-node-cache';\nimport { AspectoAttributeNames } from '@aspecto/opentelemetry-base';\nimport { callCapturePayloadHook } from './recording-span';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions';\nimport { SpanAttributeValue } from '@opentelemetry/api';\n\nconst collectPayload = !Boolean(process.env.ASPECTO_DISABLE_COLLECT_NODE_CACHE_PAYLOAD);\n\nconst requestHook: NodeCacheInstrumentationConfig['requestHook'] = (span, { args, operation, moduleVersion }) => {\n    span.setAttribute(AspectoAttributeNames.MODULE_VERSION, moduleVersion);\n    if (collectPayload) {\n        if (operation === 'set') {\n            span.setAttribute(SemanticAttributes.DB_STATEMENT, `set ${args[0]} ${JSON.stringify(args[1])}`);\n        }\n        if (operation === 'mset') {\n            span.setAttribute(SemanticAttributes.DB_STATEMENT, `mset ${JSON.stringify(args[0])}`);\n        }\n    }\n};\n\nconst serializePayload = (response: any): SpanAttributeValue => {\n    if (['string', 'number', 'boolean'].includes(typeof response)) {\n        return response;\n    }\n    if (response instanceof Buffer) {\n        return response.toString();\n    }\n    if (typeof response === 'object') {\n        return JSON.stringify(response);\n    }\n    return undefined;\n};\n\nconst responseHook: NodeCacheInstrumentationConfig['responseHook'] = (span, { response }) => {\n    if (collectPayload) {\n        span.setAttribute(AspectoAttributeNames.DB_RESPONSE, serializePayload(response));\n    }\n};\n\nexport const nodeCacheInstrumentationConfig: NodeCacheInstrumentationConfig = {\n    requireParentSpan: true,\n    requestHook: callCapturePayloadHook(requestHook),\n    responseHook: callCapturePayloadHook(responseHook),\n};\n"]}