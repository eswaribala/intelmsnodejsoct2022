"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const semantic_conventions_1 = require("@opentelemetry/semantic-conventions");
const aspecto_resource_1 = require("../aspecto-resource");
const LabelNames_1 = require("../aspecto-resource/LabelNames");
const dynamic_require_1 = require("../utils/dynamic-require");
const loadJsonFile = (path) => {
    try {
        return JSON.parse(dynamic_require_1.fs().readFileSync(path).toString());
    }
    catch (err) {
        return null;
    }
};
const envVariableToBoolean = (value) => {
    if (value == null) {
        return undefined;
    }
    return value !== '0' && value !== 'false';
};
class AspectoConfig {
    constructor() {
        this.collectPayloads = true;
        this.sqsExtractContextPropagationFromPayload = true;
    }
    init(options) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6;
        this.jsonConfig = this.loadJsonConfig();
        // Token
        this.token = (_c = (_b = (_a = options.aspectoAuth) !== null && _a !== void 0 ? _a : process.env.ASPECTO_AUTH) !== null && _b !== void 0 ? _b : this.jsonConfig.token) !== null && _c !== void 0 ? _c : this.jsonConfig.aspectoAuth;
        if (!this.token) {
            throw new Error(`

    Unable to retrieve Aspecto token.
    In order for the Aspecto service to work, it requires an auth token.
    Please provide it through ASPECTO_AUTH env param${process.env.ASPECTO_TESTING_FRAMEWORK ? '' : ' OR aspectoAuth init option'}.
    Alternatively, you can add aspecto.json file with the next content {"aspectoAuth":"-- token goes here --"} to the root folder.
    You can get the token from: https://app.aspecto.io/app/integration/api-key
    For more details please check: https://docs.aspecto.io
        `);
        }
        // Sampling Ratio
        const samplingRatio = (_f = (_e = (_d = options.samplingRatio) !== null && _d !== void 0 ? _d : process.env.ASPECTO_SAMPLING_RATIO) !== null && _e !== void 0 ? _e : this.jsonConfig.samplingRatio) !== null && _f !== void 0 ? _f : 1.0;
        this.samplingRatio = Number(samplingRatio);
        if (isNaN(this.samplingRatio))
            throw new Error(`Provided sampling ratio (${samplingRatio}) is not a number`);
        if (typeof this.samplingRatio !== 'number' || this.samplingRatio < 0.0 || this.samplingRatio > 1.0)
            throw new Error(`samplingRatio should be number in range [0.0, 1.0], received ${this.samplingRatio}`);
        this.requireConfigForTraces = (_j = (_h = (_g = options.requireConfigForTraces) !== null && _g !== void 0 ? _g : envVariableToBoolean(process.env.ASPECTO_REQUIRE_CONFIG_FOR_TRACES)) !== null && _h !== void 0 ? _h : this.jsonConfig.requireConfigForTraces) !== null && _j !== void 0 ? _j : false;
        this.collectPayloads = (_m = (_l = (_k = options.collectPayloads) !== null && _k !== void 0 ? _k : envVariableToBoolean(process.env.ASPECTO_COLLECT_PAYLOADS)) !== null && _l !== void 0 ? _l : this.jsonConfig.collectPayloads) !== null && _m !== void 0 ? _m : true;
        this.sqsExtractContextPropagationFromPayload = (_q = (_p = (_o = options.sqsExtractContextPropagationFromPayload) !== null && _o !== void 0 ? _o : envVariableToBoolean(process.env.ASPECTO_SQS_EXTRACT_CONTEXT_PROPAGATION_FROM_PAYLOAD)) !== null && _p !== void 0 ? _p : this.jsonConfig.sqsExtractContextPropagationFromPayload) !== null && _q !== void 0 ? _q : true;
        this.exportBatchSize = (_t = (_s = (_r = options.exportBatchSize) !== null && _r !== void 0 ? _r : +process.env.ASPECTO_EXPORT_BATCH_SIZE) !== null && _s !== void 0 ? _s : this.jsonConfig.exportBatchSize) !== null && _t !== void 0 ? _t : 100;
        this.exportBatchTimeoutMs = (_x = (_w = (_v = (_u = options.exportBatchTimeoutMs) !== null && _u !== void 0 ? _u : options.exportBatchTimeout) !== null && _v !== void 0 ? _v : +process.env.ASPECTO_EXPORT_BATCH_TIMEOUT_MS) !== null && _w !== void 0 ? _w : this.jsonConfig.exportBatchTimeoutMs) !== null && _x !== void 0 ? _x : 1000;
        this.extractB3Context = (_0 = (_z = (_y = options.extractB3Context) !== null && _y !== void 0 ? _y : envVariableToBoolean(process.env.ASPECTO_EXTRACT_B3_CONTEXT)) !== null && _z !== void 0 ? _z : this.jsonConfig.extractB3Context) !== null && _0 !== void 0 ? _0 : false;
        this.injectB3ContextSingleHeader = (_3 = (_2 = (_1 = options.injectB3ContextSingleHeader) !== null && _1 !== void 0 ? _1 : envVariableToBoolean(process.env.ASPECTO_INJECT_B3_CONTEXT_SINGLE_HEADER)) !== null && _2 !== void 0 ? _2 : this.jsonConfig.injectB3Context) !== null && _3 !== void 0 ? _3 : false;
        this.injectB3ContextMultiHeader = (_6 = (_5 = (_4 = options.injectB3ContextMultiHeader) !== null && _4 !== void 0 ? _4 : envVariableToBoolean(process.env.ASPECTO_INJECT_B3_CONTEXT_MULTI_HEADER)) !== null && _5 !== void 0 ? _5 : this.jsonConfig.injectB3ContextMultiHeader) !== null && _6 !== void 0 ? _6 : false;
        this.otelResource = aspecto_resource_1.getOtelResource(options, this.jsonConfig);
    }
    get serviceName() {
        return this.otelResource.attributes[semantic_conventions_1.SemanticResourceAttributes.SERVICE_NAME];
    }
    get serviceInstanceId() {
        return this.otelResource.attributes[semantic_conventions_1.SemanticResourceAttributes.SERVICE_INSTANCE_ID];
    }
    get deploymentEnvironment() {
        return this.otelResource.attributes[semantic_conventions_1.SemanticResourceAttributes.DEPLOYMENT_ENVIRONMENT];
    }
    get aspectoVersion() {
        return this.otelResource.attributes[LabelNames_1.LabelNames.VERSION];
    }
    loadJsonConfig() {
        var _a, _b;
        return (_b = (_a = loadJsonFile('aspecto.json')) !== null && _a !== void 0 ? _a : loadJsonFile((process === null || process === void 0 ? void 0 : process.argv[1]) + '../aspecto.json')) !== null && _b !== void 0 ? _b : {};
    }
}
exports.default = new AspectoConfig();
//# sourceMappingURL=aspectoConfig.js.map