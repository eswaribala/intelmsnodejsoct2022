"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ConfigWS_1 = __importDefault(require("./ConfigWS"));
const debug_1 = __importDefault(require("debug"));
const config_1 = require("../config");
const sampling_rules_1 = require("@aspecto/sampling-rules");
var ConfigServiceEvents;
(function (ConfigServiceEvents) {
    ConfigServiceEvents["GET_CONFIG"] = "get-config";
    ConfigServiceEvents["CONFIG"] = "config";
    ConfigServiceEvents["DATA_COLLECTION"] = "data-collection";
    ConfigServiceEvents["GET_DATA_COLLECTION"] = "get-data-collection";
})(ConfigServiceEvents || (ConfigServiceEvents = {}));
const logDebugConfigService = debug_1.default('aspecto:config');
class ConfigService {
    async connect(token) {
        if (this.socket)
            return;
        const socket = new ConfigWS_1.default(config_1.CONFIG_HOST);
        logDebugConfigService('Connecting to config service.', { host: config_1.CONFIG_HOST });
        await socket.auth(token);
        logDebugConfigService('Successfully connected to config service.');
        this.socket = socket;
    }
    checkConnection() {
        if (!this.socket)
            throw new Error('Not connected, please call connect() first.');
    }
    async getConfig() {
        this.checkConnection();
        return new Promise((resolve) => {
            this.socket.on(ConfigServiceEvents.CONFIG, (config) => {
                logDebugConfigService('Got data from config service: %O', { config });
                resolve(config);
            });
            logDebugConfigService('Asking for config from config service.');
            this.socket.emit(ConfigServiceEvents.GET_CONFIG);
        });
    }
    async subscribeToSamplingRules(callback) {
        this.checkConnection();
        this.socket.on(sampling_rules_1.Events.SAMPLING_RULES, (rules) => {
            logDebugConfigService('Got sampling rules from config service: %O', { rules });
            callback(rules);
        });
        logDebugConfigService('Asking for sampling rules from config service.');
        this.socket.emit(sampling_rules_1.Events.GET_SAMPLING_RULES);
    }
    async subscribeToDataCollectionRules(callback) {
        this.checkConnection();
        this.socket.on(ConfigServiceEvents.DATA_COLLECTION, (msg) => {
            logDebugConfigService('Got data collection rules from config service: %O', { msg });
            callback(msg.rules, msg.mode);
        });
        logDebugConfigService('Asking for data collection rules from config service.');
        this.socket.emit(ConfigServiceEvents.GET_DATA_COLLECTION);
    }
}
exports.default = new ConfigService();
//# sourceMappingURL=ConfigService.js.map