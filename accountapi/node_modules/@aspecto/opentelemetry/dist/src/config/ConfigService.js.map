{"version":3,"file":"ConfigService.js","sourceRoot":"","sources":["../../../src/config/ConfigService.ts"],"names":[],"mappings":";;;;;AAAA,0DAA6C;AAC7C,kDAAgC;AAChC,sCAAwC;AAGxC,4DAAqF;AAErF,IAAK,mBAKJ;AALD,WAAK,mBAAmB;IACpB,gDAAyB,CAAA;IACzB,wCAAiB,CAAA;IACjB,0DAAmC,CAAA;IACnC,kEAA2C,CAAA;AAC/C,CAAC,EALI,mBAAmB,KAAnB,mBAAmB,QAKvB;AAED,MAAM,qBAAqB,GAAG,eAAW,CAAC,gBAAgB,CAAC,CAAC;AAQ5D,MAAM,aAAa;IAGR,KAAK,CAAC,OAAO,CAAC,KAAa;QAC9B,IAAI,IAAI,CAAC,MAAM;YAAE,OAAO;QACxB,MAAM,MAAM,GAAG,IAAI,kBAAmB,CAAC,oBAAW,CAAC,CAAC;QACpD,qBAAqB,CAAC,+BAA+B,EAAE,EAAE,IAAI,EAAE,oBAAW,EAAE,CAAC,CAAC;QAC9E,MAAM,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzB,qBAAqB,CAAC,2CAA2C,CAAC,CAAC;QACnE,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACzB,CAAC;IAEO,eAAe;QACnB,IAAI,CAAC,IAAI,CAAC,MAAM;YAAE,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;IACrF,CAAC;IAED,KAAK,CAAC,SAAS;QACX,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,OAAO,IAAI,OAAO,CAAS,CAAC,OAAO,EAAE,EAAE;YACnC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,mBAAmB,CAAC,MAAM,EAAE,CAAC,MAAc,EAAE,EAAE;gBAC1D,qBAAqB,CAAC,kCAAkC,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;gBACtE,OAAO,CAAC,MAAM,CAAC,CAAC;YACpB,CAAC,CAAC,CAAC;YAEH,qBAAqB,CAAC,wCAAwC,CAAC,CAAC;YAChE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;IACP,CAAC;IAED,KAAK,CAAC,wBAAwB,CAAC,QAA6C;QACxE,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,uBAAc,CAAC,cAAc,EAAE,CAAC,KAAyB,EAAE,EAAE;YACxE,qBAAqB,CAAC,4CAA4C,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;YAC/E,QAAQ,CAAC,KAAK,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;QAEH,qBAAqB,CAAC,gDAAgD,CAAC,CAAC;QACxE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,uBAAc,CAAC,kBAAkB,CAAC,CAAC;IACxD,CAAC;IAED,KAAK,CAAC,8BAA8B,CAAC,QAAkE;QACnG,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,MAAM,CAAC,EAAE,CACV,mBAAmB,CAAC,eAAe,EACnC,CAAC,GAAuD,EAAE,EAAE;YACxD,qBAAqB,CAAC,mDAAmD,EAAE,EAAE,GAAG,EAAE,CAAC,CAAC;YACpF,QAAQ,CAAC,GAAG,CAAC,KAAK,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;QAClC,CAAC,CACJ,CAAC;QAEF,qBAAqB,CAAC,uDAAuD,CAAC,CAAC;QAC/E,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,CAAC;IAC9D,CAAC;CACJ;AAED,kBAAe,IAAI,aAAa,EAAE,CAAC","sourcesContent":["import WebSocketConnection from './ConfigWS';\nimport createDebug from 'debug';\nimport { CONFIG_HOST } from '../config';\nimport { PrivacyRule } from '../privacy-rules/types/PrivacyRule';\nimport { DataCollectionMode } from '../privacy-rules/types/DataCollection';\nimport { Events as SamplingEvents, LeanSamplingRule } from '@aspecto/sampling-rules';\n\nenum ConfigServiceEvents {\n    GET_CONFIG = 'get-config',\n    CONFIG = 'config',\n    DATA_COLLECTION = 'data-collection',\n    GET_DATA_COLLECTION = 'get-data-collection',\n}\n\nconst logDebugConfigService = createDebug('aspecto:config');\n\ninterface Config {\n    privacyRules: PrivacyRule[];\n    collectorUrl: string;\n    otCollectorUrl: string;\n    jaegerEndpoint: string;\n}\nclass ConfigService {\n    private socket: WebSocketConnection;\n\n    public async connect(token: string) {\n        if (this.socket) return;\n        const socket = new WebSocketConnection(CONFIG_HOST);\n        logDebugConfigService('Connecting to config service.', { host: CONFIG_HOST });\n        await socket.auth(token);\n        logDebugConfigService('Successfully connected to config service.');\n        this.socket = socket;\n    }\n\n    private checkConnection() {\n        if (!this.socket) throw new Error('Not connected, please call connect() first.');\n    }\n\n    async getConfig() {\n        this.checkConnection();\n        return new Promise<Config>((resolve) => {\n            this.socket.on(ConfigServiceEvents.CONFIG, (config: Config) => {\n                logDebugConfigService('Got data from config service: %O', { config });\n                resolve(config);\n            });\n\n            logDebugConfigService('Asking for config from config service.');\n            this.socket.emit(ConfigServiceEvents.GET_CONFIG);\n        });\n    }\n\n    async subscribeToSamplingRules(callback: (rules: LeanSamplingRule[]) => void) {\n        this.checkConnection();\n        this.socket.on(SamplingEvents.SAMPLING_RULES, (rules: LeanSamplingRule[]) => {\n            logDebugConfigService('Got sampling rules from config service: %O', { rules });\n            callback(rules);\n        });\n\n        logDebugConfigService('Asking for sampling rules from config service.');\n        this.socket.emit(SamplingEvents.GET_SAMPLING_RULES);\n    }\n\n    async subscribeToDataCollectionRules(callback: (rules: PrivacyRule[], mode: DataCollectionMode) => void) {\n        this.checkConnection();\n        this.socket.on(\n            ConfigServiceEvents.DATA_COLLECTION,\n            (msg: { rules: PrivacyRule[]; mode: DataCollectionMode }) => {\n                logDebugConfigService('Got data collection rules from config service: %O', { msg });\n                callback(msg.rules, msg.mode);\n            }\n        );\n\n        logDebugConfigService('Asking for data collection rules from config service.');\n        this.socket.emit(ConfigServiceEvents.GET_DATA_COLLECTION);\n    }\n}\n\nexport default new ConfigService();\n"]}