{"version":3,"file":"ConfigWS.js","sourceRoot":"","sources":["../../../src/config/ConfigWS.ts"],"names":[],"mappings":";;;AAAA,uDAA8C;AAE9C,MAAa,iBAAkB,SAAQ,KAAK;IAExC,YAAY,KAAa;QACrB,KAAK,CACD,oCAAoC,KAAK,qHAAqH,CACjK,CAAC;QACF,IAAI,CAAC,IAAI,GAAG,mBAAmB,CAAC;QAChC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;IACvB,CAAC;CACJ;AATD,8CASC;AAED,MAAqB,QAAQ;IAGzB,YAAoB,IAAY;QAAZ,SAAI,GAAJ,IAAI,CAAQ;IAAG,CAAC;IAEpC,UAAU;;QACN,MAAA,IAAI,CAAC,MAAM,0CAAE,UAAU,GAAG;IAC9B,CAAC;IAED,IAAI,CAAC,KAAa;QACd,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACnC,IAAI;gBACA,IAAI,CAAC,MAAM,GAAG,qBAAE,CAAC,IAAI,CAAC,IAAI,EAAE;oBACxB,KAAK,EAAE,EAAE,KAAK,EAAE;oBAChB,UAAU,EAAE,CAAC,WAAW,CAAC;oBACzB,SAAS,EAAE,IAAI;iBAClB,CAAC,CAAC;gBAEH,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,eAAe,EAAE;oBAC5B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;oBACnB,OAAO,CAAC,IAAI,CAAC,CAAC;gBAClB,CAAC,CAAC,CAAC;gBAEH,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,eAAe,EAAE;oBAC5B,MAAM,CAAC,IAAI,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;gBACzC,CAAC,CAAC,CAAC;gBAEH,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,UAAU,GAAU;oBACxC,MAAM,CAAC,GAAG,CAAC,CAAC;gBAChB,CAAC,CAAC,CAAC;aACN;YAAC,OAAO,GAAG,EAAE;gBACV,MAAM,CAAC,GAAG,CAAC,CAAC;aACf;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED,IAAI,CAAC,KAAa,EAAE,GAAG,IAAW;QAC9B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,CAAC;IACrC,CAAC;IAED,EAAE,CAAC,KAAa,EAAE,EAA4B;QAC1C,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;IAC9B,CAAC;CACJ;AA3CD,2BA2CC","sourcesContent":["import { Socket, io } from 'socket.io-client';\n\nexport class InvalidTokenError extends Error {\n    public token: string;\n    constructor(token: string) {\n        super(\n            `The token you are trying to use (${token}) doesn't exist. Please retrieve a valid token from Aspecto website: https://app.aspecto.io/app/integration/api-key`\n        );\n        this.name = 'InvalidTokenError';\n        this.token = token;\n    }\n}\n\nexport default class ConfigWS {\n    private socket: Socket;\n\n    constructor(private host: string) {}\n\n    disconnect() {\n        this.socket?.disconnect();\n    }\n\n    auth(token: string): Promise<boolean> {\n        return new Promise((resolve, reject) => {\n            try {\n                this.socket = io(this.host, {\n                    query: { token },\n                    transports: ['websocket'],\n                    autoUnref: true,\n                });\n\n                this.socket.on('authenticated', function () {\n                    this.token = token;\n                    resolve(true);\n                });\n\n                this.socket.on('invalid-token', function () {\n                    reject(new InvalidTokenError(token));\n                });\n\n                this.socket.on('error', function (err: Error) {\n                    reject(err);\n                });\n            } catch (err) {\n                reject(err);\n            }\n        });\n    }\n\n    emit(event: string, ...args: any[]) {\n        this.socket.emit(event, ...args);\n    }\n\n    on(event: string, cb: (...args: any[]) => void) {\n        this.socket.on(event, cb);\n    }\n}\n"]}