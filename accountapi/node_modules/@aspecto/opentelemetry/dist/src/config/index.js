"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LIVE_FLOW_SOCKET_URL = exports.initializeConfig = exports.getOtlpCollectorEndpoint = exports.ConfigService = exports.AspectoConfig = exports.isNode = exports.CONFIG_HOST = void 0;
const debug_1 = __importDefault(require("debug"));
const aspectoConfig_1 = __importDefault(require("./aspectoConfig"));
exports.CONFIG_HOST = (_a = process.env.ASPECTO_CONFIG_HOST) !== null && _a !== void 0 ? _a : 'https://config.aspecto.io';
var isNode_1 = require("./isNode");
Object.defineProperty(exports, "isNode", { enumerable: true, get: function () { return isNode_1.isNode; } });
var aspectoConfig_2 = require("./aspectoConfig");
Object.defineProperty(exports, "AspectoConfig", { enumerable: true, get: function () { return __importDefault(aspectoConfig_2).default; } });
var ConfigService_1 = require("./ConfigService");
Object.defineProperty(exports, "ConfigService", { enumerable: true, get: function () { return __importDefault(ConfigService_1).default; } });
const logDebugConfig = debug_1.default('aspecto:init:config');
// const defaultJaegerEndpoint = 'https://jaeger-collector.aspecto.io:443/api/v2/spans';
const defaultOtlpCollectorEndpoint = 'https://otelcol-fast.aspecto.io/v1/trace';
const isValidUrl = (url) => {
    try {
        new URL(url);
        return true;
    }
    catch (e) {
        return false;
    }
};
exports.getOtlpCollectorEndpoint = (sendOtlpTrafficTo) => {
    let otlpCollectorEndpoint = defaultOtlpCollectorEndpoint;
    if (sendOtlpTrafficTo) {
        if (!isValidUrl(sendOtlpTrafficTo)) {
            throw new Error(`${sendOtlpTrafficTo} is not a valid URL, no events will be sent to Open Telemetry collector.`);
        }
        otlpCollectorEndpoint = sendOtlpTrafficTo;
    }
    logDebugConfig(`Collector endpoint: ${otlpCollectorEndpoint}`);
    return otlpCollectorEndpoint;
};
// verify config is valid, and print a friendly message (no stack trace) if it's missing
exports.initializeConfig = (options) => {
    try {
        logDebugConfig('Started config init.');
        aspectoConfig_1.default.init(options);
        logDebugConfig('Config init success.');
        return true;
    }
    catch (err) {
        logDebugConfig('Config init failure.', { err });
        const message = `Aspecto configuration error: ${err.message}`;
        if (options.logger)
            options.logger.error(message);
        else
            console.warn(message);
        return false;
    }
};
exports.LIVE_FLOW_SOCKET_URL = 'https://live-flows.aspecto.io/socket.io';
//# sourceMappingURL=index.js.map