import { SpanProcessor, SpanExporter, ReadableSpan } from '@opentelemetry/sdk-trace-base';
import { PrivacyRule } from '../privacy-rules';
import { DataCollectionMode } from '../privacy-rules/types/DataCollection';
export declare class AspectoProcessor implements SpanProcessor {
    private readonly _exporters;
    private batchExporter;
    private privacyEngine;
    private pendingInitSpans;
    private maxPendingInitSpansBytes;
    private pendingInitSpansCurrSize;
    private privacyEnginePromise;
    private resolvePrivacyEngine;
    constructor();
    setBatchExporter(exporter: SpanExporter, bufferSize: number, bufferTimeout: number): void;
    addExporter(exporter: SpanExporter): void;
    newDataCollectionRules(rules: PrivacyRule[], mode: DataCollectionMode): void;
    forceFlush(): Promise<void>;
    onStart(_span: ReadableSpan): void;
    onEnd(span: ReadableSpan): void;
    shutdown(): Promise<void>;
    private pushSpanToPendingInit;
    private validateAndExport;
    /**
     * socket.io reconnect is initiated from setTimeout which does not propagate context
     * thus, user might get spans for reconnect.
     *
     * We cannot place this check in sampler, as it is only initiated after config is received
     */
    static shouldIgnoreInternalAspectoSpans: (span: ReadableSpan) => boolean;
}
//# sourceMappingURL=AspectoProcessor.d.ts.map