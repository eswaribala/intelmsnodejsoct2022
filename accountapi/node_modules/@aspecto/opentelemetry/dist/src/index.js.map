{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n    trace,\n    context,\n    Tracer,\n    diag,\n    DiagConsoleLogger,\n    DiagLogLevel,\n    TraceFlags,\n    SpanAttributeValue,\n    SpanAttributes,\n} from '@opentelemetry/api';\nimport { CompositePropagator, ParentBasedSampler } from '@opentelemetry/core';\nimport { OTLPTraceExporter as OTLPTraceExporterHttpProto } from '@opentelemetry/exporter-trace-otlp-proto';\nimport { OTLPTraceExporter as OTLPTraceExporterHttpJson } from '@opentelemetry/exporter-trace-otlp-http';\nimport { NodeTracerProvider } from '@opentelemetry/sdk-trace-node';\nimport { ZipkinExporter } from '@opentelemetry/exporter-zipkin';\nimport createDebug from 'debug';\nimport { OtelDiag } from '@aspecto/opentelemetry-diag';\nimport { AspectoConfig, ConfigService, initializeConfig, getOtlpCollectorEndpoint } from './config';\nimport { AspectoProcessor } from './processor/AspectoProcessor';\nimport AspectoClientOptions, { Logger } from './interfaces/AspectoClientOptions';\nimport { printLiveStreamMessage } from './logging/print-live-message';\nimport { loadPlugins } from './plugins-customizations';\nimport { getLambdaTracer, LambdaTracer } from './faas/lambda';\nimport { getGcfTracer, GCFTracer } from './faas/gcf';\nimport { AspectoHttpTraceContext } from './context/AspectoHttpTraceContext';\nimport { RulesSampler } from './sampling/RulesSampler';\nimport { checkForRequireOrder } from './utils/require-order-check';\nimport * as manualSpans from './manual-spans';\nimport { NOT_SET_ATTRIBUTE_VALUE } from './aspecto-resource';\nimport { SetSpansAttributePrefix } from '@aspecto/opentelemetry-base';\nimport { MessagingProcessSampler } from './sampling/MessageProcessSampler';\nimport { B3InjectEncoding, B3Propagator } from '@opentelemetry/propagator-b3';\nimport { SelectivePropagator } from 'opentelemetry-propagator-selective';\n\nconst logDebugInit = createDebug('aspecto:init');\n\nconst initWithRemoteConfig = async (\n    aspectoPrivacyProcessor: AspectoProcessor,\n    options: AspectoClientOptions,\n    onSamplingRules: () => {}\n) => {\n    await ConfigService.connect(AspectoConfig.token);\n    onSamplingRules && ConfigService.subscribeToSamplingRules(onSamplingRules);\n    const { otCollectorUrl } = await ConfigService.getConfig();\n    try {\n        const aspectoOtEndpoint = getOtlpCollectorEndpoint(\n            options.otCollectorEndpoint ??\n                options.otlpCollectorEndpoint ??\n                process.env.OTEL_EXPORTER_OTLP_TRACES_ENDPOINT ??\n                otCollectorUrl\n        );\n        const CollectorTraceExporter = process.env.ASPECTO_TRACE_EXPORT_JSON\n            ? OTLPTraceExporterHttpJson\n            : OTLPTraceExporterHttpProto;\n        const collectorTraceExporter = new CollectorTraceExporter({\n            url: aspectoOtEndpoint,\n        });\n        aspectoPrivacyProcessor.setBatchExporter(\n            collectorTraceExporter,\n            AspectoConfig.exportBatchSize,\n            AspectoConfig.exportBatchTimeoutMs\n        );\n    } catch (err) {\n        console.log(`Aspecto Opentelemetry Tracer Error: ${err}`);\n    }\n\n    ConfigService.subscribeToDataCollectionRules(\n        aspectoPrivacyProcessor.newDataCollectionRules.bind(aspectoPrivacyProcessor)\n    );\n};\n\nconst addCustomZipkinExporter = (aspectoProcessor: AspectoProcessor, options: AspectoClientOptions) => {\n    if (!options?.customZipkinEndpoint) return;\n\n    aspectoProcessor.addExporter(\n        new ZipkinExporter({\n            url: options.customZipkinEndpoint,\n            serviceName: AspectoConfig.serviceName,\n        })\n    );\n};\n\nconst aspectoInstrumentResult = Symbol.for('aspecto-instrument-result');\n\ninterface InstrumentResult {\n    tracer: Tracer;\n    lambda: LambdaTracer;\n    gcf: GCFTracer;\n    /**\n    @deprecated\n    */\n    setLogger: (logger: Logger) => void;\n    shutdown: () => Promise<void>;\n}\n\nconst instrument = (options: AspectoClientOptions = {}): InstrumentResult => {\n    // prevent re-instrumenting.\n    if (global[aspectoInstrumentResult]) {\n        logDebugInit('Already instrumented, returning existing result.');\n        return global[aspectoInstrumentResult];\n    }\n\n    try {\n        if (!initializeConfig(options)) {\n            logDebugInit('Config not initialized, exiting...');\n            return;\n        }\n\n        if (options.disableAspecto || process.env.DISABLE_ASPECTO || AspectoConfig.jsonConfig.disableAspecto) {\n            logDebugInit('DISABLE_ASPECTO=true, instrumentation skipped.');\n            return {\n                gcf: (h: any) => h,\n                lambda: (h: any) => h,\n                tracer: trace.getTracer(null),\n                setLogger: () => {},\n                shutdown: () => Promise.resolve(),\n            };\n        }\n\n        const orderCheckResult = checkForRequireOrder();\n\n        const rulesSampler = new RulesSampler(\n            AspectoConfig.samplingRatio,\n            AspectoConfig.serviceName,\n            AspectoConfig.deploymentEnvironment,\n            AspectoConfig.requireConfigForTraces\n        );\n\n        if (options.writeSystemLogs) {\n            diag.setLogger((options.logger as any) ?? new DiagConsoleLogger(), DiagLogLevel.ALL);\n        }\n        logDebugInit('Creating provider...');\n        const provider = new NodeTracerProvider({\n            resource: AspectoConfig.otelResource,\n            sampler: new MessagingProcessSampler(\n                rulesSampler,\n                new ParentBasedSampler({\n                    root: rulesSampler,\n                })\n            ),\n        });\n\n        logDebugInit('Loading plugins...');\n        loadPlugins(provider);\n\n        logDebugInit('Creating processor...');\n        const aspectoProcessor = new AspectoProcessor();\n        addCustomZipkinExporter(aspectoProcessor, options);\n\n        const serviceName = AspectoConfig.serviceName;\n\n        if (!options.disableLiveStreamTraces) {\n            logDebugInit('Initializing live stream traces mode...');\n            const otelDiag = new OtelDiag({\n                serviceName: AspectoConfig.serviceName,\n                instanceId: AspectoConfig.serviceInstanceId,\n                aspectoAuth: AspectoConfig.token,\n            });\n\n            setTimeout(async () => {\n                try {\n                    logDebugInit('Initializing otel diag...');\n                    const otelDiagInfo = await otelDiag.init();\n                    logDebugInit('Otel diag initialized successfully.', { otelDiagInfo });\n\n                    otelDiag.addSdkEvent({\n                        type: 'aspecto-version',\n                        payload: {\n                            packageName: serviceName,\n                            version: AspectoConfig.aspectoVersion,\n                        },\n                    });\n                    if (orderCheckResult.error) {\n                        otelDiag.addSdkEvent({\n                            type: 'bad-require-order',\n                            payload: {\n                                packageName: serviceName,\n                                missingModules: orderCheckResult.missingModules,\n                            },\n                        });\n                    }\n                    if (AspectoConfig.deploymentEnvironment === NOT_SET_ATTRIBUTE_VALUE) {\n                        otelDiag.addSdkEvent({\n                            type: 'env-not-set',\n                            payload: { packageName: serviceName },\n                        });\n                    }\n                    const baseUrl = options.baseUrl || 'https://app.aspecto.io';\n                    printLiveStreamMessage({ baseUrl, otelDiagInfo });\n                } catch (err) {\n                    console.log(`Failed to initialize Aspecto live stream tracing. ${err}`);\n                }\n            });\n        }\n\n        initWithRemoteConfig(aspectoProcessor, options, rulesSampler?.setRules?.bind(rulesSampler)).catch((err) => {\n            (options.logger ?? console).warn(\n                `Aspecto has encountered an error and will not instrument your service:\\n  -  ${err.name}: ${err.message}`\n            );\n            provider.shutdown();\n        });\n\n        provider.addSpanProcessor(aspectoProcessor);\n        provider.register({\n            propagator: new CompositePropagator({\n                propagators: [\n                    new AspectoHttpTraceContext(),\n                    new SelectivePropagator(new B3Propagator({ injectEncoding: B3InjectEncoding.SINGLE_HEADER }), {\n                        extractEnabled: AspectoConfig.extractB3Context, // extracts both single and multi\n                        injectEnabled: AspectoConfig.injectB3ContextSingleHeader,\n                    }),\n                    new SelectivePropagator(new B3Propagator({ injectEncoding: B3InjectEncoding.MULTI_HEADER }), {\n                        injectEnabled: AspectoConfig.injectB3ContextMultiHeader,\n                    }),\n                ],\n            }),\n        });\n\n        global[aspectoInstrumentResult] = {\n            tracer: trace.getTracer(serviceName),\n            lambda: getLambdaTracer(aspectoProcessor.forceFlush.bind(aspectoProcessor)),\n            gcf: getGcfTracer(aspectoProcessor.forceFlush.bind(aspectoProcessor)),\n            setLogger: (_logger: Logger) => {},\n            shutdown: async () => {\n                await aspectoProcessor.shutdown();\n            },\n        } as InstrumentResult;\n        logDebugInit('Aspecto instrumentation initialized successfully.');\n        return global[aspectoInstrumentResult];\n    } catch (e) {\n        console.log(`Failed to initialize Aspecto tracing. ${e}`);\n    }\n};\n\nconst getContext = () => {\n    try {\n        const { traceId, spanId, traceFlags } = trace.getSpan(context.active()).spanContext();\n        return { traceId, spanId, sampled: Boolean(traceFlags & TraceFlags.SAMPLED) };\n    } catch {\n        return { traceId: null, spanId: null, sampled: false };\n    }\n};\n\nconst handleSpanAttrKey = (key: string): string => {\n    if (!key || typeof key !== 'string') throw new Error('invalid span attribute key');\n\n    const replaceSpaces = key.trim().replace(/\\s+/g, '.');\n    const withPrefix = `${SetSpansAttributePrefix}.${replaceSpaces}`;\n\n    return withPrefix;\n};\n\nconst handleSpanAttrObjectKeys = (attributes: SpanAttributes): SpanAttributes => {\n    const newAttrObject = {};\n\n    for (const [key, value] of Object.entries(attributes)) {\n        const newKey = handleSpanAttrKey(key);\n        newAttrObject[newKey] = value;\n    }\n\n    return newAttrObject;\n};\n\n/**\n * Sets an attribute to the span.\n * The key will get a prefix of 'aspecto.extra'.\n *\n * @param key the key for this attribute.\n * @param value the value for this attribute. Setting a value null or undefined is invalid and will result in undefined behavior.\n * @returns boolean for success/failure.\n */\nconst setAttribute = (key: string, value: SpanAttributeValue): boolean => {\n    try {\n        const currentSpan = trace.getSpan(context.active());\n        if (!currentSpan) {\n            logDebugInit('setAttribute: the current span is undefined');\n            return false;\n        }\n\n        const newKey = handleSpanAttrKey(key);\n\n        currentSpan.setAttribute(newKey, value);\n        return true;\n    } catch (e) {\n        logDebugInit(`setAttribute: Failed to set a new attribute on the current span: ${e}`);\n        return false;\n    }\n};\n\n/**\n * Sets attributes to the span with a prefix of 'aspecto.extra' on the keys.\n *\n * @param attributes the attributes that will be added. null or undefined attribute values are invalid and will result in undefined behavior.\n * @returns boolean for success/failure.\n */\nconst setAttributes = (attributes: SpanAttributes): boolean => {\n    try {\n        const currentSpan = trace.getSpan(context.active());\n        if (!currentSpan) {\n            logDebugInit('setAttributes: the current span is undefined');\n            return false;\n        }\n\n        const newAttrObject = handleSpanAttrObjectKeys(attributes);\n        currentSpan.setAttributes(newAttrObject);\n\n        return true;\n    } catch (e) {\n        logDebugInit(`setAttributes: Failed to set a new attributes on the current span: ${e}`);\n        return false;\n    }\n};\n\ninstrument.getContext = getContext;\ninstrument.trace = manualSpans.trace;\ninstrument.setAttribute = setAttribute;\ninstrument.setAttributes = setAttributes;\n\nexport = instrument;\n"]}