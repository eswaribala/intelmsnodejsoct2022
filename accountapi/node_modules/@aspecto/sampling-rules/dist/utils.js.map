{"version":3,"file":"utils.js","sourceRoot":"","sources":["../src/utils.ts"],"names":[],"mappings":";;;AAAA,mCAAqD;AAE9C,MAAM,aAAa,GAAG,CAAC,QAAkB,EAAE,QAAgB,EAAE,MAAc,EAAE,EAAE;IAClF,IAAI;QACA,MAAM,aAAa,GAAG,OAAO,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC;QACvF,MAAM,WAAW,GAAG,OAAO,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;QAC/E,QAAQ,QAAQ,EAAE;YACd,KAAK,gBAAQ,CAAC,GAAG;gBACb,OAAO,IAAI,CAAC;YAChB,KAAK,gBAAQ,CAAC,OAAO;gBACjB,OAAO,MAAM,KAAK,SAAS,CAAC;YAChC,KAAK,gBAAQ,CAAC,SAAS;gBACnB,OAAO,MAAM,KAAK,SAAS,CAAC;YAChC,KAAK,gBAAQ,CAAC,EAAE;gBACZ,OAAO,aAAa,KAAK,WAAW,CAAC;YACzC,KAAK,gBAAQ,CAAC,EAAE;gBACZ,OAAO,aAAa,KAAK,WAAW,CAAC;YACzC,KAAK,gBAAQ,CAAC,WAAW;gBACrB,OAAO,WAAW,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;YACjD,KAAK,gBAAQ,CAAC,SAAS;gBACnB,OAAO,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;YAC/C,KAAK,gBAAQ,CAAC,QAAQ;gBAClB,OAAO,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;YAC/C,KAAK,gBAAQ,CAAC,YAAY;gBACtB,OAAO,CAAC,WAAW,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;YAChD,KAAK,gBAAQ,CAAC,OAAO;gBACjB,MAAM,KAAK,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,CAAC;gBACnC,OAAO,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YACzD;gBACI,OAAO,KAAK,CAAC;SACpB;KACJ;IAAC,WAAM;QACJ,OAAO,KAAK,CAAC;KAChB;AACL,CAAC,CAAC;AAhCW,QAAA,aAAa,iBAgCxB;AAEK,MAAM,8BAA8B,GAAG,CAC1C,KAAyB,EACzB,WAAmB,EACnB,GAAW,EACO,EAAE;IACpB,OAAO,KAAK;SACP,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,qBAAa,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,EAAE,IAAI,CAAC,WAAW,CAAC,KAAM,EAAE,WAAW,CAAC,CAAC;SAClG,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,qBAAa,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,GAAG,CAAC,KAAM,EAAE,GAAG,CAAC,CAAC,CAAC;AACpF,CAAC,CAAC;AARW,QAAA,8BAA8B,kCAQzC","sourcesContent":["import { Operator, LeanSamplingRule } from './types';\n\nexport const meetsOperator = (operator: Operator, expected: string, actual: string) => {\n    try {\n        const expectedLower = typeof expected === 'string' ? expected.toLowerCase() : expected;\n        const actualLower = typeof actual === 'string' ? actual.toLowerCase() : actual;\n        switch (operator) {\n            case Operator.ANY:\n                return true;\n            case Operator.DEFINED:\n                return actual !== undefined;\n            case Operator.UNDEFINED:\n                return actual === undefined;\n            case Operator.EQ:\n                return expectedLower === actualLower;\n            case Operator.NE:\n                return expectedLower !== actualLower;\n            case Operator.STARTS_WITH:\n                return actualLower.startsWith(expectedLower);\n            case Operator.ENDS_WITH:\n                return actualLower.endsWith(expectedLower);\n            case Operator.CONTAINS:\n                return actualLower.includes(expectedLower);\n            case Operator.NOT_CONTAINS:\n                return !actualLower.includes(expectedLower);\n            case Operator.MATCHES:\n                const regex = new RegExp(expected);\n                return regex.test(actual) || regex.test(actualLower);\n            default:\n                return false;\n        }\n    } catch {\n        return false;\n    }\n};\n\nexport const filterRulesByPackageNameAndEnv = (\n    rules: LeanSamplingRule[],\n    packageName: string,\n    env: string\n): LeanSamplingRule[] => {\n    return rules\n        .filter((rule) => meetsOperator(rule.packageName.comparison, rule.packageName.value!, packageName))\n        .filter((rule) => meetsOperator(rule.env.comparison, rule.env.value!, env));\n};\n"]}