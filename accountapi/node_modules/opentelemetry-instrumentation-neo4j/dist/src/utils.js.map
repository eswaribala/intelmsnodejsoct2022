{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":";;;AAAA,8EAAyE;AAEzE,SAAgB,6BAA6B,CAAC,OAAY;;IACtD,MAAM,gBAAgB,GAClB,MAAA,MAAA,CAAC,OAAO,CAAC,KAAK,KAAK,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC,CAAC,OAAO,CAAC,qBAAqB,CAAC,mCAC5F,OAAO,CAAC,iBAAiB,mCACzB,EAAE,CAAC;IACP,MAAM,kBAAkB,GAAG,MAAA,gBAAgB,CAAC,mBAAmB,mCAAI,EAAE,CAAC;IAEtE,qFAAqF;IACrF,MAAM,OAAO,GAAG,MAAA,kBAAkB,CAAC,QAAQ,mCAAI,kBAAkB,CAAC,WAAW,CAAC;IAC9E,MAAM,IAAI,GAAG,kBAAkB,CAAC,UAAU,CAAC;IAE3C,MAAM,UAAU,GAAG;QACf,CAAC,yCAAkB,CAAC,aAAa,CAAC,EAAE,QAAQ;QAC5C,0FAA0F;QAC1F,CAAC,yCAAkB,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO;KAChF,CAAC;IACF,IAAI,OAAO,EAAE;QACT,UAAU,CAAC,yCAAkB,CAAC,aAAa,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC;QAC7D,UAAU,CAAC,yCAAkB,CAAC,aAAa,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC;KAChE;IACD,IAAI,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,SAAS,EAAE;QACjB,UAAU,CAAC,yCAAkB,CAAC,OAAO,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;KAC3D;IACD,OAAO,UAAU,CAAC;AACtB,CAAC;AAxBD,sEAwBC","sourcesContent":["import { SemanticAttributes } from '@opentelemetry/semantic-conventions';\n\nexport function getAttributesFromNeo4jSession(session: any) {\n    const connectionHolder =\n        (session._mode === 'WRITE' ? session._writeConnectionHolder : session._readConnectionHolder) ??\n        session._connectionHolder ??\n        {};\n    const connectionProvider = connectionHolder._connectionProvider ?? {};\n\n    // seedRouter is used when connecting to a url that starts with \"neo4j\", usually aura\n    const address = connectionProvider._address ?? connectionProvider._seedRouter;\n    const auth = connectionProvider._authToken;\n\n    const attributes = {\n        [SemanticAttributes.NET_TRANSPORT]: 'IP.TCP',\n        // \"neo4j\" is the default database name. When used, \"session._database\" is an empty string\n        [SemanticAttributes.DB_NAME]: session._database ? session._database : 'neo4j',\n    };\n    if (address) {\n        attributes[SemanticAttributes.NET_PEER_NAME] = address._host;\n        attributes[SemanticAttributes.NET_PEER_PORT] = address._port;\n    }\n    if (auth?.principal) {\n        attributes[SemanticAttributes.DB_USER] = auth.principal;\n    }\n    return attributes;\n}\n"]}