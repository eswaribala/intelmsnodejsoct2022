{"version":3,"file":"neo4j.js","sourceRoot":"","sources":["../../src/neo4j.ts"],"names":[],"mappings":"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","sourcesContent":["import { SpanStatusCode, diag, trace, context, SpanKind } from '@opentelemetry/api';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions';\nimport { VERSION } from './version';\nimport type * as neo4j from 'neo4j-driver';\nimport {\n    InstrumentationBase,\n    InstrumentationModuleDefinition,\n    InstrumentationNodeModuleFile,\n    InstrumentationNodeModuleDefinition,\n    safeExecuteInTheMiddle,\n} from '@opentelemetry/instrumentation';\nimport { Neo4jInstrumentationConfig } from './types';\nimport { getAttributesFromNeo4jSession } from './utils';\n\ntype Neo4J = typeof neo4j;\n\nexport class Neo4jInstrumentation extends InstrumentationBase<Neo4J> {\n    protected override _config!: Neo4jInstrumentationConfig;\n\n    constructor(config: Neo4jInstrumentationConfig = {}) {\n        super('opentelemetry-instrumentation-neo4j', VERSION, Object.assign({}, config));\n    }\n\n    override setConfig(config: Neo4jInstrumentationConfig = {}) {\n        this._config = config;\n    }\n\n    protected init(): InstrumentationModuleDefinition<Neo4J>[] {\n        return [\n            this.getModuleDefinition('neo4j-driver-core', ['>=4.3.0']),\n            this.getModuleDefinition('neo4j-driver', ['>=4.0.0 <4.3.0']),\n        ];\n    }\n\n    private getModuleDefinition(name: string, supportedVersions: string[]): InstrumentationNodeModuleDefinition<Neo4J> {\n        const apiModuleFiles = ['session', 'transaction'].map(\n            (file) =>\n                new InstrumentationNodeModuleFile<neo4j.Session>(\n                    `${name}/lib/${file}.js`,\n                    supportedVersions,\n                    this.patchSessionOrTransaction.bind(this),\n                    this.unpatchSessionOrTransaction.bind(this)\n                )\n        );\n\n        const module = new InstrumentationNodeModuleDefinition<Neo4J>(\n            name,\n            supportedVersions,\n            undefined,\n            undefined,\n            apiModuleFiles\n        );\n\n        return module;\n    }\n\n    private patchSessionOrTransaction(\n        fileExport: { default: () => neo4j.Session | neo4j.Transaction },\n        moduleVersion: string\n    ) {\n        const self = this;\n        this._wrap(fileExport.default.prototype, 'run', (originalRun: neo4j.Session['run']) => {\n            return function (query: string) {\n                if (self._config?.ignoreOrphanedSpans && !trace.getSpan(context.active())) {\n                    return originalRun.apply(this, arguments);\n                }\n\n                const connectionAttributes = getAttributesFromNeo4jSession(this);\n                const operation = query.trim().split(/\\s+/)[0];\n                const span = self.tracer.startSpan(`${operation} ${connectionAttributes[SemanticAttributes.DB_NAME]}`, {\n                    attributes: {\n                        ...connectionAttributes,\n                        [SemanticAttributes.DB_SYSTEM]: 'neo4j',\n                        [SemanticAttributes.DB_OPERATION]: operation,\n                        [SemanticAttributes.DB_STATEMENT]: query,\n                    },\n                    kind: SpanKind.CLIENT,\n                });\n                if (self._config.moduleVersionAttributeName) {\n                    span.setAttribute(self._config.moduleVersionAttributeName, moduleVersion);\n                }\n\n                const response: neo4j.Result = originalRun.apply(this, arguments);\n\n                const originalSubscribe = response.subscribe;\n                response.subscribe = function (observer) {\n                    const records = [];\n\n                    return originalSubscribe.call(this, {\n                        ...observer,\n                        onKeys: function (_keys: string[]) {\n                            if (!observer.onKeys) return;\n                            if (!observer.onCompleted) {\n                                span.end();\n                            }\n                            return observer.onKeys.apply(this, arguments);\n                        },\n                        onNext: function (record: neo4j.Record) {\n                            if (self._config.responseHook) {\n                                records.push(record);\n                            }\n                            if (observer.onNext) return observer.onNext.apply(this, arguments);\n                        },\n                        onCompleted: function (summary: neo4j.ResultSummary) {\n                            if (self._config.responseHook) {\n                                safeExecuteInTheMiddle(\n                                    () => self._config.responseHook(span, { records: records, summary }),\n                                    (e) => {\n                                        if (e) {\n                                            diag.error('neo4j instrumentation: responseHook error', e);\n                                        }\n                                    },\n                                    true\n                                );\n                            }\n                            span.end();\n                            if (observer.onCompleted) return observer.onCompleted.apply(this, arguments);\n                        },\n                        onError: function (err: Error) {\n                            span.recordException(err);\n                            span.setStatus({\n                                code: SpanStatusCode.ERROR,\n                                message: err.message,\n                            });\n                            span.end();\n                            if (observer.onError) return observer.onError.apply(this, arguments);\n                        },\n                    });\n                };\n\n                return response;\n            };\n        });\n        return fileExport;\n    }\n\n    private unpatchSessionOrTransaction(fileExport: { default: () => neo4j.Session | neo4j.Transaction }) {\n        this._unwrap(fileExport.default.prototype, 'run');\n    }\n}\n"]}