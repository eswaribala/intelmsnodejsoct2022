{"version":3,"file":"neo4j.spec.js","sourceRoot":"","sources":["../../test/neo4j.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import 'mocha';\nimport expect from 'expect';\nimport { context, ROOT_CONTEXT, SpanStatusCode, trace } from '@opentelemetry/api';\nimport { Neo4jInstrumentation } from '../src';\nimport { assertSpan } from './assert';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions';\nimport { normalizeResponse } from './test-utils';\nimport { map, mergeMap } from 'rxjs/operators';\nimport { concat } from 'rxjs';\nimport { getTestSpans, registerInstrumentationTesting } from '@opentelemetry/contrib-test-utils';\n\nconst instrumentation = registerInstrumentationTesting(new Neo4jInstrumentation());\ninstrumentation.enable();\ninstrumentation.disable();\n\nimport neo4j, { Driver } from 'neo4j-driver';\nimport { ReadableSpan } from '@opentelemetry/sdk-trace-base';\n\n/**\n * Tests require neo4j to run, and expose bolt port of 11011\n *\n * Use this command to run the required neo4j using docker:\n * docker run --name testneo4j -p7474:7474 -p11011:7687 -d --env NEO4J_AUTH=neo4j/test neo4j:4.2.3\n * */\n\ndescribe('neo4j instrumentation', function () {\n    this.timeout(10000);\n    let driver: Driver;\n\n    const getSingleSpan = () => {\n        const spans = getTestSpans();\n        expect(spans.length).toBe(1);\n        return spans[0];\n    };\n\n    before(async () => {\n        driver = neo4j.driver('bolt://localhost:11011', neo4j.auth.basic('neo4j', 'test'), {\n            disableLosslessIntegers: true,\n        });\n\n        let keepChecking = true;\n        const timeoutId = setTimeout(() => {\n            keepChecking = false;\n        }, 8000);\n        while (keepChecking) {\n            try {\n                await driver.verifyConnectivity();\n                clearTimeout(timeoutId);\n                return;\n            } catch (err) {\n                await new Promise((res) => setTimeout(res, 1000));\n            }\n        }\n        throw new Error('Could not connect to neo4j in allowed time frame');\n    });\n\n    after(async () => {\n        await driver.close();\n    });\n\n    beforeEach(async () => {\n        await driver.session().run('MATCH (n) DETACH DELETE n');\n        instrumentation.enable();\n    });\n\n    afterEach(async () => {\n        instrumentation.disable();\n        instrumentation.setConfig({});\n    });\n\n    describe('session', () => {\n        it('instruments \"run\" with promise', async () => {\n            const res = await driver.session().run('CREATE (n:MyLabel) RETURN n');\n\n            expect(res.records.length).toBe(1);\n            expect((res.records[0].toObject() as any).n.labels).toEqual(['MyLabel']);\n\n            const span = getSingleSpan();\n            assertSpan(span as ReadableSpan);\n            expect(span.name).toBe('CREATE neo4j');\n            expect(span.attributes[SemanticAttributes.DB_OPERATION]).toBe('CREATE');\n            expect(span.attributes[SemanticAttributes.DB_STATEMENT]).toBe('CREATE (n:MyLabel) RETURN n');\n        });\n\n        it('instruments \"run\" with subscribe', (done) => {\n            driver\n                .session()\n                .run('CREATE (n:MyLabel) RETURN n')\n                .subscribe({\n                    onCompleted: () => {\n                        const span = getSingleSpan();\n                        assertSpan(span as ReadableSpan);\n                        expect(span.attributes[SemanticAttributes.DB_OPERATION]).toBe('CREATE');\n                        expect(span.attributes[SemanticAttributes.DB_STATEMENT]).toBe('CREATE (n:MyLabel) RETURN n');\n                        done();\n                    },\n                });\n        });\n\n        it('handles \"run\" exceptions with promise', async () => {\n            try {\n                await driver.session().run('NOT_EXISTS_OPERATION');\n            } catch (err) {\n                const span = getSingleSpan();\n                expect(span.status.code).toBe(SpanStatusCode.ERROR);\n                expect(span.status.message).toBe(err.message);\n                return;\n            }\n            throw Error('should not be here');\n        });\n\n        it('handles \"run\" exceptions with subscribe', (done) => {\n            driver\n                .session()\n                .run('NOT_EXISTS_OPERATION')\n                .subscribe({\n                    onError: (err) => {\n                        const span = getSingleSpan();\n                        expect(span.status.code).toBe(SpanStatusCode.ERROR);\n                        expect(span.status.message).toBe(err.message);\n                        done();\n                    },\n                });\n        });\n\n        it('closes span when on \"onKeys\" event', (done) => {\n            driver\n                .session()\n                .run('MATCH (n) RETURN n')\n                .subscribe({\n                    onKeys: (keys) => {\n                        const span = getSingleSpan();\n                        assertSpan(span as ReadableSpan);\n                        expect(keys).toEqual(['n']);\n                        done();\n                    },\n                });\n        });\n\n        it('when passing \"onKeys\" and onCompleted, span is closed in onCompleted, and response hook is called', (done) => {\n            instrumentation.disable();\n            instrumentation.setConfig({ responseHook: (span) => span.setAttribute('test', 'cool') });\n            instrumentation.enable();\n\n            driver\n                .session()\n                .run('MATCH (n) RETURN n')\n                .subscribe({\n                    onKeys: () => {\n                        const spans = getTestSpans();\n                        expect(spans.length).toBe(0);\n                    },\n                    onCompleted: () => {\n                        const span = getSingleSpan();\n                        assertSpan(span as ReadableSpan);\n                        expect(span.attributes['test']).toBe('cool');\n                        done();\n                    },\n                });\n        });\n\n        it('handles multiple promises', async () => {\n            await Promise.all([\n                driver.session().run('MATCH (n) RETURN n'),\n                driver.session().run('MATCH (k) RETURN k'),\n                driver.session().run('MATCH (d) RETURN d'),\n            ]);\n            const spans = getTestSpans();\n            expect(spans.length).toBe(3);\n            for (let span of spans) {\n                assertSpan(span as ReadableSpan);\n                expect(span.attributes[SemanticAttributes.DB_OPERATION]).toBe('MATCH');\n            }\n        });\n\n        it('captures operation with trailing white spaces', async () => {\n            await driver.session().run('  MATCH (k) RETURN k ');\n            const span = getSingleSpan();\n            expect(span.attributes[SemanticAttributes.DB_OPERATION]).toBe('MATCH');\n        });\n\n        it('set module versions when config is set', async () => {\n            instrumentation.disable();\n            instrumentation.setConfig({ moduleVersionAttributeName: 'module.version' });\n            instrumentation.enable();\n            await driver.session().run('CREATE (n:MyLabel) RETURN n');\n\n            const span = getSingleSpan();\n            expect(span.attributes['module.version']).toMatch(/\\d{1,4}\\.\\d{1,4}\\.\\d{1,5}.*/);\n        });\n\n        it('does not capture any span when ignoreOrphanedSpans is set to true', async () => {\n            instrumentation.disable();\n            instrumentation.setConfig({ ignoreOrphanedSpans: true });\n            instrumentation.enable();\n            await context.with(ROOT_CONTEXT, async () => {\n                await driver.session().run('CREATE (n:MyLabel) RETURN n');\n            });\n\n            const spans = getTestSpans();\n            expect(spans.length).toBe(0);\n        });\n\n        it('does capture span when ignoreOrphanedSpans is set to true and has parent span', async () => {\n            instrumentation.disable();\n            instrumentation.setConfig({ ignoreOrphanedSpans: true });\n            instrumentation.enable();\n            const parent = trace.getTracerProvider().getTracer('test-tracer').startSpan('main');\n            await context.with(trace.setSpan(context.active(), parent), () =>\n                driver.session().run('CREATE (n:MyLabel) RETURN n')\n            );\n\n            const spans = getTestSpans();\n            expect(spans.length).toBe(1);\n        });\n\n        it('responseHook works with promise', async () => {\n            instrumentation.disable();\n            instrumentation.setConfig({\n                responseHook: (span, response) => {\n                    span.setAttribute('db.response', normalizeResponse(response));\n                },\n            });\n            instrumentation.enable();\n\n            const res = await driver\n                .session()\n                .run('CREATE (n:Rick), (b:Meeseeks { purpose: \"help\"}), (c:Morty) RETURN *');\n            expect(res.records.length).toBe(1);\n\n            const span = getSingleSpan();\n            assertSpan(span as ReadableSpan);\n            expect(JSON.parse(span.attributes['db.response'] as string)).toEqual([\n                {\n                    b: { labels: ['Meeseeks'], properties: { purpose: 'help' } },\n                    c: { labels: ['Morty'], properties: {} },\n                    n: { labels: ['Rick'], properties: {} },\n                },\n            ]);\n        });\n\n        it('responseHook works with subscribe', (done) => {\n            instrumentation.disable();\n            instrumentation.setConfig({\n                responseHook: (span, response) => {\n                    span.setAttribute('db.response', normalizeResponse(response));\n                },\n            });\n            instrumentation.enable();\n\n            driver\n                .session()\n                .run('CREATE (n:Rick), (b:Meeseeks { purpose: \"help\"}), (c:Morty) RETURN *')\n                .subscribe({\n                    onCompleted: () => {\n                        const span = getSingleSpan();\n                        assertSpan(span as ReadableSpan);\n                        expect(JSON.parse(span.attributes['db.response'] as string)).toEqual([\n                            {\n                                b: { labels: ['Meeseeks'], properties: { purpose: 'help' } },\n                                c: { labels: ['Morty'], properties: {} },\n                                n: { labels: ['Rick'], properties: {} },\n                            },\n                        ]);\n                        done();\n                    },\n                });\n        });\n\n        it('does not fail when responseHook throws', async () => {\n            instrumentation.disable();\n            instrumentation.setConfig({\n                responseHook: () => {\n                    throw new Error('I throw..');\n                },\n            });\n            instrumentation.enable();\n            await driver.session().run('CREATE (n:MyLabel) RETURN n');\n            const span = getSingleSpan();\n            assertSpan(span as ReadableSpan);\n        });\n    });\n\n    describe('transaction', async () => {\n        it('instruments session readTransaction', async () => {\n            await driver.session().readTransaction((txc) => {\n                return txc.run('MATCH (person:Person) RETURN person.name AS name');\n            });\n            const span = getSingleSpan();\n            assertSpan(span as ReadableSpan);\n            expect(span.attributes[SemanticAttributes.DB_OPERATION]).toBe('MATCH');\n            expect(span.attributes[SemanticAttributes.DB_STATEMENT]).toBe(\n                'MATCH (person:Person) RETURN person.name AS name'\n            );\n        });\n\n        it('instruments session writeTransaction', async () => {\n            await driver.session().writeTransaction((txc) => {\n                return txc.run('MATCH (person:Person) RETURN person.name AS name');\n            });\n            const span = getSingleSpan();\n            assertSpan(span as ReadableSpan);\n            expect(span.attributes[SemanticAttributes.DB_OPERATION]).toBe('MATCH');\n            expect(span.attributes[SemanticAttributes.DB_STATEMENT]).toBe(\n                'MATCH (person:Person) RETURN person.name AS name'\n            );\n        });\n\n        it('instruments explicit transactions', async () => {\n            const txc = driver.session().beginTransaction();\n            await txc.run('MERGE (bob:Person {name: \"Bob\"}) RETURN bob.name AS name');\n            await txc.run('MERGE (adam:Person {name: \"Adam\"}) RETURN adam.name AS name');\n            await txc.commit();\n\n            const spans = getTestSpans();\n            expect(spans.length).toBe(2);\n        });\n    });\n\n    describe('rxSession', () => {\n        it('instruments \"run\"', (done) => {\n            driver\n                .rxSession()\n                .run('MERGE (n:MyLabel) RETURN n')\n                .records()\n                .subscribe({\n                    complete: () => {\n                        const span = getSingleSpan();\n                        assertSpan(span as ReadableSpan);\n                        done();\n                    },\n                });\n        });\n\n        it('works when piping response', (done) => {\n            const rxSession = driver.rxSession();\n            rxSession\n                .run('MERGE (james:Person {name: $nameParam}) RETURN james.name AS name', {\n                    nameParam: 'Bob',\n                })\n                .records()\n                .pipe(map((record) => record.get('name')))\n                .subscribe({\n                    next: () => {},\n                    complete: () => {\n                        const span = getSingleSpan();\n                        assertSpan(span as ReadableSpan);\n                        expect(span.attributes[SemanticAttributes.DB_STATEMENT]).toBe(\n                            'MERGE (james:Person {name: $nameParam}) RETURN james.name AS name'\n                        );\n                        done();\n                    },\n                    error: () => {},\n                });\n        });\n\n        it('works with response hook', (done) => {\n            instrumentation.disable();\n            instrumentation.setConfig({\n                responseHook: (span, response) => {\n                    span.setAttribute('db.response', normalizeResponse(response));\n                },\n            });\n            instrumentation.enable();\n\n            driver\n                .rxSession()\n                .run('MERGE (n:MyLabel) RETURN n')\n                .records()\n                .subscribe({\n                    complete: () => {\n                        const span = getSingleSpan();\n                        assertSpan(span as ReadableSpan);\n                        expect(span.attributes['db.response']).toBe(`[{\"n\":{\"labels\":[\"MyLabel\"],\"properties\":{}}}]`);\n                        done();\n                    },\n                });\n        });\n    });\n\n    describe('reactive transaction', () => {\n        it('instruments rx session readTransaction', (done) => {\n            driver\n                .rxSession()\n                .readTransaction((txc) =>\n                    txc\n                        .run('MATCH (person:Person) RETURN person.name AS name')\n                        .records()\n                        .pipe(map((record) => record.get('name')))\n                )\n                .subscribe({\n                    next: () => {},\n                    complete: () => {\n                        const span = getSingleSpan();\n                        assertSpan(span as ReadableSpan);\n                        expect(span.attributes[SemanticAttributes.DB_STATEMENT]).toBe(\n                            'MATCH (person:Person) RETURN person.name AS name'\n                        );\n                        done();\n                    },\n                    error: () => {},\n                });\n        });\n\n        it('instruments rx session writeTransaction', (done) => {\n            driver\n                .rxSession()\n                .writeTransaction((txc) =>\n                    txc\n                        .run('MATCH (person:Person) RETURN person.name AS name')\n                        .records()\n                        .pipe(map((record) => record.get('name')))\n                )\n                .subscribe({\n                    next: () => {},\n                    complete: () => {\n                        const span = getSingleSpan();\n                        assertSpan(span as ReadableSpan);\n                        expect(span.attributes[SemanticAttributes.DB_STATEMENT]).toBe(\n                            'MATCH (person:Person) RETURN person.name AS name'\n                        );\n                        done();\n                    },\n                    error: () => {},\n                });\n        });\n\n        it('instruments rx explicit transactions', (done) => {\n            driver\n                .rxSession()\n                .beginTransaction()\n                .pipe(\n                    mergeMap((txc) =>\n                        concat(\n                            txc\n                                .run('MERGE (bob:Person {name: $nameParam}) RETURN bob.name AS name', {\n                                    nameParam: 'Bob',\n                                })\n                                .records()\n                                .pipe(map((r: any) => r.get('name'))),\n                            txc\n                                .run('MERGE (adam:Person {name: $nameParam}) RETURN adam.name AS name', {\n                                    nameParam: 'Adam',\n                                })\n                                .records()\n                                .pipe(map((r: any) => r.get('name'))),\n                            txc.commit()\n                        )\n                    )\n                )\n                .subscribe({\n                    next: () => {},\n                    complete: () => {\n                        const spans = getTestSpans();\n                        expect(spans.length).toBe(2);\n                        done();\n                    },\n                    error: () => {},\n                });\n        });\n    });\n\n    describe('routing mode', () => {\n        // When the connection string starts with \"neo4j\" routing mode is used\n        let routingDriver: Driver;\n        const version = require('neo4j-driver/package.json').version;\n        const shouldCheck = !['4.0.0', '4.0.1', '4.0.2'].includes(version);\n\n        before(() => {\n            if (shouldCheck) {\n                routingDriver = neo4j.driver('neo4j://localhost:11011', neo4j.auth.basic('neo4j', 'test'));\n            }\n        });\n\n        after(async () => {\n            shouldCheck && (await routingDriver.close());\n        });\n\n        it('instruments as expected in routing mode', async () => {\n            if (!shouldCheck) {\n                // Versions 4.0.0, 4.0.1 and 4.0.2 of neo4j-driver don't allow connection to local neo4j in routing mode.\n                console.log(`Skipping unsupported test for version ${version}`);\n                return;\n            }\n\n            await routingDriver.session().run('CREATE (n:MyLabel) RETURN n');\n\n            const span = getSingleSpan();\n            assertSpan(span as ReadableSpan);\n        });\n    });\n});\n"]}