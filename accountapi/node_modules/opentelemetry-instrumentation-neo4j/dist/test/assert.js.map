{"version":3,"file":"assert.js","sourceRoot":"","sources":["../../test/assert.ts"],"names":[],"mappings":";;;;;;AAAA,oDAA4B;AAE5B,8EAAyE;AACzE,4CAA8D;AAEvD,MAAM,UAAU,GAAG,CAAC,IAAkB,EAAE,EAAE;IAC7C,gBAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,cAAQ,CAAC,MAAM,CAAC,CAAC;IACxC,gBAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,oBAAc,CAAC,KAAK,CAAC,CAAC;IACpD,gBAAM,CAAC,IAAI,CAAC,UAAU,CAAC,yCAAkB,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IACvE,gBAAM,CAAC,IAAI,CAAC,UAAU,CAAC,yCAAkB,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IACrE,gBAAM,CAAC,IAAI,CAAC,UAAU,CAAC,yCAAkB,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IACrE,gBAAM,CAAC,IAAI,CAAC,UAAU,CAAC,yCAAkB,CAAC,aAAa,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;IAC/E,gBAAM,CAAC,IAAI,CAAC,UAAU,CAAC,yCAAkB,CAAC,aAAa,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACzE,gBAAM,CAAC,IAAI,CAAC,UAAU,CAAC,yCAAkB,CAAC,aAAa,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;AAChF,CAAC,CAAC;AATW,QAAA,UAAU,cASrB","sourcesContent":["import expect from 'expect';\nimport { ReadableSpan } from '@opentelemetry/sdk-trace-base';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions';\nimport { SpanKind, SpanStatusCode } from '@opentelemetry/api';\n\nexport const assertSpan = (span: ReadableSpan) => {\n    expect(span.kind).toBe(SpanKind.CLIENT);\n    expect(span.status.code).toBe(SpanStatusCode.UNSET);\n    expect(span.attributes[SemanticAttributes.DB_SYSTEM]).toEqual('neo4j');\n    expect(span.attributes[SemanticAttributes.DB_NAME]).toEqual('neo4j');\n    expect(span.attributes[SemanticAttributes.DB_USER]).toEqual('neo4j');\n    expect(span.attributes[SemanticAttributes.NET_PEER_NAME]).toEqual('localhost');\n    expect(span.attributes[SemanticAttributes.NET_PEER_PORT]).toEqual(11011);\n    expect(span.attributes[SemanticAttributes.NET_TRANSPORT]).toEqual('IP.TCP');\n};\n"]}