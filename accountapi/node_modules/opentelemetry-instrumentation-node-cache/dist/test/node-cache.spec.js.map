{"version":3,"file":"node-cache.spec.js","sourceRoot":"","sources":["../../test/node-cache.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import 'mocha';\nimport expect from 'expect';\nimport { getTestSpans, resetMemoryExporter, registerInstrumentationTesting } from '@opentelemetry/contrib-test-utils';\nimport { NodeCacheInstrumentation } from '../src';\nimport { context, ROOT_CONTEXT } from '@opentelemetry/api';\n\nconst DB_RESPONSE = 'db.response';\nconst instrumentation = registerInstrumentationTesting(new NodeCacheInstrumentation());\ninstrumentation.enable();\n\nimport NodeCache from 'node-cache';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions';\n\ndescribe('node-cache instrumentation', () => {\n    let cache = new NodeCache();\n\n    const getSingleSpan = () => {\n        const spans = getTestSpans();\n        expect(spans.length).toBe(1);\n        return spans[0];\n    };\n\n    beforeEach(async () => {\n        resetMemoryExporter();\n        cache = new NodeCache();\n        instrumentation.setConfig({\n            responseHook: (span, { response }) =>\n                span.setAttribute(DB_RESPONSE, typeof response === 'object' ? JSON.stringify(response) : response),\n        });\n        instrumentation.enable();\n    });\n\n    afterEach(async () => {\n        instrumentation.disable();\n    });\n\n    describe('instruments functions', () => {\n        it('set', () => {\n            cache.set('some-key', 'cool');\n            const span = getSingleSpan();\n\n            expect(span.name).toBe('node-cache set');\n            expect(span.attributes[SemanticAttributes.DB_SYSTEM]).toBe('node-cache');\n            expect(span.attributes[SemanticAttributes.DB_OPERATION]).toBe('set');\n            expect(span.attributes[DB_RESPONSE]).toBe(true);\n        });\n\n        it('get', () => {\n            cache.set('some-key', 'some-value');\n            resetMemoryExporter();\n            cache.get('some-key');\n            const span = getSingleSpan();\n\n            expect(span.name).toBe('node-cache get');\n            expect(span.attributes[SemanticAttributes.DB_SYSTEM]).toBe('node-cache');\n            expect(span.attributes[SemanticAttributes.DB_OPERATION]).toBe('get');\n            expect(span.attributes[SemanticAttributes.DB_STATEMENT]).toBe('get some-key');\n            expect(span.attributes[DB_RESPONSE]).toBe('some-value');\n        });\n\n        it('has', () => {\n            cache.has('some-key');\n            const span = getSingleSpan();\n\n            expect(span.name).toBe('node-cache has');\n            expect(span.attributes[SemanticAttributes.DB_SYSTEM]).toBe('node-cache');\n            expect(span.attributes[SemanticAttributes.DB_OPERATION]).toBe('has');\n            expect(span.attributes[SemanticAttributes.DB_STATEMENT]).toBe('has some-key');\n            expect(span.attributes[DB_RESPONSE]).toBe(false);\n        });\n\n        it('take', () => {\n            cache.set('some-key', 'some-value');\n            resetMemoryExporter();\n            // Does not exist on versions <= 5.1.1, need to hack this\n            if (!cache['take']) return;\n            cache['take']('some-key');\n            const span = getSingleSpan();\n\n            expect(span.name).toBe('node-cache take');\n            expect(span.attributes[SemanticAttributes.DB_SYSTEM]).toBe('node-cache');\n            expect(span.attributes[SemanticAttributes.DB_OPERATION]).toBe('take');\n            expect(span.attributes[SemanticAttributes.DB_STATEMENT]).toBe('take some-key');\n            expect(span.attributes[DB_RESPONSE]).toBe('some-value');\n        });\n\n        it('del', () => {\n            cache.set('some-key', 'some-value');\n            resetMemoryExporter();\n            cache.del('some-key');\n            const span = getSingleSpan();\n\n            expect(span.name).toBe('node-cache del');\n            expect(span.attributes[SemanticAttributes.DB_SYSTEM]).toBe('node-cache');\n            expect(span.attributes[SemanticAttributes.DB_OPERATION]).toBe('del');\n            expect(span.attributes[SemanticAttributes.DB_STATEMENT]).toBe('del some-key');\n            expect(span.attributes[DB_RESPONSE]).toBe(1);\n        });\n\n        it('mdel', () => {\n            cache.set('some-key', 'some-value');\n            cache.set('some-other-key', 'some-value');\n            resetMemoryExporter();\n            cache.del(['some-key', 'some-other-key']);\n            const span = getSingleSpan();\n\n            expect(span.name).toBe('node-cache del');\n            expect(span.attributes[SemanticAttributes.DB_SYSTEM]).toBe('node-cache');\n            expect(span.attributes[SemanticAttributes.DB_OPERATION]).toBe('del');\n            expect(span.attributes[SemanticAttributes.DB_STATEMENT]).toBe('del some-key,some-other-key');\n            expect(span.attributes[DB_RESPONSE]).toBe(2);\n        });\n\n        it('mget', () => {\n            cache.set('a', 'x');\n            cache.set('b', 'y');\n            resetMemoryExporter();\n            const res = cache.mget(['a', 'b', 'c']);\n            expect(res).toEqual({ a: 'x', b: 'y' });\n            const span = getSingleSpan();\n\n            expect(span.name).toBe('node-cache mget');\n            expect(span.attributes[SemanticAttributes.DB_SYSTEM]).toBe('node-cache');\n            expect(span.attributes[SemanticAttributes.DB_OPERATION]).toBe('mget');\n            expect(span.attributes[SemanticAttributes.DB_STATEMENT]).toBe('mget a,b,c');\n            expect(JSON.parse(span.attributes[DB_RESPONSE] as string)).toEqual({ a: 'x', b: 'y' });\n        });\n\n        it('mset', () => {\n            cache.mset([\n                { key: 'a', val: 'x' },\n                { key: 'b', val: 'y' },\n            ]);\n            const span = getSingleSpan();\n\n            expect(span.name).toBe('node-cache mset');\n            expect(span.attributes[SemanticAttributes.DB_SYSTEM]).toBe('node-cache');\n            expect(span.attributes[SemanticAttributes.DB_OPERATION]).toBe('mset');\n            expect(span.attributes[SemanticAttributes.DB_STATEMENT]).toBe('mset a,b');\n            expect(span.attributes[DB_RESPONSE]).toEqual(true);\n        });\n\n        it('getTtl', () => {\n            cache.getTtl('some-key');\n            const span = getSingleSpan();\n\n            expect(span.name).toBe('node-cache getTtl');\n            expect(span.attributes[SemanticAttributes.DB_SYSTEM]).toBe('node-cache');\n            expect(span.attributes[SemanticAttributes.DB_OPERATION]).toBe('getTtl');\n            expect(span.attributes[SemanticAttributes.DB_STATEMENT]).toBe('getTtl some-key');\n        });\n\n        it('ttl', () => {\n            cache.ttl('some-key', 12345);\n            const span = getSingleSpan();\n\n            expect(span.name).toBe('node-cache ttl');\n            expect(span.attributes[SemanticAttributes.DB_SYSTEM]).toBe('node-cache');\n            expect(span.attributes[SemanticAttributes.DB_OPERATION]).toBe('ttl');\n            expect(span.attributes[SemanticAttributes.DB_STATEMENT]).toBe('ttl some-key 12345');\n        });\n\n        it('flushAll', () => {\n            cache.flushAll();\n            const span = getSingleSpan();\n\n            expect(span.name).toBe('node-cache flushAll');\n            expect(span.attributes[SemanticAttributes.DB_SYSTEM]).toBe('node-cache');\n            expect(span.attributes[SemanticAttributes.DB_OPERATION]).toBe('flushAll');\n            expect(span.attributes[SemanticAttributes.DB_STATEMENT]).toBe('flushAll');\n        });\n    });\n\n    describe('requireParentSpan', () => {\n        beforeEach(() => {\n            instrumentation.disable();\n            instrumentation.setConfig({\n                requireParentSpan: true,\n            });\n            instrumentation.enable();\n        });\n\n        it('should not start span on node-cache method', () => {\n            context.with(ROOT_CONTEXT, () => {\n                cache.get('test');\n            });\n            const spans = getTestSpans();\n            expect(spans.length).toBe(0);\n        });\n    });\n\n    describe('moduleVersionAttributeName', () => {\n        const VERSION_ATTR_NAME = 'ver';\n        beforeEach(() => {\n            instrumentation.disable();\n            instrumentation.setConfig({\n                requestHook: (span, { moduleVersion }) => {\n                    span.setAttribute(VERSION_ATTR_NAME, moduleVersion);\n                },\n            });\n            instrumentation.enable();\n        });\n\n        it('should not start span on node-cache method', () => {\n            cache.get('test');\n            const span = getSingleSpan();\n            expect(span.attributes[VERSION_ATTR_NAME]).toBeDefined();\n        });\n    });\n\n    describe('requestHook', () => {\n        beforeEach(() => {\n            instrumentation.disable();\n            instrumentation.setConfig({\n                requestHook: (span, { operation, args }) => {\n                    if (operation === 'set') {\n                        span.setAttribute('db.payload', JSON.stringify({ value: args[1], ttl: args[2] }));\n                    }\n                    if (operation === 'mset') {\n                        span.setAttribute('db.payload', JSON.stringify(args[0]));\n                    }\n                },\n            });\n            instrumentation.enable();\n        });\n\n        it('captures set payload using requestHook', () => {\n            cache.set('some-key', 'some-value', 12345);\n            const span = getSingleSpan();\n            expect(span.attributes['db.payload']).toBe('{\"value\":\"some-value\",\"ttl\":12345}');\n        });\n\n        it('captures mset payload using requestHook', () => {\n            cache.mset([{ key: 'some-key', val: 'some-val', ttl: 12345 }]);\n            const span = getSingleSpan();\n            expect(span.attributes['db.payload']).toBe('[{\"key\":\"some-key\",\"val\":\"some-val\",\"ttl\":12345}]');\n        });\n    });\n});\n"]}