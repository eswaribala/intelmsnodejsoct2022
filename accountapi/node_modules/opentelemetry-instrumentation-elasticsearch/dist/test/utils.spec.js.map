{"version":3,"file":"utils.spec.js","sourceRoot":"","sources":["../../test/utils.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import 'mocha';\nimport { stub, assert, spy } from 'sinon';\nimport { expect } from 'chai';\nimport * as Utils from '../src/utils';\nimport { SpanKind, SpanStatusCode } from '@opentelemetry/api';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions';\n\ndescribe('elasticsearch utils', () => {\n    const spanMock = {\n        recordException: (err) => {},\n        setStatus: (obj) => {},\n        end: () => {},\n        setAttributes: (obj) => {},\n    };\n\n    context('defaultDbStatementSerializer', () => {\n        it('should serialize', () => {\n            const result = Utils.defaultDbStatementSerializer('operationName', { index: 'test' }, {});\n            expect(result).to.equal('{\"params\":{\"index\":\"test\"},\"options\":{}}');\n        });\n    });\n\n    context('onError', () => {\n        it('should record error', () => {\n            const recordExceptionStub = stub(spanMock, 'recordException');\n            const setStatusStub = stub(spanMock, 'setStatus');\n            const endStub = stub(spanMock, 'end');\n\n            const error = new Error('test error');\n\n            // @ts-ignore\n            Utils.onError(spanMock, error);\n\n            assert.calledOnce(recordExceptionStub);\n            assert.calledWith(recordExceptionStub, error);\n\n            assert.calledOnce(setStatusStub);\n            assert.calledWith(setStatusStub, { code: SpanStatusCode.ERROR, message: error.message });\n\n            assert.calledOnce(endStub);\n\n            recordExceptionStub.restore();\n            setStatusStub.restore();\n            endStub.restore();\n        });\n    });\n\n    context('onResponse', () => {\n        it('should record response without responseHook', () => {\n            const setAttributesStub = stub(spanMock, 'setAttributes');\n            const setStatusStub = stub(spanMock, 'setStatus');\n            const endStub = stub(spanMock, 'end');\n\n            // @ts-ignore\n            Utils.onResponse(spanMock, { meta: { connection: { url: 'http://localhost' } } });\n\n            assert.calledOnce(setAttributesStub);\n            assert.calledOnce(setStatusStub);\n            assert.calledOnce(endStub);\n            assert.calledWith(setStatusStub, { code: SpanStatusCode.OK });\n\n            setAttributesStub.restore();\n            setStatusStub.restore();\n            endStub.restore();\n        });\n\n        it('should record response with responseHook', () => {\n            const setAttributesStub = stub(spanMock, 'setAttributes');\n            const setStatusStub = stub(spanMock, 'setStatus');\n            const endStub = stub(spanMock, 'end');\n\n            const responseHook = spy();\n\n            // @ts-ignore\n            Utils.onResponse(spanMock, { meta: { connection: { url: 'http://localhost' } } }, responseHook);\n\n            assert.calledOnce(setAttributesStub);\n            assert.calledOnce(setStatusStub);\n            assert.calledOnce(endStub);\n            assert.calledWith(setStatusStub, { code: SpanStatusCode.OK });\n\n            expect(responseHook.called).to.be.true;\n\n            setAttributesStub.restore();\n            setStatusStub.restore();\n            endStub.restore();\n        });\n    });\n\n    context('getNetAttributes', () => {\n        const url = 'http://localhost:9200';\n        const attributes = Utils.getNetAttributes(url);\n\n        it('should get hostname from url', () => {\n            expect(attributes[SemanticAttributes.NET_PEER_NAME]).to.equal('localhost');\n        });\n\n        it('should get hostname from url', () => {\n            expect(attributes[SemanticAttributes.NET_PEER_PORT]).to.equal('9200');\n        });\n\n        it('should set net.transport', () => {\n            expect(attributes[SemanticAttributes.NET_TRANSPORT]).to.equal('IP.TCP');\n        });\n    });\n\n    context('getPort', () => {\n        it('should get port', () => {\n            const result = Utils.getPort('3030', 'http:');\n            expect(result).to.equal('3030');\n        });\n\n        it('should get port from http protocol', () => {\n            const result = Utils.getPort('', 'http:');\n            expect(result).to.equal('80');\n        });\n\n        it('should get port from https protocol', () => {\n            const result = Utils.getPort('', 'https:');\n            expect(result).to.equal('443');\n        });\n    });\n\n    context('normalizeArguments', () => {\n        it('should normalize with callback only', () => {\n            const callbackFunction = () => {};\n            // @ts-ignore\n            const [params, options, callback] = Utils.normalizeArguments(callbackFunction);\n\n            expect(params).to.be.empty;\n            expect(options).to.be.empty;\n            expect(callback).to.be.equal(callbackFunction);\n        });\n\n        it('should normalize with params only', () => {\n            // @ts-ignore\n            const [params, options, callback] = Utils.normalizeArguments({ index: 'test' });\n\n            expect(params).to.deep.equal({ index: 'test' });\n            expect(options).to.be.undefined;\n            expect(callback).to.be.undefined;\n        });\n    });\n\n    context('getIndexName', () => {\n        it('should accept index string', () => {\n            const index = Utils.getIndexName({ index: 'test' });\n            expect(index).to.equal('test');\n        });\n\n        it('should accept index array', () => {\n            const indexes = Utils.getIndexName({ index: ['index1', 'index2'] });\n\n            expect(indexes).to.equal('index1,index2');\n        });\n\n        it('should accept no index', () => {\n            const undefinedParams = Utils.getIndexName(undefined);\n            const emptyObject = Utils.getIndexName({});\n\n            expect(undefinedParams).to.be.undefined;\n            expect(emptyObject).to.be.undefined;\n        });\n\n        it('should ignore unexpected index', () => {\n            const functionIndex = Utils.getIndexName({ index: () => {} });\n            const objectIndex = Utils.getIndexName({ index: {} });\n\n            expect(functionIndex).to.be.undefined;\n            expect(objectIndex).to.be.undefined;\n        });\n    });\n\n    context('startSpan', () => {\n        const tracerMock = {\n            startSpan: (name, options?, context?): any => {},\n            startActiveSpan: () => {},\n        };\n        it('should start span with client kind', () => {\n            const startSpanStub = stub(tracerMock, 'startSpan');\n\n            Utils.startSpan({\n                tracer: tracerMock,\n                attributes: { testAttribute: 'testValue' },\n            });\n\n            assert.calledOnce(startSpanStub);\n\n            const [operation, options] = startSpanStub.getCall(0).args;\n\n            expect(operation).to.equal('elasticsearch.request');\n            expect(options.kind).to.equal(SpanKind.CLIENT);\n            expect(options.attributes[SemanticAttributes.DB_SYSTEM]).to.equal('elasticsearch');\n            expect(options.attributes.testAttribute).to.equal('testValue');\n        });\n    });\n});\n"]}