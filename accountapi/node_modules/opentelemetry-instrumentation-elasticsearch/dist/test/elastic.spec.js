"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require("mocha");
const nock_1 = __importDefault(require("nock"));
const chai_1 = require("chai");
const contrib_test_utils_1 = require("@opentelemetry/contrib-test-utils");
const elasticsearch_1 = require("../src/elasticsearch");
const instrumentation = contrib_test_utils_1.registerInstrumentationTesting(new elasticsearch_1.ElasticsearchInstrumentation());
const elasticsearch_2 = require("@elastic/elasticsearch");
const esMockUrl = 'http://localhost:9200';
const esNock = nock_1.default(esMockUrl);
const client = new elasticsearch_2.Client({ node: esMockUrl });
describe('elasticsearch instrumentation', () => {
    before(() => {
        instrumentation.enable();
        // Handle Elasticsearch product check
        esNock.get('/').reply(200, { version: { number: '7.14.0' } }, { 'x-elastic-product': 'Elasticsearch' });
    });
    after(() => {
        instrumentation.disable();
    });
    it('should create valid span', async () => {
        esNock.get('/the-simpsons/_search').reply(200, {});
        esNock.post('/the-simpsons/_doc').reply(200, {});
        await client.index({
            index: 'the-simpsons',
            type: '_doc',
            body: {
                character: 'Homer Simpson',
                quote: 'Doh!',
            },
        });
        await client.search({
            index: 'the-simpsons',
        });
        const spans = contrib_test_utils_1.getTestSpans();
        chai_1.expect(spans === null || spans === void 0 ? void 0 : spans.length).to.equal(2);
        chai_1.expect(spans[0].attributes).to.deep.equal({
            'db.system': 'elasticsearch',
            'elasticsearch.request.indices': 'the-simpsons',
            'db.operation': 'client.index',
            'db.statement': '{"params":{"index":"the-simpsons","type":"_doc","body":{"character":"Homer Simpson","quote":"Doh!"}}}',
            'net.transport': 'IP.TCP',
            'net.peer.name': 'localhost',
            'net.peer.port': '9200',
        });
        chai_1.expect(spans[1].attributes).to.deep.equal({
            'db.system': 'elasticsearch',
            'elasticsearch.request.indices': 'the-simpsons',
            'db.operation': 'client.search',
            'db.statement': '{"params":{"index":"the-simpsons"}}',
            'net.transport': 'IP.TCP',
            'net.peer.name': 'localhost',
            'net.peer.port': '9200',
        });
    });
    it('should create another valid span', async () => {
        esNock.get('/_cluster/settings').reply(200, {});
        await client.cluster.getSettings();
        const spans = contrib_test_utils_1.getTestSpans();
        chai_1.expect(spans === null || spans === void 0 ? void 0 : spans.length).to.equal(1);
        chai_1.expect(spans[0].attributes).to.deep.equal({
            'db.system': 'elasticsearch',
            'db.operation': 'cluster.getSettings',
            'db.statement': '{"params":{},"options":{}}',
            'net.transport': 'IP.TCP',
            'net.peer.name': 'localhost',
            'net.peer.port': '9200',
        });
    });
    it('should not create spans when instrument disabled', async () => {
        esNock.get('/_cluster/settings').reply(200, {});
        instrumentation.disable();
        await client.cluster.getSettings();
        instrumentation.enable();
        const spans = contrib_test_utils_1.getTestSpans();
        chai_1.expect(spans === null || spans === void 0 ? void 0 : spans.length).to.equal(0);
    });
});
//# sourceMappingURL=elastic.spec.js.map