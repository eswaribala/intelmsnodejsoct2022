{"version":3,"file":"elastic.spec.js","sourceRoot":"","sources":["../../test/elastic.spec.ts"],"names":[],"mappings":";;;;;AAAA,iBAAe;AACf,gDAAwB;AACxB,+BAA8B;AAC9B,0EAAiG;AACjG,wDAAoE;AAEpE,MAAM,eAAe,GAAG,mDAA8B,CAAC,IAAI,4CAA4B,EAAE,CAAC,CAAC;AAE3F,0DAAgD;AAChD,MAAM,SAAS,GAAG,uBAAuB,CAAC;AAC1C,MAAM,MAAM,GAAG,cAAI,CAAC,SAAS,CAAC,CAAC;AAC/B,MAAM,MAAM,GAAG,IAAI,sBAAM,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC;AAE/C,QAAQ,CAAC,+BAA+B,EAAE,GAAG,EAAE;IAC3C,MAAM,CAAC,GAAG,EAAE;QACR,eAAe,CAAC,MAAM,EAAE,CAAC;QAEzB,qCAAqC;QACrC,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,QAAQ,EAAE,EAAE,EAAE,EAAE,mBAAmB,EAAE,eAAe,EAAE,CAAC,CAAC;IAC5G,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC,GAAG,EAAE;QACP,eAAe,CAAC,OAAO,EAAE,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;QACtC,MAAM,CAAC,GAAG,CAAC,uBAAuB,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QACnD,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QAEjD,MAAM,MAAM,CAAC,KAAK,CAAC;YACf,KAAK,EAAE,cAAc;YACrB,IAAI,EAAE,MAAM;YACZ,IAAI,EAAE;gBACF,SAAS,EAAE,eAAe;gBAC1B,KAAK,EAAE,MAAM;aAChB;SACJ,CAAC,CAAC;QAEH,MAAM,MAAM,CAAC,MAAM,CAAC;YAChB,KAAK,EAAE,cAAc;SACxB,CAAC,CAAC;QAEH,MAAM,KAAK,GAAG,iCAAY,EAAE,CAAC;QAC7B,aAAM,CAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAClC,aAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;YACtC,WAAW,EAAE,eAAe;YAC5B,+BAA+B,EAAE,cAAc;YAC/C,cAAc,EAAE,cAAc;YAC9B,cAAc,EACV,uGAAuG;YAC3G,eAAe,EAAE,QAAQ;YACzB,eAAe,EAAE,WAAW;YAC5B,eAAe,EAAE,MAAM;SAC1B,CAAC,CAAC;QACH,aAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;YACtC,WAAW,EAAE,eAAe;YAC5B,+BAA+B,EAAE,cAAc;YAC/C,cAAc,EAAE,eAAe;YAC/B,cAAc,EAAE,qCAAqC;YACrD,eAAe,EAAE,QAAQ;YACzB,eAAe,EAAE,WAAW;YAC5B,eAAe,EAAE,MAAM;SAC1B,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kCAAkC,EAAE,KAAK,IAAI,EAAE;QAC9C,MAAM,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QAEhD,MAAM,MAAM,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;QACnC,MAAM,KAAK,GAAG,iCAAY,EAAE,CAAC;QAE7B,aAAM,CAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAClC,aAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC;YACtC,WAAW,EAAE,eAAe;YAC5B,cAAc,EAAE,qBAAqB;YACrC,cAAc,EAAE,4BAA4B;YAC5C,eAAe,EAAE,QAAQ;YACzB,eAAe,EAAE,WAAW;YAC5B,eAAe,EAAE,MAAM;SAC1B,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;QAC9D,MAAM,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;QAEhD,eAAe,CAAC,OAAO,EAAE,CAAC;QAC1B,MAAM,MAAM,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;QACnC,eAAe,CAAC,MAAM,EAAE,CAAC;QACzB,MAAM,KAAK,GAAG,iCAAY,EAAE,CAAC;QAC7B,aAAM,CAAC,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import 'mocha';\nimport nock from 'nock';\nimport { expect } from 'chai';\nimport { getTestSpans, registerInstrumentationTesting } from '@opentelemetry/contrib-test-utils';\nimport { ElasticsearchInstrumentation } from '../src/elasticsearch';\n\nconst instrumentation = registerInstrumentationTesting(new ElasticsearchInstrumentation());\n\nimport { Client } from '@elastic/elasticsearch';\nconst esMockUrl = 'http://localhost:9200';\nconst esNock = nock(esMockUrl);\nconst client = new Client({ node: esMockUrl });\n\ndescribe('elasticsearch instrumentation', () => {\n    before(() => {\n        instrumentation.enable();\n\n        // Handle Elasticsearch product check\n        esNock.get('/').reply(200, { version: { number: '7.14.0' } }, { 'x-elastic-product': 'Elasticsearch' });\n    });\n\n    after(() => {\n        instrumentation.disable();\n    });\n\n    it('should create valid span', async () => {\n        esNock.get('/the-simpsons/_search').reply(200, {});\n        esNock.post('/the-simpsons/_doc').reply(200, {});\n\n        await client.index({\n            index: 'the-simpsons',\n            type: '_doc',\n            body: {\n                character: 'Homer Simpson',\n                quote: 'Doh!',\n            },\n        });\n\n        await client.search({\n            index: 'the-simpsons',\n        });\n\n        const spans = getTestSpans();\n        expect(spans?.length).to.equal(2);\n        expect(spans[0].attributes).to.deep.equal({\n            'db.system': 'elasticsearch',\n            'elasticsearch.request.indices': 'the-simpsons',\n            'db.operation': 'client.index',\n            'db.statement':\n                '{\"params\":{\"index\":\"the-simpsons\",\"type\":\"_doc\",\"body\":{\"character\":\"Homer Simpson\",\"quote\":\"Doh!\"}}}',\n            'net.transport': 'IP.TCP',\n            'net.peer.name': 'localhost',\n            'net.peer.port': '9200',\n        });\n        expect(spans[1].attributes).to.deep.equal({\n            'db.system': 'elasticsearch',\n            'elasticsearch.request.indices': 'the-simpsons',\n            'db.operation': 'client.search',\n            'db.statement': '{\"params\":{\"index\":\"the-simpsons\"}}',\n            'net.transport': 'IP.TCP',\n            'net.peer.name': 'localhost',\n            'net.peer.port': '9200',\n        });\n    });\n\n    it('should create another valid span', async () => {\n        esNock.get('/_cluster/settings').reply(200, {});\n\n        await client.cluster.getSettings();\n        const spans = getTestSpans();\n\n        expect(spans?.length).to.equal(1);\n        expect(spans[0].attributes).to.deep.equal({\n            'db.system': 'elasticsearch',\n            'db.operation': 'cluster.getSettings',\n            'db.statement': '{\"params\":{},\"options\":{}}',\n            'net.transport': 'IP.TCP',\n            'net.peer.name': 'localhost',\n            'net.peer.port': '9200',\n        });\n    });\n\n    it('should not create spans when instrument disabled', async () => {\n        esNock.get('/_cluster/settings').reply(200, {});\n\n        instrumentation.disable();\n        await client.cluster.getSettings();\n        instrumentation.enable();\n        const spans = getTestSpans();\n        expect(spans?.length).to.equal(0);\n    });\n});\n"]}