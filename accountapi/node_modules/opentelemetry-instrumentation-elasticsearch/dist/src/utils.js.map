{"version":3,"file":"utils.js","sourceRoot":"","sources":["../../src/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { Tracer, SpanAttributes, SpanStatusCode, diag, Span, SpanKind } from '@opentelemetry/api';\nimport { DbStatementSerializer, ResponseHook } from './types';\nimport { safeExecuteInTheMiddle } from '@opentelemetry/instrumentation';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions';\nimport { ApiResponse } from '@elastic/elasticsearch/lib/Transport';\n\ninterface StartSpanPayload {\n    tracer: Tracer;\n    attributes: SpanAttributes;\n}\n\nexport function getIndexName(params) {\n    if (!params?.index) {\n        return undefined;\n    }\n\n    if (typeof params.index === 'string') {\n        return params.index;\n    }\n\n    if (Array.isArray(params.index)) {\n        return params.index.join(',');\n    }\n}\n\nexport function startSpan({ tracer, attributes }: StartSpanPayload): Span {\n    return tracer.startSpan('elasticsearch.request', {\n        kind: SpanKind.CLIENT,\n        attributes: {\n            [SemanticAttributes.DB_SYSTEM]: 'elasticsearch',\n            ...attributes,\n        },\n    });\n}\n\nexport function normalizeArguments(params, options, callback) {\n    // Copied normalizeArguments function from @elastic/elasticsearch\n    if (typeof options === 'function') {\n        callback = options;\n        options = {};\n    }\n    if (typeof params === 'function' || params == null) {\n        callback = params;\n        params = {};\n        options = {};\n    }\n    return [params, options, callback];\n}\n\nexport function getPort(port: string, protocol: string): string {\n    if (port) return port;\n\n    if (protocol === 'https:') return '443';\n    if (protocol === 'http:') return '80';\n\n    return '';\n}\n\nexport function getNetAttributes(url: string): SpanAttributes {\n    const { port, protocol, hostname } = new URL(url);\n\n    return {\n        [SemanticAttributes.NET_TRANSPORT]: 'IP.TCP',\n        [SemanticAttributes.NET_PEER_NAME]: hostname,\n        [SemanticAttributes.NET_PEER_PORT]: getPort(port, protocol),\n    };\n}\n\nexport function onResponse(span: Span, result: ApiResponse, responseHook?: ResponseHook) {\n    span.setAttributes({\n        ...getNetAttributes(result.meta.connection.url.toString()),\n    });\n\n    span.setStatus({\n        code: SpanStatusCode.OK,\n    });\n\n    if (responseHook) {\n        safeExecuteInTheMiddle(\n            () => responseHook(span, result),\n            (e) => {\n                if (e) {\n                    diag.error('elasticsearch instrumentation: responseHook error', e);\n                }\n            },\n            true\n        );\n    }\n\n    span.end();\n}\n\nexport function onError(span: Span, err) {\n    span.recordException(err);\n    span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: err.message,\n    });\n\n    span.end();\n}\n\nexport const defaultDbStatementSerializer: DbStatementSerializer = (operation, params, options) =>\n    JSON.stringify({ params, options });\n"]}