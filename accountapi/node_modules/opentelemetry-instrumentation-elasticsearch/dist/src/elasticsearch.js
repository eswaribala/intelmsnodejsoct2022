"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ElasticsearchInstrumentation = void 0;
const api_1 = require("@opentelemetry/api");
const core_1 = require("@opentelemetry/core");
const instrumentation_1 = require("@opentelemetry/instrumentation");
const version_1 = require("./version");
const enums_1 = require("./enums");
const semantic_conventions_1 = require("@opentelemetry/semantic-conventions");
const utils_1 = require("./utils");
const helpers_1 = require("./helpers");
class ElasticsearchInstrumentation extends instrumentation_1.InstrumentationBase {
    constructor(config = {}) {
        super('opentelemetry-instrumentation-elasticsearch', version_1.VERSION, Object.assign({}, config));
        this._isEnabled = false;
    }
    setConfig(config = {}) {
        this._config = Object.assign({}, config);
    }
    init() {
        const apiModuleFiles = helpers_1.ELASTICSEARCH_API_FILES.map(({ path, operationClassName }) => new instrumentation_1.InstrumentationNodeModuleFile(`@elastic/elasticsearch/api/${path}`, ['>=5 <8'], this.patch.bind(this, operationClassName), this.unpatch.bind(this)));
        const module = new instrumentation_1.InstrumentationNodeModuleDefinition(ElasticsearchInstrumentation.component, ['*'], undefined, undefined, apiModuleFiles);
        return module;
    }
    patchObject(operationClassName, object) {
        Object.keys(object).forEach((functionName) => {
            if (typeof object[functionName] === 'object') {
                this.patchObject(functionName, object[functionName]);
            }
            else {
                this._wrap(object, functionName, this.wrappedApiRequest.bind(this, operationClassName, functionName));
            }
        });
    }
    patch(operationClassName, moduleExports, moduleVersion) {
        api_1.diag.debug(`elasticsearch instrumentation: patch elasticsearch ${operationClassName}.`);
        this.moduleVersion = moduleVersion;
        this._isEnabled = true;
        const modulePrototypeKeys = Object.keys(moduleExports.prototype);
        if (modulePrototypeKeys.length > 0) {
            modulePrototypeKeys.forEach((functionName) => {
                this._wrap(moduleExports.prototype, functionName, this.wrappedApiRequest.bind(this, operationClassName, functionName));
            });
            return moduleExports;
        }
        // For versions <= 7.9.0
        const self = this;
        return function (opts) {
            const module = moduleExports(opts);
            self.patchObject(operationClassName, module);
            return module;
        };
    }
    unpatch(moduleExports) {
        api_1.diag.debug(`elasticsearch instrumentation: unpatch elasticsearch.`);
        this._isEnabled = false;
        const modulePrototypeKeys = Object.keys(moduleExports.prototype);
        if (modulePrototypeKeys.length > 0) {
            modulePrototypeKeys.forEach((functionName) => {
                this._unwrap(moduleExports.prototype, functionName);
            });
        }
        else {
            // Unable to unwrap function for versions <= 7.9.0. Using _isEnabled flag instead.
        }
    }
    wrappedApiRequest(apiClassName, functionName, originalFunction) {
        const self = this;
        return function (...args) {
            if (!self._isEnabled) {
                return originalFunction.apply(this, args);
            }
            const [params, options, originalCallback] = utils_1.normalizeArguments(args[0], args[1], args[2]);
            const operation = `${apiClassName}.${functionName}`;
            const span = utils_1.startSpan({
                tracer: self.tracer,
                attributes: {
                    [semantic_conventions_1.SemanticAttributes.DB_OPERATION]: operation,
                    [enums_1.AttributeNames.ELASTICSEARCH_INDICES]: utils_1.getIndexName(params),
                    [semantic_conventions_1.SemanticAttributes.DB_STATEMENT]: (self._config.dbStatementSerializer || utils_1.defaultDbStatementSerializer)(operation, params, options),
                },
            });
            self._addModuleVersionIfNeeded(span);
            if (originalCallback) {
                const wrappedCallback = function (err, result) {
                    if (err) {
                        utils_1.onError(span, err);
                    }
                    else {
                        utils_1.onResponse(span, result, self._config.responseHook);
                    }
                    return originalCallback.call(this, err, result);
                };
                return self._callOriginalFunction(span, () => originalFunction.call(this, params, options, wrappedCallback));
            }
            else {
                const promise = self._callOriginalFunction(span, () => originalFunction.apply(this, args));
                promise.then((result) => {
                    utils_1.onResponse(span, result, self._config.responseHook);
                    return result;
                }, (err) => {
                    utils_1.onError(span, err);
                    return err;
                });
                return promise;
            }
        };
    }
    _callOriginalFunction(span, originalFunction) {
        var _a;
        if ((_a = this._config) === null || _a === void 0 ? void 0 : _a.suppressInternalInstrumentation) {
            return api_1.context.with(core_1.suppressTracing(api_1.context.active()), originalFunction);
        }
        else {
            const activeContextWithSpan = api_1.trace.setSpan(api_1.context.active(), span);
            return api_1.context.with(activeContextWithSpan, originalFunction);
        }
    }
    _addModuleVersionIfNeeded(span) {
        if (this._config.moduleVersionAttributeName) {
            span.setAttribute(this._config.moduleVersionAttributeName, this.moduleVersion);
        }
    }
}
exports.ElasticsearchInstrumentation = ElasticsearchInstrumentation;
ElasticsearchInstrumentation.component = '@elastic/elasticsearch';
//# sourceMappingURL=elasticsearch.js.map