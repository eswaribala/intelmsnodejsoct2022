{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/types.ts"],"names":[],"mappings":";;;AAGA,IAAY,yBAEX;AAFD,WAAY,yBAAyB;IACjC,gFAAmD,CAAA;AACvD,CAAC,EAFW,yBAAyB,GAAzB,iCAAyB,KAAzB,iCAAyB,QAEpC","sourcesContent":["import { Span } from '@opentelemetry/api';\nimport { InstrumentationConfig } from '@opentelemetry/instrumentation';\n\nexport enum ExtendedDatabaseAttribute {\n    DB_STATEMENT_PARAMETERS = 'db.statement.parameters',\n}\n\nexport type TypeormResponseCustomAttributesFunction = (span: Span, response: any) => void;\n\nexport interface TypeormInstrumentationConfig extends InstrumentationConfig {\n    /** hook for adding custom attributes using the response payload */\n    responseHook?: TypeormResponseCustomAttributesFunction;\n    /**\n     * If passed, a span attribute will be added to all spans with key of the provided \"moduleVersionAttributeName\"\n     * and value of the module version.\n     */\n    moduleVersionAttributeName?: string;\n    /**\n     * Typeorm operation use mongodb/postgres/mysql/mariadb/etc. under the hood.\n     * If, for example, postgres instrumentation is enabled, a postgres operation will also create\n     * a postgres span describing the communication.\n     * Setting the `suppressInternalInstrumentation` config value to `true` will\n     * cause the instrumentation to suppress instrumentation of underlying operations.\n     */\n    suppressInternalInstrumentation?: boolean;\n    /** Some methods such as `getManyAndCount` can generate internally multiple spans.\n     * To instrument those set this to `true`\n     */\n    enableInternalInstrumentation?: boolean;\n    /** set to `true` if you want to capture the parameter values for parameterized SQL queries (**may leak sensitive information**) */\n    collectParameters?: boolean;\n}\n"]}