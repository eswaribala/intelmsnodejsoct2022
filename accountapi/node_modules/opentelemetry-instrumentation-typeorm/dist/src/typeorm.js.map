{"version":3,"file":"typeorm.js","sourceRoot":"","sources":["../../src/typeorm.ts"],"names":[],"mappings":"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","sourcesContent":["import { Span, SpanKind, SpanStatusCode, trace, context, diag } from '@opentelemetry/api';\nimport { suppressTracing } from '@opentelemetry/core';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions';\nimport { ExtendedDatabaseAttribute, TypeormInstrumentationConfig } from './types';\nimport { getParamNames, isTypeormInternalTracingSuppressed, suppressTypeormInternalTracing } from './utils';\nimport { VERSION } from './version';\nimport type * as typeorm from 'typeorm';\nimport {\n    InstrumentationBase,\n    InstrumentationModuleDefinition,\n    InstrumentationNodeModuleDefinition,\n    InstrumentationNodeModuleFile,\n    isWrapped,\n    safeExecuteInTheMiddle,\n} from '@opentelemetry/instrumentation';\nimport isPromise from 'is-promise';\n\ntype SelectQueryBuilderMethods = keyof typeorm.SelectQueryBuilder<any>;\nconst selectQueryBuilderExecuteMethods: SelectQueryBuilderMethods[] = [\n    'getRawOne',\n    'getCount',\n    'getManyAndCount',\n    'stream',\n    'getMany',\n    'getOneOrFail',\n    'getOne',\n    'getRawAndEntities',\n    'getRawMany',\n];\nconst rawQueryFuncName = 'query';\ntype EntityManagerMethods = keyof typeorm.EntityManager;\nconst functionsUsingEntityPersistExecutor: EntityManagerMethods[] = ['save', 'remove', 'softRemove', 'recover'];\nconst functionsUsingQueryBuilder: EntityManagerMethods[] = [\n    'insert',\n    'update',\n    'delete',\n    'softDelete',\n    'restore',\n    'count',\n    'find',\n    'findAndCount',\n    'findByIds',\n    'findOne',\n    'increment',\n    'decrement',\n];\nconst entityManagerMethods: EntityManagerMethods[] = [\n    ...functionsUsingEntityPersistExecutor,\n    ...functionsUsingQueryBuilder,\n];\n\nexport class TypeormInstrumentation extends InstrumentationBase<any> {\n    protected override _config!: TypeormInstrumentationConfig;\n    constructor(config: TypeormInstrumentationConfig = {}) {\n        super('opentelemetry-instrumentation-typeorm', VERSION, Object.assign({}, config));\n    }\n\n    protected init(): InstrumentationModuleDefinition<any> {\n        const selectQueryBuilder = new InstrumentationNodeModuleFile<any>(\n            'typeorm/query-builder/SelectQueryBuilder.js',\n            ['>0.2.28'],\n            (moduleExports, moduleVersion) => {\n                selectQueryBuilderExecuteMethods.map((method) => {\n                    if (isWrapped(moduleExports.SelectQueryBuilder.prototype?.[method])) {\n                        this._unwrap(moduleExports.SelectQueryBuilder.prototype, method);\n                    }\n                    this._wrap(\n                        moduleExports.SelectQueryBuilder.prototype,\n                        method,\n                        this._patchQueryBuilder(moduleVersion)\n                    );\n                });\n\n                return moduleExports;\n            },\n            (moduleExports) => {\n                selectQueryBuilderExecuteMethods.map((method) => {\n                    if (isWrapped(moduleExports.SelectQueryBuilder.prototype?.[method])) {\n                        this._unwrap(moduleExports.SelectQueryBuilder.prototype, method);\n                    }\n                });\n                return moduleExports;\n            }\n        );\n\n        const connection = new InstrumentationNodeModuleFile<any>(\n            'typeorm/connection/Connection.js',\n            ['>0.2.28 <0.3.0'],\n            (moduleExports, moduleVersion) => {\n                if (isWrapped(moduleExports.Connection.prototype?.[rawQueryFuncName])) {\n                    this._unwrap(moduleExports.Connection.prototype, rawQueryFuncName);\n                }\n                this._wrap(moduleExports.Connection.prototype, rawQueryFuncName, this._patchRawQuery(moduleVersion));\n\n                return moduleExports;\n            },\n            (moduleExports) => {\n                if (isWrapped(moduleExports.Connection.prototype?.[rawQueryFuncName])) {\n                    this._unwrap(moduleExports.Connection.prototype, rawQueryFuncName);\n                }\n                return moduleExports;\n            }\n        );\n\n        const dataSource = new InstrumentationNodeModuleFile<any>(\n            'typeorm/data-source/DataSource.js',\n            ['>=0.3.0'],\n            (moduleExports, moduleVersion) => {\n                if (isWrapped(moduleExports.DataSource.prototype?.[rawQueryFuncName])) {\n                    this._unwrap(moduleExports.DataSource.prototype, rawQueryFuncName);\n                }\n                this._wrap(moduleExports.DataSource.prototype, rawQueryFuncName, this._patchRawQuery(moduleVersion));\n\n                return moduleExports;\n            },\n            (moduleExports) => {\n                if (isWrapped(moduleExports.DataSource.prototype?.[rawQueryFuncName])) {\n                    this._unwrap(moduleExports.DataSource.prototype, rawQueryFuncName);\n                }\n                return moduleExports;\n            }\n        );\n\n        const entityManager = new InstrumentationNodeModuleFile<any>(\n            'typeorm/entity-manager/EntityManager.js',\n            ['>0.2.28'],\n            (moduleExports, moduleVersion) => {\n                entityManagerMethods.map((method) => {\n                    if (isWrapped(moduleExports.EntityManager.prototype?.[method])) {\n                        this._unwrap(moduleExports.EntityManager.prototype, method);\n                    }\n                    this._wrap(\n                        moduleExports.EntityManager.prototype,\n                        method,\n                        this._patchEntityManagerFunction(method, moduleVersion)\n                    );\n                });\n\n                return moduleExports;\n            },\n            (moduleExports) => {\n                entityManagerMethods.map((method) => {\n                    if (isWrapped(moduleExports.EntityManager.prototype?.[method])) {\n                        this._unwrap(moduleExports.EntityManager.prototype, method);\n                    }\n                });\n                return moduleExports;\n            }\n        );\n\n        const module = new InstrumentationNodeModuleDefinition<any>('typeorm', ['>0.2.28'], null, null, [\n            selectQueryBuilder,\n            entityManager,\n            connection,\n            dataSource,\n        ]);\n        return module;\n    }\n\n    private _patchEntityManagerFunction(opName: string, moduleVersion?: string) {\n        const self = this;\n        diag.debug(`typeorm instrumentation: patched EntityManager ${opName} prototype`);\n        return (original: any) => {\n            return function (...args: any[]) {\n                if (isTypeormInternalTracingSuppressed(context.active())) {\n                    return original.apply(this, arguments);\n                }\n                const connectionOptions = this?.connection?.options ?? {};\n                const attributes = {\n                    [SemanticAttributes.DB_SYSTEM]: connectionOptions.type,\n                    [SemanticAttributes.DB_USER]: connectionOptions.username,\n                    [SemanticAttributes.NET_PEER_NAME]: connectionOptions.host,\n                    [SemanticAttributes.NET_PEER_PORT]: connectionOptions.port,\n                    [SemanticAttributes.DB_NAME]: connectionOptions.database,\n                    [SemanticAttributes.DB_OPERATION]: opName,\n                    [SemanticAttributes.DB_STATEMENT]: JSON.stringify(buildStatement(original, args)),\n                };\n\n                if (self._config.moduleVersionAttributeName && moduleVersion) {\n                    attributes[self._config.moduleVersionAttributeName] = moduleVersion;\n                }\n\n                //ignore EntityMetadataNotFoundError\n                try {\n                    if (this.metadata) {\n                        attributes[SemanticAttributes.DB_SQL_TABLE] = this.metadata.tableName;\n                    } else {\n                        const entity = args[0];\n                        const name = typeof entity === 'object' ? entity?.constructor?.name : entity;\n                        const metadata = this.connection.getMetadata(name);\n                        if (metadata?.tableName) {\n                            attributes[SemanticAttributes.DB_SQL_TABLE] = metadata.tableName;\n                        }\n                    }\n                } catch {}\n\n                Object.entries(attributes).forEach(([key, value]) => {\n                    if (value === undefined) delete attributes[key];\n                });\n\n                const span: Span = self.tracer.startSpan(`TypeORM ${opName}`, {\n                    kind: SpanKind.CLIENT,\n                    attributes,\n                });\n\n                const contextWithSpan = trace.setSpan(context.active(), span);\n\n                const traceContext = self._config.enableInternalInstrumentation\n                    ? contextWithSpan\n                    : suppressTypeormInternalTracing(contextWithSpan);\n\n                const contextWithSuppressTracing = self._config.suppressInternalInstrumentation\n                    ? suppressTracing(traceContext)\n                    : traceContext;\n\n                return context.with(contextWithSuppressTracing, () =>\n                    self._endSpan(() => original.apply(this, arguments), span)\n                );\n            };\n        };\n    }\n\n    private _patchQueryBuilder(moduleVersion: string) {\n        const self = this;\n        return (original: any) => {\n            return function () {\n                if (isTypeormInternalTracingSuppressed(context.active())) {\n                    return original.apply(this, arguments);\n                }\n                const queryBuilder: typeorm.QueryBuilder<any> = this;\n                const sql = queryBuilder.getQuery();\n                const parameters = queryBuilder.getParameters();\n                const mainTableName = this.getMainTableName();\n                const operation = queryBuilder.expressionMap.queryType;\n                const connectionOptions: any = queryBuilder?.connection?.options;\n                const attributes = {\n                    [SemanticAttributes.DB_SYSTEM]: connectionOptions.type,\n                    [SemanticAttributes.DB_USER]: connectionOptions.username,\n                    [SemanticAttributes.NET_PEER_NAME]: connectionOptions.host,\n                    [SemanticAttributes.NET_PEER_PORT]: connectionOptions.port,\n                    [SemanticAttributes.DB_NAME]: connectionOptions.database,\n                    [SemanticAttributes.DB_OPERATION]: operation,\n                    [SemanticAttributes.DB_STATEMENT]: sql,\n                    [SemanticAttributes.DB_SQL_TABLE]: mainTableName,\n                };\n                if (self._config.collectParameters) {\n                    try {\n                        attributes[ExtendedDatabaseAttribute.DB_STATEMENT_PARAMETERS] = JSON.stringify(parameters);\n                    } catch (err) {}\n                }\n                const span: Span = self.tracer.startSpan(`TypeORM ${operation} ${mainTableName}`, {\n                    kind: SpanKind.CLIENT,\n                    attributes,\n                });\n\n                const contextWithSpan = trace.setSpan(context.active(), span);\n\n                const traceContext = self._config.enableInternalInstrumentation\n                    ? contextWithSpan\n                    : suppressTypeormInternalTracing(contextWithSpan);\n\n                const contextWithSuppressTracing = self._config?.suppressInternalInstrumentation\n                    ? suppressTracing(traceContext)\n                    : traceContext;\n\n                return context.with(contextWithSuppressTracing, () =>\n                    self._endSpan(() => original.apply(this, arguments), span)\n                );\n            };\n        };\n    }\n\n    private getOperationName(statement: string) {\n        let operation = 'raw query';\n        if (typeof statement === 'string') {\n            statement = statement.trim();\n            try {\n                operation = statement.split(' ')[0].toUpperCase();\n            } catch (e) {}\n        }\n\n        return operation;\n    }\n\n    private _patchRawQuery(moduleVersion: string) {\n        const self = this;\n        return (original: any) => {\n            return function () {\n                if (isTypeormInternalTracingSuppressed(context.active())) {\n                    return original.apply(this, arguments);\n                }\n                const conn: typeorm.Connection = this;\n                const sql = arguments[0];\n                const operation = self.getOperationName(sql);\n                const connectionOptions: any = conn.options;\n                const attributes = {\n                    [SemanticAttributes.DB_SYSTEM]: connectionOptions.type,\n                    [SemanticAttributes.DB_USER]: connectionOptions.username,\n                    [SemanticAttributes.NET_PEER_NAME]: connectionOptions.host,\n                    [SemanticAttributes.NET_PEER_PORT]: connectionOptions.port,\n                    [SemanticAttributes.DB_NAME]: connectionOptions.database,\n                    [SemanticAttributes.DB_OPERATION]: operation,\n                    [SemanticAttributes.DB_STATEMENT]: sql,\n                };\n\n                const span: Span = self.tracer.startSpan(`TypeORM ${operation}`, {\n                    kind: SpanKind.CLIENT,\n                    attributes,\n                });\n\n                const contextWithSpan = trace.setSpan(context.active(), span);\n\n                const traceContext = self._config.enableInternalInstrumentation\n                    ? contextWithSpan\n                    : suppressTypeormInternalTracing(contextWithSpan);\n\n                const contextWithSuppressTracing = self._config?.suppressInternalInstrumentation\n                    ? suppressTracing(traceContext)\n                    : traceContext;\n\n                return context.with(contextWithSuppressTracing, () =>\n                    self._endSpan(() => original.apply(this, arguments), span)\n                );\n            };\n        };\n    }\n\n    private _endSpan(traced: any, span: Span) {\n        const executeResponseHook = (response: any) => {\n            if (this._config?.responseHook) {\n                safeExecuteInTheMiddle(\n                    () => this._config.responseHook(span, response),\n                    (e: Error) => {\n                        if (e) diag.error('typeorm instrumentation: responseHook error', e);\n                    },\n                    true\n                );\n            }\n            return response;\n        };\n        try {\n            const response = traced();\n            if (isPromise(response)) {\n                return Promise.resolve(response)\n                    .then((response) => executeResponseHook(response))\n                    .catch((err) => {\n                        if (err) {\n                            if (typeof err === 'string') {\n                                span.setStatus({ code: SpanStatusCode.ERROR, message: err });\n                            } else {\n                                span.recordException(err);\n                                span.setStatus({ code: SpanStatusCode.ERROR, message: err?.message });\n                            }\n                        }\n                        throw err;\n                    })\n                    .finally(() => span.end());\n            } else {\n                span.end();\n                return executeResponseHook(response);\n            }\n        } catch (error: any) {\n            span.recordException(error);\n            span.setStatus({ code: SpanStatusCode.ERROR, message: error?.message });\n            span.end();\n            throw error;\n        }\n    }\n}\n\nconst buildStatement = (func: Function, args: any[]) => {\n    const paramNames = getParamNames(func);\n    const statement = {};\n    paramNames.forEach((pName, i) => {\n        const value = args[i];\n        if (!value) return;\n\n        try {\n            const stringified = JSON.stringify(value);\n            if (stringified) {\n                statement[pName] = args[i];\n                return;\n            }\n        } catch (err) {}\n        if (value?.name) {\n            statement[pName] = value.name;\n            return;\n        }\n        if (value?.constructor?.name) {\n            statement[pName] = value.constructor.name;\n        }\n    });\n    return statement;\n};\n"]}