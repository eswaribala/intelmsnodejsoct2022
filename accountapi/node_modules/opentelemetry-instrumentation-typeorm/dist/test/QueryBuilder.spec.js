"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require("mocha");
const expect_1 = __importDefault(require("expect"));
const api_1 = require("@opentelemetry/api");
const semantic_conventions_1 = require("@opentelemetry/semantic-conventions");
const src_1 = require("../src");
const contrib_test_utils_1 = require("@opentelemetry/contrib-test-utils");
const instrumentation = contrib_test_utils_1.registerInstrumentationTesting(new src_1.TypeormInstrumentation());
const typeorm = __importStar(require("typeorm"));
const utils_1 = require("./utils");
describe('QueryBuilder', () => {
    beforeEach(() => {
        instrumentation.enable();
    });
    afterEach(() => {
        instrumentation.disable();
    });
    it('getManyAndCount', async () => {
        const connectionOptions = utils_1.defaultOptions;
        const connection = await typeorm.createConnection(connectionOptions);
        const queryBuilder = connection.getRepository(utils_1.User).createQueryBuilder('user');
        const users = await queryBuilder.where('user.id = :userId', { userId: '1' }).getManyAndCount();
        expect_1.default(users.length).toBe(2);
        const typeOrmSpans = contrib_test_utils_1.getTestSpans();
        expect_1.default(typeOrmSpans.length).toBe(1);
        expect_1.default(typeOrmSpans[0].status.code).toBe(api_1.SpanStatusCode.UNSET);
        const attributes = typeOrmSpans[0].attributes;
        expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_SYSTEM]).toBe(connectionOptions.type);
        expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_USER]).toBe(connectionOptions.username);
        expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.NET_PEER_NAME]).toBe(connectionOptions.host);
        expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.NET_PEER_PORT]).toBe(connectionOptions.port);
        expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_NAME]).toBe(connectionOptions.database);
        expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_SQL_TABLE]).toBe('user');
        expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_STATEMENT]).toBe('SELECT "user"."id" AS "user_id", "user"."firstName" AS "user_firstName", "user"."lastName" AS "user_lastName" FROM "user" "user" WHERE "user"."id" = :userId');
        await connection.close();
    });
});
//# sourceMappingURL=QueryBuilder.spec.js.map