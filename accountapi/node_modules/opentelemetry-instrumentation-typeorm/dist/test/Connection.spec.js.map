{"version":3,"file":"Connection.spec.js","sourceRoot":"","sources":["../../test/Connection.spec.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,iBAAe;AACf,oDAA4B;AAC5B,4CAAoD;AACpD,8EAAyE;AACzE,gCAAgD;AAChD,0EAAiG;AAEjG,MAAM,eAAe,GAAG,mDAA8B,CAAC,IAAI,4BAAsB,EAAE,CAAC,CAAC;AACrF,iDAAmC;AACnC,mCAA0C;AAE1C,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;IACxB,KAAK,CAAC,GAAG,EAAE;QACP,eAAe,CAAC,MAAM,EAAE,CAAC;IAC7B,CAAC,CAAC,CAAC;IACH,UAAU,CAAC,GAAG,EAAE;QACZ,eAAe,CAAC,MAAM,EAAE,CAAC;IAC7B,CAAC,CAAC,CAAC;IACH,SAAS,CAAC,GAAG,EAAE;QACX,eAAe,CAAC,OAAO,EAAE,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAC/B,EAAE,CAAC,WAAW,EAAE,KAAK,IAAI,EAAE;YACvB,MAAM,OAAO,GAAG,uBAAe,CAAC;YAChC,MAAM,UAAU,GAAG,MAAM,OAAO,CAAC,gBAAgB,CAAC,uBAAe,CAAC,CAAC;YACnE,MAAM,KAAK,GAAG,oBAAoB,CAAC;YACnC,MAAM,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAC9B,MAAM,YAAY,GAAG,iCAAY,EAAE,CAAC;YAEpC,gBAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACpC,gBAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,oBAAc,CAAC,KAAK,CAAC,CAAC;YAC/D,MAAM,UAAU,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;YAC9C,gBAAM,CAAC,UAAU,CAAC,yCAAkB,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YACpE,gBAAM,CAAC,UAAU,CAAC,yCAAkB,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACtE,gBAAM,CAAC,UAAU,CAAC,yCAAkB,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACnE,gBAAM,CAAC,UAAU,CAAC,yCAAkB,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAChE,MAAM,UAAU,CAAC,KAAK,EAAE,CAAC;QAC7B,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import 'mocha';\nimport expect from 'expect';\nimport { SpanStatusCode } from '@opentelemetry/api';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions';\nimport { TypeormInstrumentation } from '../src';\nimport { getTestSpans, registerInstrumentationTesting } from '@opentelemetry/contrib-test-utils';\n\nconst instrumentation = registerInstrumentationTesting(new TypeormInstrumentation());\nimport * as typeorm from 'typeorm';\nimport { rawQueryOptions } from './utils';\n\ndescribe('Connection', () => {\n    after(() => {\n        instrumentation.enable();\n    });\n    beforeEach(() => {\n        instrumentation.enable();\n    });\n    afterEach(() => {\n        instrumentation.disable();\n    });\n\n    describe('single connection', () => {\n        it('raw query', async () => {\n            const options = rawQueryOptions;\n            const connection = await typeorm.createConnection(rawQueryOptions);\n            const query = 'select * from user';\n            await connection.query(query);\n            const typeOrmSpans = getTestSpans();\n\n            expect(typeOrmSpans.length).toBe(1);\n            expect(typeOrmSpans[0].status.code).toBe(SpanStatusCode.UNSET);\n            const attributes = typeOrmSpans[0].attributes;\n            expect(attributes[SemanticAttributes.DB_SYSTEM]).toBe(options.type);\n            expect(attributes[SemanticAttributes.DB_NAME]).toBe(options.database);\n            expect(attributes[SemanticAttributes.DB_OPERATION]).toBe('SELECT');\n            expect(attributes[SemanticAttributes.DB_STATEMENT]).toBe(query);\n            await connection.close();\n        });\n    });\n});\n"]}