{"version":3,"file":"Repository.spec.js","sourceRoot":"","sources":["../../test/Repository.spec.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,iBAAe;AACf,oDAA4B;AAC5B,gCAAgD;AAChD,0EAAiG;AAEjG,MAAM,eAAe,GAAG,mDAA8B,CAAC,IAAI,4BAAsB,EAAE,CAAC,CAAC;AACrF,mCAA+C;AAC/C,iDAAmC;AACnC,8EAAyE;AAEzE,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE;IACxB,UAAU,CAAC,GAAG,EAAE;QACZ,eAAe,CAAC,MAAM,EAAE,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACX,eAAe,CAAC,OAAO,EAAE,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,cAAc,EAAE,KAAK,IAAI,EAAE;QAC1B,MAAM,UAAU,GAAG,MAAM,OAAO,CAAC,gBAAgB,CAAC,sBAAc,CAAC,CAAC;QAClE,MAAM,IAAI,GAAG,UAAU,CAAC,aAAa,CAAC,YAAI,CAAC,CAAC;QAC5C,MAAM,IAAI,GAAG,IAAI,YAAI,CAAC,CAAC,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;QAC1C,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACxB,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC,YAAY,EAAE,CAAC;QACjD,gBAAM,CAAC,KAAK,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;QACjC,MAAM,KAAK,GAAG,iCAAY,EAAE,CAAC;QAC7B,gBAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAChC,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACtB,MAAM,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC;QACnC,gBAAM,CAAC,UAAU,CAAC,yCAAkB,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACjE,MAAM,UAAU,CAAC,KAAK,EAAE,CAAC;IAC7B,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import 'mocha';\nimport expect from 'expect';\nimport { TypeormInstrumentation } from '../src';\nimport { getTestSpans, registerInstrumentationTesting } from '@opentelemetry/contrib-test-utils';\n\nconst instrumentation = registerInstrumentationTesting(new TypeormInstrumentation());\nimport { defaultOptions, User } from './utils';\nimport * as typeorm from 'typeorm';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions';\n\ndescribe('Repository', () => {\n    beforeEach(() => {\n        instrumentation.enable();\n    });\n\n    afterEach(() => {\n        instrumentation.disable();\n    });\n\n    it('findAndCount', async () => {\n        const connection = await typeorm.createConnection(defaultOptions);\n        const repo = connection.getRepository(User);\n        const user = new User(1, 'aspecto', 'io');\n        await repo.insert(user);\n        const [users, count] = await repo.findAndCount();\n        expect(count).toBeGreaterThan(0);\n        const spans = getTestSpans();\n        expect(spans.length).toEqual(2);\n        const span = spans[0];\n        const attributes = span.attributes;\n        expect(attributes[SemanticAttributes.DB_SQL_TABLE]).toBe('user');\n        await connection.close();\n    });\n});\n"]}