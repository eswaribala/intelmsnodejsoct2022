"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require("mocha");
const expect_1 = __importDefault(require("expect"));
const api_1 = require("@opentelemetry/api");
const semantic_conventions_1 = require("@opentelemetry/semantic-conventions");
const src_1 = require("../src");
const contrib_test_utils_1 = require("@opentelemetry/contrib-test-utils");
const instrumentation = new src_1.TypeormInstrumentation();
const typeorm = __importStar(require("typeorm"));
const utils_1 = require("./utils");
describe('EntityManager', () => {
    after(() => {
        instrumentation.enable();
    });
    beforeEach(() => {
        instrumentation.enable();
    });
    afterEach(() => {
        instrumentation.disable();
    });
    describe('single connection', () => {
        it('save using connection.manager', async () => {
            const options = utils_1.defaultOptions;
            const connection = await typeorm.createConnection(utils_1.defaultOptions);
            const user = new utils_1.User(1, 'aspecto', 'io');
            await connection.manager.save(user);
            const typeOrmSpans = contrib_test_utils_1.getTestSpans();
            expect_1.default(typeOrmSpans.length).toBe(1);
            expect_1.default(typeOrmSpans[0].status.code).toBe(api_1.SpanStatusCode.UNSET);
            const attributes = typeOrmSpans[0].attributes;
            expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_SQL_TABLE]).toBe('user');
            expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_SYSTEM]).toBe(options.type);
            expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_NAME]).toBe(options.database);
            expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_OPERATION]).toBe('save');
            expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_STATEMENT]).toBe(JSON.stringify({ targetOrEntity: user }));
            await connection.close();
        });
        it('save', async () => {
            const options = utils_1.defaultOptions;
            const connection = await typeorm.createConnection(utils_1.defaultOptions);
            const manager = connection.createEntityManager();
            const user = new utils_1.User(1, 'aspecto', 'io');
            await manager.save(user);
            const typeOrmSpans = contrib_test_utils_1.getTestSpans();
            expect_1.default(typeOrmSpans.length).toBe(1);
            expect_1.default(typeOrmSpans[0].status.code).toBe(api_1.SpanStatusCode.UNSET);
            const attributes = typeOrmSpans[0].attributes;
            expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_SQL_TABLE]).toBe('user');
            expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_SYSTEM]).toBe(options.type);
            expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_NAME]).toBe(options.database);
            expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_OPERATION]).toBe('save');
            expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_STATEMENT]).toBe(JSON.stringify({ targetOrEntity: user }));
            await connection.close();
        });
        it('remove', async () => {
            const options = utils_1.defaultOptions;
            const connection = await typeorm.createConnection(utils_1.defaultOptions);
            const manager = connection.createEntityManager();
            const user = new utils_1.User(56, 'aspecto', 'io');
            await manager.save(user);
            await manager.remove(user);
            const typeOrmSpans = contrib_test_utils_1.getTestSpans();
            expect_1.default(typeOrmSpans.length).toBe(2);
            expect_1.default(typeOrmSpans[1].status.code).toBe(api_1.SpanStatusCode.UNSET);
            const attributes = typeOrmSpans[1].attributes;
            expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_SQL_TABLE]).toBe('user');
            expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_SYSTEM]).toBe(options.type);
            expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_NAME]).toBe(options.database);
            expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_OPERATION]).toBe('remove');
            expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_STATEMENT]).toBe(JSON.stringify({ targetOrEntity: { id: 56, firstName: 'aspecto', lastName: 'io' } }));
            await connection.close();
        });
        it('update', async () => {
            const options = utils_1.defaultOptions;
            const connection = await typeorm.createConnection(utils_1.defaultOptions);
            const manager = connection.createEntityManager();
            const user = new utils_1.User(56, 'aspecto', 'io');
            await manager.save(user);
            const partialEntity = { lastName: '.io' };
            await manager.update(utils_1.User, 56, partialEntity);
            const typeOrmSpans = contrib_test_utils_1.getTestSpans();
            expect_1.default(typeOrmSpans.length).toBe(2);
            expect_1.default(typeOrmSpans[1].status.code).toBe(api_1.SpanStatusCode.UNSET);
            const attributes = typeOrmSpans[1].attributes;
            expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_SQL_TABLE]).toBe('user');
            expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_SYSTEM]).toBe(options.type);
            expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_NAME]).toBe(options.database);
            expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_OPERATION]).toBe('update');
            expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_STATEMENT]).toBe(JSON.stringify({ target: 'User', criteria: 56, partialEntity }));
            await connection.close();
        });
        it('Sets failure status when function throws', async () => {
            const connection = await typeorm.createConnection(utils_1.defaultOptions);
            const manager = connection.createEntityManager();
            try {
                await manager.find({});
            }
            catch (err) { }
            const typeOrmSpans = contrib_test_utils_1.getTestSpans();
            expect_1.default(typeOrmSpans.length).toBe(1);
            expect_1.default(typeOrmSpans[0].status.code).toBe(api_1.SpanStatusCode.ERROR);
            expect_1.default(typeOrmSpans[0].status.message).toBe('No metadata for "[object Object]" was found.');
            await connection.close();
        });
    });
    describe('multiple connections', () => {
        const options2 = {
            name: 'connection2',
            type: 'sqlite',
            database: 'connection2.db',
            entities: [utils_1.User],
            synchronize: true,
        };
        it('appends matching connection details to span', async () => {
            const [sqlite1, sqlite2] = await typeorm.createConnections([utils_1.defaultOptions, options2]);
            const manager1 = sqlite1.createEntityManager();
            const manager2 = sqlite2.createEntityManager();
            const user = new utils_1.User(1, 'aspecto', 'io');
            await manager1.save(user);
            await manager2.remove(user);
            const spans = contrib_test_utils_1.getTestSpans();
            expect_1.default(spans.length).toBe(2);
            const sqlite1Span = spans[0];
            const sqlite2Span = spans[1];
            expect_1.default(sqlite1Span.attributes[semantic_conventions_1.SemanticAttributes.DB_SYSTEM]).toBe(utils_1.defaultOptions.type);
            expect_1.default(sqlite1Span.attributes[semantic_conventions_1.SemanticAttributes.DB_NAME]).toBe(utils_1.defaultOptions.database);
            expect_1.default(sqlite1Span.attributes[semantic_conventions_1.SemanticAttributes.DB_OPERATION]).toBe('save');
            expect_1.default(sqlite1Span.attributes[semantic_conventions_1.SemanticAttributes.DB_SQL_TABLE]).toBe('user');
            expect_1.default(sqlite2Span.attributes[semantic_conventions_1.SemanticAttributes.DB_SYSTEM]).toBe(options2.type);
            expect_1.default(sqlite2Span.attributes[semantic_conventions_1.SemanticAttributes.DB_NAME]).toBe(options2.database);
            expect_1.default(sqlite2Span.attributes[semantic_conventions_1.SemanticAttributes.DB_OPERATION]).toBe('remove');
            expect_1.default(sqlite2Span.attributes[semantic_conventions_1.SemanticAttributes.DB_SQL_TABLE]).toBe('user');
            await sqlite1.close();
            await sqlite2.close();
        });
    });
});
//# sourceMappingURL=EntityManager.spec.js.map