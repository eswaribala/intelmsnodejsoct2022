{"version":3,"file":"EntityManager.spec.js","sourceRoot":"","sources":["../../test/EntityManager.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import 'mocha';\nimport expect from 'expect';\nimport { SpanStatusCode } from '@opentelemetry/api';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions';\nimport { TypeormInstrumentation } from '../src';\nimport { getTestSpans } from '@opentelemetry/contrib-test-utils';\n\nconst instrumentation = new TypeormInstrumentation();\nimport * as typeorm from 'typeorm';\nimport { defaultOptions, User } from './utils';\n\ndescribe('EntityManager', () => {\n    after(() => {\n        instrumentation.enable();\n    });\n    beforeEach(() => {\n        instrumentation.enable();\n    });\n    afterEach(() => {\n        instrumentation.disable();\n    });\n\n    describe('single connection', () => {\n        it('save using connection.manager', async () => {\n            const options = defaultOptions;\n            const connection = await typeorm.createConnection(defaultOptions);\n            const user = new User(1, 'aspecto', 'io');\n            await connection.manager.save(user);\n            const typeOrmSpans = getTestSpans();\n\n            expect(typeOrmSpans.length).toBe(1);\n            expect(typeOrmSpans[0].status.code).toBe(SpanStatusCode.UNSET);\n            const attributes = typeOrmSpans[0].attributes;\n            expect(attributes[SemanticAttributes.DB_SQL_TABLE]).toBe('user');\n            expect(attributes[SemanticAttributes.DB_SYSTEM]).toBe(options.type);\n            expect(attributes[SemanticAttributes.DB_NAME]).toBe(options.database);\n            expect(attributes[SemanticAttributes.DB_OPERATION]).toBe('save');\n            expect(attributes[SemanticAttributes.DB_STATEMENT]).toBe(JSON.stringify({ targetOrEntity: user }));\n            await connection.close();\n        });\n\n        it('save', async () => {\n            const options = defaultOptions;\n            const connection = await typeorm.createConnection(defaultOptions);\n            const manager = connection.createEntityManager();\n            const user = new User(1, 'aspecto', 'io');\n            await manager.save(user);\n            const typeOrmSpans = getTestSpans();\n\n            expect(typeOrmSpans.length).toBe(1);\n            expect(typeOrmSpans[0].status.code).toBe(SpanStatusCode.UNSET);\n            const attributes = typeOrmSpans[0].attributes;\n            expect(attributes[SemanticAttributes.DB_SQL_TABLE]).toBe('user');\n            expect(attributes[SemanticAttributes.DB_SYSTEM]).toBe(options.type);\n            expect(attributes[SemanticAttributes.DB_NAME]).toBe(options.database);\n            expect(attributes[SemanticAttributes.DB_OPERATION]).toBe('save');\n            expect(attributes[SemanticAttributes.DB_STATEMENT]).toBe(JSON.stringify({ targetOrEntity: user }));\n            await connection.close();\n        });\n\n        it('remove', async () => {\n            const options = defaultOptions;\n            const connection = await typeorm.createConnection(defaultOptions);\n            const manager = connection.createEntityManager();\n\n            const user = new User(56, 'aspecto', 'io');\n            await manager.save(user);\n            await manager.remove(user);\n            const typeOrmSpans = getTestSpans();\n\n            expect(typeOrmSpans.length).toBe(2);\n            expect(typeOrmSpans[1].status.code).toBe(SpanStatusCode.UNSET);\n            const attributes = typeOrmSpans[1].attributes;\n            expect(attributes[SemanticAttributes.DB_SQL_TABLE]).toBe('user');\n            expect(attributes[SemanticAttributes.DB_SYSTEM]).toBe(options.type);\n            expect(attributes[SemanticAttributes.DB_NAME]).toBe(options.database);\n            expect(attributes[SemanticAttributes.DB_OPERATION]).toBe('remove');\n            expect(attributes[SemanticAttributes.DB_STATEMENT]).toBe(\n                JSON.stringify({ targetOrEntity: { id: 56, firstName: 'aspecto', lastName: 'io' } })\n            );\n            await connection.close();\n        });\n\n        it('update', async () => {\n            const options = defaultOptions;\n            const connection = await typeorm.createConnection(defaultOptions);\n            const manager = connection.createEntityManager();\n            const user = new User(56, 'aspecto', 'io');\n            await manager.save(user);\n            const partialEntity = { lastName: '.io' };\n            await manager.update(User, 56, partialEntity);\n            const typeOrmSpans = getTestSpans();\n\n            expect(typeOrmSpans.length).toBe(2);\n            expect(typeOrmSpans[1].status.code).toBe(SpanStatusCode.UNSET);\n            const attributes = typeOrmSpans[1].attributes;\n            expect(attributes[SemanticAttributes.DB_SQL_TABLE]).toBe('user');\n            expect(attributes[SemanticAttributes.DB_SYSTEM]).toBe(options.type);\n            expect(attributes[SemanticAttributes.DB_NAME]).toBe(options.database);\n            expect(attributes[SemanticAttributes.DB_OPERATION]).toBe('update');\n            expect(attributes[SemanticAttributes.DB_STATEMENT]).toBe(\n                JSON.stringify({ target: 'User', criteria: 56, partialEntity })\n            );\n            await connection.close();\n        });\n\n        it('Sets failure status when function throws', async () => {\n            const connection = await typeorm.createConnection(defaultOptions);\n            const manager = connection.createEntityManager();\n            try {\n                await manager.find({} as any);\n            } catch (err) {}\n\n            const typeOrmSpans = getTestSpans();\n            expect(typeOrmSpans.length).toBe(1);\n            expect(typeOrmSpans[0].status.code).toBe(SpanStatusCode.ERROR);\n            expect(typeOrmSpans[0].status.message).toBe('No metadata for \"[object Object]\" was found.');\n            await connection.close();\n        });\n    });\n\n    describe('multiple connections', () => {\n        const options2: any = {\n            name: 'connection2',\n            type: 'sqlite',\n            database: 'connection2.db',\n            entities: [User],\n            synchronize: true,\n        };\n\n        it('appends matching connection details to span', async () => {\n            const [sqlite1, sqlite2] = await typeorm.createConnections([defaultOptions, options2]);\n            const manager1 = sqlite1.createEntityManager();\n            const manager2 = sqlite2.createEntityManager();\n\n            const user = new User(1, 'aspecto', 'io');\n            await manager1.save(user);\n            await manager2.remove(user);\n\n            const spans = getTestSpans();\n            expect(spans.length).toBe(2);\n            const sqlite1Span = spans[0];\n            const sqlite2Span = spans[1];\n\n            expect(sqlite1Span.attributes[SemanticAttributes.DB_SYSTEM]).toBe(defaultOptions.type);\n            expect(sqlite1Span.attributes[SemanticAttributes.DB_NAME]).toBe(defaultOptions.database);\n            expect(sqlite1Span.attributes[SemanticAttributes.DB_OPERATION]).toBe('save');\n            expect(sqlite1Span.attributes[SemanticAttributes.DB_SQL_TABLE]).toBe('user');\n\n            expect(sqlite2Span.attributes[SemanticAttributes.DB_SYSTEM]).toBe(options2.type);\n            expect(sqlite2Span.attributes[SemanticAttributes.DB_NAME]).toBe(options2.database);\n            expect(sqlite2Span.attributes[SemanticAttributes.DB_OPERATION]).toBe('remove');\n            expect(sqlite2Span.attributes[SemanticAttributes.DB_SQL_TABLE]).toBe('user');\n            await sqlite1.close();\n            await sqlite2.close();\n        });\n    });\n});\n"]}