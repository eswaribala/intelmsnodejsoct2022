{"version":3,"file":"config.spec.js","sourceRoot":"","sources":["../../test/config.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import 'mocha';\nimport expect from 'expect';\nimport { Span } from '@opentelemetry/sdk-trace-base';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions';\nimport { ExtendedDatabaseAttribute, TypeormInstrumentation, TypeormInstrumentationConfig } from '../src';\nimport { getTestSpans, registerInstrumentationTesting } from '@opentelemetry/contrib-test-utils';\n\nconst instrumentation = registerInstrumentationTesting(new TypeormInstrumentation());\nimport * as typeorm from 'typeorm';\nimport { defaultOptions, User } from './utils';\nimport { SpanStatusCode } from '@opentelemetry/api';\n\ndescribe('TypeormInstrumentationConfig', () => {\n    it('responseHook', async function () {\n        this.timeout(3_000);\n        instrumentation.disable();\n        const config: TypeormInstrumentationConfig = {\n            responseHook: (span: Span, response: any) => {\n                span.setAttribute('test', JSON.stringify(response));\n            },\n        };\n        instrumentation.setConfig(config);\n        instrumentation.enable();\n\n        const connection = await typeorm.createConnection(defaultOptions);\n        const user = new User(1, 'aspecto', 'io');\n        await connection.manager.save(user);\n        const typeOrmSpans = getTestSpans();\n        expect(typeOrmSpans.length).toBe(1);\n        const attributes = typeOrmSpans[0].attributes;\n\n        expect(attributes['test']).toBe(JSON.stringify(user));\n        expect(attributes[SemanticAttributes.DB_OPERATION]).toBe('save');\n        expect(attributes[SemanticAttributes.DB_SYSTEM]).toBe(defaultOptions.type);\n        await connection.close();\n    });\n\n    it('moduleVersionAttributeName works', async () => {\n        instrumentation.disable();\n        const config: TypeormInstrumentationConfig = {\n            moduleVersionAttributeName: 'module.version',\n        };\n        instrumentation.setConfig(config);\n        instrumentation.enable();\n\n        const connection = await typeorm.createConnection(defaultOptions);\n        const user = new User(1, 'aspecto', 'io');\n        await connection.manager.save(user);\n        const typeOrmSpans = getTestSpans();\n\n        expect(typeOrmSpans.length).toBe(1);\n        const attributes = typeOrmSpans[0].attributes;\n        expect(attributes[SemanticAttributes.DB_SQL_TABLE]).toBe('user');\n        expect(attributes['module.version']).toMatch(/\\d{1,4}\\.\\d{1,4}\\.\\d{1,5}.*/);\n        await connection.close();\n    });\n\n    it('enableInternalInstrumentation:true', async () => {\n        const config: TypeormInstrumentationConfig = { enableInternalInstrumentation: true };\n        instrumentation.setConfig(config);\n        const connection = await typeorm.createConnection(defaultOptions);\n        const [users, count] = await connection.manager.findAndCount(User);\n        const spans = getTestSpans();\n        expect(spans.length).toEqual(2);\n\n        const findAndCountSpan = spans.find((s) => s.name.indexOf('findAndCount') !== -1);\n        expect(findAndCountSpan).not.toBeUndefined();\n        expect(findAndCountSpan.attributes[SemanticAttributes.DB_OPERATION]).toBe('findAndCount');\n        expect(findAndCountSpan.attributes[SemanticAttributes.DB_SQL_TABLE]).toBe('user');\n\n        const selectSpan = spans.find((s) => s.name.indexOf('select') !== -1);\n        expect(selectSpan).not.toBeUndefined();\n        expect(selectSpan.attributes[SemanticAttributes.DB_OPERATION]).toBe('select');\n        expect(selectSpan.attributes[SemanticAttributes.DB_SQL_TABLE]).toBe('user');\n        await connection.close();\n    });\n\n    it('enableInternalInstrumentation:false', async () => {\n        const config: TypeormInstrumentationConfig = { enableInternalInstrumentation: false };\n        instrumentation.setConfig(config);\n        const connection = await typeorm.createConnection(defaultOptions);\n        const [users, count] = await connection.manager.findAndCount(User);\n        const spans = getTestSpans();\n        expect(spans.length).toEqual(1);\n        const attributes = spans[0].attributes;\n        expect(attributes[SemanticAttributes.DB_OPERATION]).toBe('findAndCount');\n        expect(attributes[SemanticAttributes.DB_SYSTEM]).toBe(defaultOptions.type);\n        expect(attributes[SemanticAttributes.DB_SQL_TABLE]).toBe('user');\n        await connection.close();\n    });\n\n    it('collectParameters:true', async () => {\n        const config: TypeormInstrumentationConfig = {\n            collectParameters: true,\n        };\n        instrumentation.setConfig(config);\n        const connectionOptions = defaultOptions as any;\n        const connection = await typeorm.createConnection(connectionOptions);\n        await connection\n            .getRepository(User)\n            .createQueryBuilder('user')\n            .where('user.id = :userId', { userId: '1' })\n            .andWhere('user.firstName = :firstName', { firstName: 'bob' })\n            .andWhere('user.lastName = :lastName', { lastName: 'dow' })\n            .getMany();\n        const typeOrmSpans = getTestSpans();\n        expect(typeOrmSpans.length).toBe(1);\n        expect(typeOrmSpans[0].status.code).toBe(SpanStatusCode.UNSET);\n        const attributes = typeOrmSpans[0].attributes;\n        expect(attributes[SemanticAttributes.DB_SYSTEM]).toBe(connectionOptions.type);\n        expect(attributes[SemanticAttributes.DB_USER]).toBe(connectionOptions.username);\n        expect(attributes[SemanticAttributes.NET_PEER_NAME]).toBe(connectionOptions.host);\n        expect(attributes[SemanticAttributes.NET_PEER_PORT]).toBe(connectionOptions.port);\n        expect(attributes[SemanticAttributes.DB_NAME]).toBe(connectionOptions.database);\n        expect(attributes[SemanticAttributes.DB_SQL_TABLE]).toBe('user');\n        expect(attributes[SemanticAttributes.DB_STATEMENT]).toBe(\n            'SELECT \"user\".\"id\" AS \"user_id\", \"user\".\"firstName\" AS \"user_firstName\", \"user\".\"lastName\" AS \"user_lastName\" FROM \"user\" \"user\" WHERE \"user\".\"id\" = :userId AND \"user\".\"firstName\" = :firstName AND \"user\".\"lastName\" = :lastName'\n        );\n        expect(attributes[ExtendedDatabaseAttribute.DB_STATEMENT_PARAMETERS]).toBe(\n            JSON.stringify({ userId: '1', firstName: 'bob', lastName: 'dow' })\n        );\n        await connection.close();\n    });\n});\n"]}