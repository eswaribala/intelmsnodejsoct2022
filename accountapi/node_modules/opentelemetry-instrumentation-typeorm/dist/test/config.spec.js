"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
require("mocha");
const expect_1 = __importDefault(require("expect"));
const semantic_conventions_1 = require("@opentelemetry/semantic-conventions");
const src_1 = require("../src");
const contrib_test_utils_1 = require("@opentelemetry/contrib-test-utils");
const instrumentation = contrib_test_utils_1.registerInstrumentationTesting(new src_1.TypeormInstrumentation());
const typeorm = __importStar(require("typeorm"));
const utils_1 = require("./utils");
const api_1 = require("@opentelemetry/api");
describe('TypeormInstrumentationConfig', () => {
    it('responseHook', async function () {
        this.timeout(3000);
        instrumentation.disable();
        const config = {
            responseHook: (span, response) => {
                span.setAttribute('test', JSON.stringify(response));
            },
        };
        instrumentation.setConfig(config);
        instrumentation.enable();
        const connection = await typeorm.createConnection(utils_1.defaultOptions);
        const user = new utils_1.User(1, 'aspecto', 'io');
        await connection.manager.save(user);
        const typeOrmSpans = contrib_test_utils_1.getTestSpans();
        expect_1.default(typeOrmSpans.length).toBe(1);
        const attributes = typeOrmSpans[0].attributes;
        expect_1.default(attributes['test']).toBe(JSON.stringify(user));
        expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_OPERATION]).toBe('save');
        expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_SYSTEM]).toBe(utils_1.defaultOptions.type);
        await connection.close();
    });
    it('moduleVersionAttributeName works', async () => {
        instrumentation.disable();
        const config = {
            moduleVersionAttributeName: 'module.version',
        };
        instrumentation.setConfig(config);
        instrumentation.enable();
        const connection = await typeorm.createConnection(utils_1.defaultOptions);
        const user = new utils_1.User(1, 'aspecto', 'io');
        await connection.manager.save(user);
        const typeOrmSpans = contrib_test_utils_1.getTestSpans();
        expect_1.default(typeOrmSpans.length).toBe(1);
        const attributes = typeOrmSpans[0].attributes;
        expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_SQL_TABLE]).toBe('user');
        expect_1.default(attributes['module.version']).toMatch(/\d{1,4}\.\d{1,4}\.\d{1,5}.*/);
        await connection.close();
    });
    it('enableInternalInstrumentation:true', async () => {
        const config = { enableInternalInstrumentation: true };
        instrumentation.setConfig(config);
        const connection = await typeorm.createConnection(utils_1.defaultOptions);
        const [users, count] = await connection.manager.findAndCount(utils_1.User);
        const spans = contrib_test_utils_1.getTestSpans();
        expect_1.default(spans.length).toEqual(2);
        const findAndCountSpan = spans.find((s) => s.name.indexOf('findAndCount') !== -1);
        expect_1.default(findAndCountSpan).not.toBeUndefined();
        expect_1.default(findAndCountSpan.attributes[semantic_conventions_1.SemanticAttributes.DB_OPERATION]).toBe('findAndCount');
        expect_1.default(findAndCountSpan.attributes[semantic_conventions_1.SemanticAttributes.DB_SQL_TABLE]).toBe('user');
        const selectSpan = spans.find((s) => s.name.indexOf('select') !== -1);
        expect_1.default(selectSpan).not.toBeUndefined();
        expect_1.default(selectSpan.attributes[semantic_conventions_1.SemanticAttributes.DB_OPERATION]).toBe('select');
        expect_1.default(selectSpan.attributes[semantic_conventions_1.SemanticAttributes.DB_SQL_TABLE]).toBe('user');
        await connection.close();
    });
    it('enableInternalInstrumentation:false', async () => {
        const config = { enableInternalInstrumentation: false };
        instrumentation.setConfig(config);
        const connection = await typeorm.createConnection(utils_1.defaultOptions);
        const [users, count] = await connection.manager.findAndCount(utils_1.User);
        const spans = contrib_test_utils_1.getTestSpans();
        expect_1.default(spans.length).toEqual(1);
        const attributes = spans[0].attributes;
        expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_OPERATION]).toBe('findAndCount');
        expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_SYSTEM]).toBe(utils_1.defaultOptions.type);
        expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_SQL_TABLE]).toBe('user');
        await connection.close();
    });
    it('collectParameters:true', async () => {
        const config = {
            collectParameters: true,
        };
        instrumentation.setConfig(config);
        const connectionOptions = utils_1.defaultOptions;
        const connection = await typeorm.createConnection(connectionOptions);
        await connection
            .getRepository(utils_1.User)
            .createQueryBuilder('user')
            .where('user.id = :userId', { userId: '1' })
            .andWhere('user.firstName = :firstName', { firstName: 'bob' })
            .andWhere('user.lastName = :lastName', { lastName: 'dow' })
            .getMany();
        const typeOrmSpans = contrib_test_utils_1.getTestSpans();
        expect_1.default(typeOrmSpans.length).toBe(1);
        expect_1.default(typeOrmSpans[0].status.code).toBe(api_1.SpanStatusCode.UNSET);
        const attributes = typeOrmSpans[0].attributes;
        expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_SYSTEM]).toBe(connectionOptions.type);
        expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_USER]).toBe(connectionOptions.username);
        expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.NET_PEER_NAME]).toBe(connectionOptions.host);
        expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.NET_PEER_PORT]).toBe(connectionOptions.port);
        expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_NAME]).toBe(connectionOptions.database);
        expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_SQL_TABLE]).toBe('user');
        expect_1.default(attributes[semantic_conventions_1.SemanticAttributes.DB_STATEMENT]).toBe('SELECT "user"."id" AS "user_id", "user"."firstName" AS "user_firstName", "user"."lastName" AS "user_lastName" FROM "user" "user" WHERE "user"."id" = :userId AND "user"."firstName" = :firstName AND "user"."lastName" = :lastName');
        expect_1.default(attributes[src_1.ExtendedDatabaseAttribute.DB_STATEMENT_PARAMETERS]).toBe(JSON.stringify({ userId: '1', firstName: 'bob', lastName: 'dow' }));
        await connection.close();
    });
});
//# sourceMappingURL=config.spec.js.map