{"version":3,"file":"QueryBuilder.spec.js","sourceRoot":"","sources":["../../test/QueryBuilder.spec.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA,iBAAe;AACf,oDAA4B;AAC5B,4CAAoD;AACpD,8EAAyE;AACzE,gCAAgD;AAChD,0EAAiG;AACjG,MAAM,eAAe,GAAG,mDAA8B,CAAC,IAAI,4BAAsB,EAAE,CAAC,CAAC;AACrF,iDAAmC;AACnC,mCAA+C;AAE/C,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC1B,UAAU,CAAC,GAAG,EAAE;QACZ,eAAe,CAAC,MAAM,EAAE,CAAC;IAC7B,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC,GAAG,EAAE;QACX,eAAe,CAAC,OAAO,EAAE,CAAC;IAC9B,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iBAAiB,EAAE,KAAK,IAAI,EAAE;QAC7B,MAAM,iBAAiB,GAAG,sBAAqB,CAAC;QAChD,MAAM,UAAU,GAAG,MAAM,OAAO,CAAC,gBAAgB,CAAC,iBAAiB,CAAC,CAAC;QACrE,MAAM,YAAY,GAAG,UAAU,CAAC,aAAa,CAAC,YAAI,CAAC,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;QAC/E,MAAM,KAAK,GAAG,MAAM,YAAY,CAAC,KAAK,CAAC,mBAAmB,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC,eAAe,EAAE,CAAC;QAC/F,gBAAM,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAC7B,MAAM,YAAY,GAAG,iCAAY,EAAE,CAAC;QACpC,gBAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACpC,gBAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,oBAAc,CAAC,KAAK,CAAC,CAAC;QAC/D,MAAM,UAAU,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC;QAC9C,gBAAM,CAAC,UAAU,CAAC,yCAAkB,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;QAC9E,gBAAM,CAAC,UAAU,CAAC,yCAAkB,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QAChF,gBAAM,CAAC,UAAU,CAAC,yCAAkB,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;QAClF,gBAAM,CAAC,UAAU,CAAC,yCAAkB,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;QAClF,gBAAM,CAAC,UAAU,CAAC,yCAAkB,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QAChF,gBAAM,CAAC,UAAU,CAAC,yCAAkB,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACjE,gBAAM,CAAC,UAAU,CAAC,yCAAkB,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CACpD,8JAA8J,CACjK,CAAC;QACF,MAAM,UAAU,CAAC,KAAK,EAAE,CAAC;IAC7B,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","sourcesContent":["import 'mocha';\nimport expect from 'expect';\nimport { SpanStatusCode } from '@opentelemetry/api';\nimport { SemanticAttributes } from '@opentelemetry/semantic-conventions';\nimport { TypeormInstrumentation } from '../src';\nimport { getTestSpans, registerInstrumentationTesting } from '@opentelemetry/contrib-test-utils';\nconst instrumentation = registerInstrumentationTesting(new TypeormInstrumentation());\nimport * as typeorm from 'typeorm';\nimport { defaultOptions, User } from './utils';\n\ndescribe('QueryBuilder', () => {\n    beforeEach(() => {\n        instrumentation.enable();\n    });\n\n    afterEach(() => {\n        instrumentation.disable();\n    });\n\n    it('getManyAndCount', async () => {\n        const connectionOptions = defaultOptions as any;\n        const connection = await typeorm.createConnection(connectionOptions);\n        const queryBuilder = connection.getRepository(User).createQueryBuilder('user');\n        const users = await queryBuilder.where('user.id = :userId', { userId: '1' }).getManyAndCount();\n        expect(users.length).toBe(2);\n        const typeOrmSpans = getTestSpans();\n        expect(typeOrmSpans.length).toBe(1);\n        expect(typeOrmSpans[0].status.code).toBe(SpanStatusCode.UNSET);\n        const attributes = typeOrmSpans[0].attributes;\n        expect(attributes[SemanticAttributes.DB_SYSTEM]).toBe(connectionOptions.type);\n        expect(attributes[SemanticAttributes.DB_USER]).toBe(connectionOptions.username);\n        expect(attributes[SemanticAttributes.NET_PEER_NAME]).toBe(connectionOptions.host);\n        expect(attributes[SemanticAttributes.NET_PEER_PORT]).toBe(connectionOptions.port);\n        expect(attributes[SemanticAttributes.DB_NAME]).toBe(connectionOptions.database);\n        expect(attributes[SemanticAttributes.DB_SQL_TABLE]).toBe('user');\n        expect(attributes[SemanticAttributes.DB_STATEMENT]).toBe(\n            'SELECT \"user\".\"id\" AS \"user_id\", \"user\".\"firstName\" AS \"user_firstName\", \"user\".\"lastName\" AS \"user_lastName\" FROM \"user\" \"user\" WHERE \"user\".\"id\" = :userId'\n        );\n        await connection.close();\n    });\n});\n"]}